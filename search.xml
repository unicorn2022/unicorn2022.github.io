<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo常用指令</title>
      <link href="/2023/07/13/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/07/13/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>在<code>Blog</code>目录下，执行下列命令，更新网页，并推送到远程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy &amp;&amp; hexo server</span><br></pre></td></tr></table></figure><p>本地查看效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>推送到远端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>在<code>_posts</code>中新建页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;GAMES101&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常用指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES104</title>
      <link href="/2023/04/01/GAMES104/"/>
      <url>/2023/04/01/GAMES104/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript"src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1id="二引擎架构分层与整体pipeline">二、引擎架构分层与整体pipeline</h1><h2 id="游戏引擎分层简介-51">2.1 游戏引擎分层简介 5+1</h2><ol type="1"><li>工具层<strong>Tool Layer</strong>：各种编辑器</li><li>功能层<strong>FunctionLayer</strong>：让游戏Visible(渲染)、Movable(物理系统)、Playable(状态机&amp;人机交互)</li><li>资源层<strong>ResourceLayer</strong>：各种数据文件，如图形、几何、声音、视频、场景等等</li><li>核心层<strong>CoreLayer</strong>：引擎的工具箱，如内存管理、容器分配、数学运算等等</li><li>平台层<strong>Platform Layer</strong>：隐藏不同平台的不同接口</li></ol><p>第三方库文件<strong>3nd PartyLibraries</strong>，与各个层都会有关系</p><h2 id="资源层">2.2 资源层</h2><ol type="1"><li>将各种资源文件，转化成引擎统一的格式，如<strong>.uasset</strong></li><li>这一步会将很多冗余信息清除，将文件的格式转化为GPU可以高效绘制的格式</li><li>还需要生成一些资源文件，用于表示不同资源文件之间的关联</li><li>需要负责管理所有资产的<strong>生命周期</strong>：垃圾回收GC、延迟加载</li></ol><h2 id="功能层">2.3 功能层</h2><ol type="1"><li>每经过一个<strong>Tick</strong>，会将整个游戏的逻辑和渲染运行一遍</li><li><strong>tick</strong>会分为两个步骤：<strong>tickLogic()</strong>=&gt; <strong>tickRender()</strong><ol type="1"><li><strong>tickLogic()</strong>：对世界的模拟，如输入输出、物理系统、碰撞检测</li><li><strong>tickRender()</strong>：对世界的渲染</li></ol></li><li>功能层是整个引擎中最多的部分，会跟具体游戏有关联</li><li>功能层的某些模块既可以当作是引擎的模块，也可以当作是游戏的模块，如：相机的移动</li></ol><p><img src="/images/AssetMarkdown/image-20230425210150246.png" alt="image-20230425210150246" style="zoom:80%;" /></p><p>多线程计算：</p><p><img src="/images/AssetMarkdown/image-20230425210452719.png" alt="image-20230425210452719" style="zoom:80%;" /></p><h2 id="核心层">2.4 核心层</h2><ol type="1"><li>数学库：<ol type="1"><li>为了提高效率，因此会在核心层中，重写数学库</li><li>如用SIMD实现矩阵乘法</li></ol></li><li>数据结构和容器：<ol type="1"><li>也是为了提高效率，因此会在核心层中，重写数据结构，而不是直接使用STL容器</li></ol></li><li>内存管理<ol type="1"><li>游戏引擎会提前申请一大块内存，由引擎管理</li><li>三个原则：尽可能将数据放到一起、按顺序访问数据、一次申请/释放一整块数据</li></ol></li><li>一般来说，核心层的代码质量最高，轻易不会修改</li></ol><h2 id="平台层">2.5 平台层</h2><ol type="1"><li><p>掩盖掉不同平台之间的差异</p><ol type="1"><li><p>文件的路径</p></li><li><p>图形学API：用Render Hardware Interface(RHI)隐藏起来</p><p><img src="/images/AssetMarkdown/image-20230425211749281.png" alt="image-20230425211749281" style="zoom:80%;" /></p></li><li><p>硬件架构</p></li></ol></li><li><p>平台层的好坏影响了游戏在不同平台上的性能优劣</p></li></ol><h2 id="工具层">2.6 工具层</h2><p>允许所有人用引擎创建游戏</p><ol type="1"><li>保证工具层展示的结果和最终游戏的结果是一样的</li><li>以开发效率为优先，而不是以运行效率为优先</li></ol><p>DCC：Digital Content Creation</p><ol type="1"><li>将其他工具产生的数字资产，转化为引擎统一的数字资产</li></ol><h2 id="为什么要分层架构">2.7 为什么要分层架构</h2><ol type="1"><li>降低问题的复杂度，让每一层只需要考虑自己的任务<ol type="1"><li>越底层的东西越不会轻易改变</li><li>越往上，越灵活；越往下，越稳定</li></ol></li><li>要先将问题划分为不同层次的任务，然后再进行开发</li><li>只允许上层调用下层，下层不能调用上层</li></ol><h1 id="三如何构建游戏世界">三、如何构建游戏世界</h1><h1 id="十八网络游戏的架构基础">十八、网络游戏的架构基础</h1><h2 id="同步算法">18.1 同步算法</h2><h3 id="快照同步snapshot">18.1.1 快照同步Snapshot</h3><blockquote><p>如Quake</p></blockquote><ol type="1"><li>步骤：<ol type="1"><li>客户端：把<strong>输入</strong>发送给服务器</li><li>服务器：将所有客户的输入集合起来，在服务器中进行<strong>游戏世界的模拟</strong>，然后将<strong>游戏世界的状态</strong>生成<strong>快照</strong>返回给客户端</li><li>客户端：拿到服务器给的快照后，将所有对象设置为对应的状态，然后进行<strong>渲染</strong></li></ol></li><li>优点：<ol type="1"><li>结构清晰，保证了绝<strong>对的一致性</strong>，无法作弊</li><li>不用担心同步的问题</li><li>客户端只负责输入和最后的渲染</li><li>当客户端非常多时，服务器的计算量是最低的，因为只需要对世界模拟一次即可</li></ol></li><li>针对实际情况的改进：<ol type="1"><li>服务器端的帧率通常会很低，需要客户端进行插值</li><li>快照可能包含非常多的信息，但是相邻两帧通常差距不大，因此可以只传delta，从而降低信息量</li></ol></li><li>缺点：<ol type="1"><li>浪费了客户端的算力</li><li>服务器生成快照传递给每一个客户端，会占用非常大的服务器处的上行带宽</li></ol></li></ol><h3 id="帧同步lockstep">18.1.2 帧同步Lockstep</h3><blockquote><p>如DOOM、王者荣耀</p></blockquote><ol type="1"><li>步骤：<ol type="1"><li>每一帧：客户端把输入统一交给服务器</li><li>服务器等待所有服务器提交输入，然后把所有输入分发给客户端</li><li>客户端得到服务器的指令，做一致的游戏逻辑模拟，得到的结果一定相同</li><li>要求所有客户端进行初始化，初始条件必须相同</li></ol></li><li>针对实际情况的改进：<ol type="1"><li>如果有一个客户端发送输入总是很慢，就需要其他客户端等待它<ol type="1"><li><strong>BucketSynchronization</strong>：每隔固定的时间收集一次信息，服务器没收到的就当没发生</li></ol></li></ol></li><li>缺点：<ol type="1"><li>一样的输入，得到的结果<strong>不一定</strong>相同，因为会有随机数、浮点数等<strong>不确定</strong>的因素<ol type="1"><li>浮点数：要求满足IEE754标准</li><li>随机数：要求随机数种子、随机数算法严格相同</li></ol></li></ol></li></ol><h3 id="状态同步state-synchornization">18.1.3 状态同步StateSynchornization</h3><blockquote><p>如CS</p></blockquote><ol type="1"><li>步骤：<ol type="1"><li>客户端：Authorized将命令发送给服务器(如向某个方向发射一个炮弹)</li><li>服务器：接收客户端的命令，模拟操作(如打中某个对象)，然后将改变的状态广播给所有客户端</li><li>客户端：接收服务器的对场景状态的改变，模拟出整个世界</li></ol></li><li>针对实际情况的改进：<ol type="1"><li>客户端发送指令，服务器接受指令并确返回结果，会存在延迟<ol type="1"><li><strong>Client-sideprediction</strong>：客户端要进行预测操作，即先将客户的指令执行，然后再和服务器对齐<ol type="1"><li>守望先锋：预测半个RTT+一个命令帧时间</li></ol></li><li><strong>ServerReconciliation</strong>：预测与服务器的返回不一致时，客户端要与服务器对齐<ol type="1"><li>平滑的差值对齐</li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> GAMES系列课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAMES系列课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101</title>
      <link href="/2023/02/26/GAMES101/"/>
      <url>/2023/02/26/GAMES101/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript"src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="第00课-vs环境配置">第00课 VS环境配置</h1><p><strong>库文件的安装</strong></p><p><ahref="https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.zip"><strong>Eigen库下载</strong></a>：解压路径如下</p><blockquote><p><code>D:\Program\Library\eigen-3.4.0</code></p></blockquote><p><strong>opencv库下载</strong>：解压路径如下</p><blockquote><p><code>D:\Program\Library\opencv</code></p></blockquote><p><strong>将opencv添加到环境变量中</strong></p><p>在<strong>Path</strong>中添加：</p><blockquote><p><code>D:\Program\Library\opencv\opencv\build\x64\vc14\bin</code></p><p><code>D:\Program\Library\opencv\opencv\build\x64\vc15\bin</code></p></blockquote><p><img src="/images/AssetMarkdown/image-20230226182328400.png" alt="image-20230226182328400" style="zoom:80%;" /></p><p><strong>修改VS的项目设置</strong></p><ol type="1"><li><p>【VC++目录】</p><ol type="1"><li><p>【包含目录】：添加如下项</p><blockquote><p><code>D:\Program\Library\eigen-3.4.0\Eigen</code></p><p><code>D:\Program\Library\opencv\opencv\build\include</code></p></blockquote></li><li><p>【库目录】：添加如下项</p><blockquote><p><code>D:\Program\Library\opencv\opencv\build\x64\vc14\lib</code></p></blockquote></li></ol></li><li><p>【C/C++】【常规】【附加包含目录】：添加如下项</p><blockquote><p><code>D:\Program\Library\opencv\opencv\build\include</code></p></blockquote></li><li><p>【链接器】【输入】【附加依赖项】：添加如下项</p><ol type="1"><li>带d的为Debug环境，不带d的为Release环境</li></ol><blockquote><p><code>opencv_world460d.lib</code></p></blockquote></li><li><p>将所有代码中，有关Eigen库的引用，修改为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>【配置属性】【调试】【命令参数】中，可以输入传递给main函数的参数</p><ol type="1"><li>如作业3中，需要输入的是<code>./Rasterizer output.png phong</code></li><li>那么我们就可以在此输入<code>output.png phong</code></li></ol><p><img src="/images/AssetMarkdown/2ccaa721e75c48ebb38a0a55662c518d.png" alt="img" style="zoom:80%;" /></p></li></ol><p><strong>VirtualBox挂载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t vboxsf Share share_dir</span><br></pre></td></tr></table></figure><h1 id="第01课-计算机图形学概览">第01课 计算机图形学概览</h1><ol type="1"><li><p><strong>光栅化</strong>：将三维空间的几何形体显示在屏幕上</p></li><li><p><strong>实时</strong>：每秒钟能够生成30幅画面/30帧/30fps；否则称为离线</p></li><li><p><strong>计算机图形学</strong> 与 <strong>计算机视觉</strong>的区别：</p><p><img src="/images/AssetMarkdown/image-20230223153108705.png" alt="image-20230223153108705" style="zoom:80%;" /></p></li></ol><h1 id="第02课-线性代数复习">第02课 线性代数复习</h1><h2 id="向量点乘">2.1 向量点乘</h2><p><img src="/images/AssetMarkdown/image-20230223163818522.png" alt="image-20230223163818522" style="zoom:80%;" /></p><h3 id="定义">2.1.1 定义</h3><p><span class="math display">\[\begin{aligned}\vec{a}·\vec{b}&amp;=||\vec{a}||*||\vec{b}||*\cos\theta \\               &amp;=x_a*x_b+y_a*y_b+z_a*z_b\\\end{aligned}\]</span></p><h3 id="性质">2.1.2 性质</h3><ol type="1"><li><spanclass="math inline">\(\vec{a}·\vec{b}=\vec{b}·\vec{a}\)</span></li><li><spanclass="math inline">\(\vec{a}·(\vec{b}+\vec{c})=\vec{a}·\vec{b}+\vec{a}·\vec{c}\)</span></li><li><spanclass="math inline">\((k\vec{a})·\vec{b}=\vec{a}·(k\vec{b})=k(\vec{a}·\vec{b})\)</span></li></ol><h3 id="应用">2.1.3 应用</h3><ol type="1"><li><p>计算夹角：<spanclass="math inline">\(\cos\theta=\frac{\vec{a}·\vec{b}}{||\vec{a}||*||\vec{b}||}\)</span></p><p><img src="/images/AssetMarkdown/image-20220810170049692.png" alt="image-20220810170049692" style="zoom: 67%;" /></p></li><li><p>计算投影：<spanclass="math inline">\(||\vec{b}_⊥||=||\vec{b}||\cos\theta\)</span>，<spanclass="math inline">\(\vec{b}_⊥=(||\vec{b}||\cos\theta)\ \hata\)</span></p><p><img src="/images/AssetMarkdown/image-20220810170106422.png" alt="image-20220810170106422" style="zoom: 67%;" /></p></li><li><p>将<span class="math inline">\(\vec{b}\)</span>在<spanclass="math inline">\(\vec{a}\)</span>方向分解：<spanclass="math inline">\(\vec{b}=\vec{b}_⊥+(\vec{b}-\vec{b}_⊥)\)</span></p><p><img src="/images/AssetMarkdown/image-20220810170343996.png" alt="image-20220810170343996" style="zoom: 67%;" /></p></li><li><p>向量之间的方向</p><ol type="1"><li><span class="math inline">\(\vec{a}\)</span>与<spanclass="math inline">\(\vec{b}\)</span>方向基本一致：<spanclass="math inline">\(\hat{a}·\hat{b} &gt;0\)</span>，越接近1，夹角越接近0°</li><li><span class="math inline">\(\vec{a}\)</span>与<spanclass="math inline">\(\vec{b}\)</span>方向基本相反：<spanclass="math inline">\(\hat{a}·\hat{b} &lt;0\)</span>，越接近-1，夹角越接近180°</li><li><span class="math inline">\(\vec{a}\)</span>与<spanclass="math inline">\(\vec{b}\)</span>垂直：<spanclass="math inline">\(\hat{a}·\hat{b}=0\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20220810170534209.png" alt="image-20220810170534209" style="zoom: 67%;" /></p></li></ol><h2 id="向量叉乘">2.2 向量叉乘</h2><h3 id="定义-1">2.2.1 定义</h3><p><img src="/images/AssetMarkdown/image-20220810171343721.png" alt="image-20220810171343721" style="zoom: 67%;" /></p><p>大小：<spanclass="math inline">\(||\vec{a}×\vec{b}||=||\vec{a}||*||\vec{b}||*\sin\theta\)</span></p><p>方向：右手螺旋定则，四指方向为<spanclass="math inline">\(\vec{a}\)</span>旋转到<spanclass="math inline">\(\vec{b}\)</span>，拇指方向为<spanclass="math inline">\(\vec{a}×\vec{b}\)</span>的方向</p><p><img src="/images/AssetMarkdown/image-20220810172156875.png" alt="image-20220810172156875" style="zoom: 67%;" /></p><h3 id="性质-1">2.2.2 性质</h3><p>性质：<spanclass="math inline">\(\vec{a}×\vec{b}=-\vec{b}×\vec{a}\)</span>，可以用于建立空间直角坐标系：</p><ol type="1"><li>右手坐标系：<spanclass="math inline">\(\vec{x}×\vec{y}=\vec{z}\)</span></li><li>左手坐标系：<spanclass="math inline">\(\vec{x}×\vec{y}=-\vec{z}\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20220810171901046.png" alt="image-20220810171901046" style="zoom: 67%;" /></p><h3 id="应用-1">2.2.3 应用</h3><ol type="1"><li><p>判断左右：假设<spanclass="math inline">\(\vec{a}、\vec{b}\)</span>均在XY平面上</p><ol type="1"><li><span class="math inline">\(\vec{b}\)</span>在<spanclass="math inline">\(\vec{a}\)</span>的左侧：<spanclass="math inline">\(Z_{\vec{a}×\vec{b}}&gt;0\)</span></li><li><span class="math inline">\(\vec{b}\)</span>在<spanclass="math inline">\(\vec{a}\)</span>的右侧：<spanclass="math inline">\(Z_{\vec{a}×\vec{b}}&lt;0\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20220810172421848.png" alt="image-20220810172421848" style="zoom: 67%;" /></p></li><li><p>判断内外：假设ABCP四点共面</p><ol type="1"><li>P在▲ABC的内部：若ABC逆时针排列，则都在左面；若ABC顺时针排列，则都在右面<ol type="1"><li><span class="math inline">\(\vec{AP}\)</span>在<spanclass="math inline">\(\vec{AB}\)</span>的左面</li><li><span class="math inline">\(\vec{BP}\)</span>在<spanclass="math inline">\(\vec{BC}\)</span>的左面</li><li><span class="math inline">\(\vec{CP}\)</span>在<spanclass="math inline">\(\vec{CA}\)</span>的左面</li></ol></li><li>P在▲ABC的外部：上述三个条件有一个不符合</li></ol><p><img src="/images/AssetMarkdown/image-20220810172608646.png" alt="image-20220810172608646" style="zoom: 67%;" /></p></li></ol><h2 id="正交基坐标系">2.3 正交基/坐标系</h2><p>正交基：Orthonormal Bases</p><p>坐标系：Coordinate Frames</p><h3 id="定义-2">2.3.1 定义</h3><ol type="1"><li><spanclass="math inline">\(\vec{u}、\vec{v}、\vec{w}\)</span>均为单位向量</li><li><spanclass="math inline">\(\vec{u}、\vec{v}、\vec{w}\)</span>两两垂直</li><li><span class="math inline">\(\vec{w}=\vec{u}×\vec{v}\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20220810173601736.png" alt="image-20220810173601736" style="zoom: 67%;" /></p><h2 id="矩阵">2.4 矩阵</h2><h3 id="矩阵乘法">2.4.1 矩阵乘法</h3><ol type="1"><li>定义：设<spanclass="math inline">\(A[m][n]*B[n][p]=C[m][p]\)</span>，则<spanclass="math inline">\(C[i][j]=\sum_{k=1}^nA[i][k]*B[k][j]=\{A的第i行\}·\{B的第j列\}\)</span></li><li>性质：<ol type="1"><li>没有交换律</li><li>有结合律：<span class="math inline">\((AB)C=A(BC)\)</span></li><li>有分配律：<span class="math inline">\(A(B+C)=AB+AC\)</span>，<spanclass="math inline">\((A+B)C=AC+BC\)</span></li></ol></li></ol><h3 id="矩阵转置">2.4.2 矩阵转置</h3><ol type="1"><li><p>定义：将行列互换</p><p><img src="/images/AssetMarkdown/image-20220812181413411.png" alt="image-20220812181413411" style="zoom: 67%;" /></p></li><li><p>性质：<span class="math inline">\((AB)^T=B^TA^T\)</span></p></li></ol><h3 id="单位矩阵矩阵的逆">2.4.3 单位矩阵&amp;矩阵的逆</h3><ol type="1"><li><p>单位矩阵：</p><p><img src="/images/AssetMarkdown/image-20220812181521742.png" alt="image-20220812181521742" style="zoom:67%;" /></p></li><li><p>逆矩阵的定义：<spanclass="math inline">\(AA^{-1}=A^{-1}A=I\)</span></p></li><li><p>逆矩阵的性质：<spanclass="math inline">\((AB)^{-1}=B^{-1}A^{-1}\)</span></p></li></ol><h3 id="矩阵向量点乘叉乘">2.4.4 矩阵&amp;向量点乘/叉乘</h3><ol type="1"><li><p>向量的对偶矩阵：</p><p><img src="/images/AssetMarkdown/image-20230223174941145.png" alt="image-20230223174941145" style="zoom:80%;" /></p></li><li><p>矩阵&amp;向量点乘/叉乘：</p><p><img src="/images/AssetMarkdown/image-20230223175008749.png" alt="image-20230223175008749" style="zoom:80%;" /></p></li></ol><h1 id="第03课-变换12维变换">第03课 变换1：2维变换</h1><p>变换：</p><ol type="1"><li>Modeling：模型变换，物体在3D空间中的运动</li><li>Viewing：视图变换，3D到2D的投影</li></ol><h2 id="d-transform">3.1 2D Transform</h2><h3 id="scale缩放变换">3.1.1 Scale缩放变换</h3><p><img src="/images/AssetMarkdown/image-20220811125108799.png" alt="image-20220811125108799" style="zoom:80%;" /></p><h3 id="reflectin翻转">3.1.2 Reflectin翻转</h3><p><img src="/images/AssetMarkdown/image-20220811125051816.png" alt="image-20220811125051816" style="zoom:80%;" /></p><h3 id="shear切变">3.1.3 Shear切变</h3><p><img src="/images/AssetMarkdown/image-20220811125253629.png" alt="image-20220811125253629" style="zoom:80%;" /></p><h3 id="rotate旋转默认-绕原点-逆时针-旋转">3.1.4 Rotate旋转(默认 绕原点逆时针 旋转)</h3><p><img src="/images/AssetMarkdown/image-20220811125758262.png" alt="image-20220811125758262" style="zoom:80%;" /></p><h3 id="linear-transform线性变换矩阵">3.1.5 LinearTransform线性变换=矩阵</h3><p><img src="/images/AssetMarkdown/image-20220811130400053.png" alt="image-20220811130400053" style="zoom:80%;" /></p><h2 id="homogeneous-coordinates齐次坐标">3.2 Homogeneouscoordinates齐次坐标</h2><h3 id="translation平移变换notin线性变换">3.2.1 Translation平移变换<spanclass="math inline">\(\notin\)</span>线性变换</h3><p><img src="/images/AssetMarkdown/image-20220811130553973.png" alt="image-20220811130553973" style="zoom:80%;" /></p><p>矩阵表示：</p><p><img src="/images/AssetMarkdown/image-20220811130633298.png" alt="image-20220811130633298" style="zoom:80%;" /></p><h3 id="齐次坐标">3.2.2 齐次坐标</h3><p>添加一个维度</p><ol type="1"><li>2维点：<span class="math inline">\((x,y,1)^T\)</span></li><li>2维点的补充形式：<spanclass="math inline">\((x,y,w)^T\)</span>与<spanclass="math inline">\((\frac{x}{w},\frac{y}{w},1)^T\)</span>等价</li><li>2维向量：<span class="math inline">\((x,y,0)^T\)</span></li></ol><p>对于两者第3个坐标的解释：</p><ol type="1"><li>点的第三维为0，向量的第三维为1，可以满足向量的平移不变性</li><li>且可以满足以下性质<ol type="1"><li>vector + vector = vector</li><li>point - point = vector</li><li>point + vector = point</li><li>point + point = 两个point的中点</li></ol></li></ol><h3 id="affine-transformation仿射变换-线性变换-平移变换">3.2.3 AffineTransformation仿射变换 = 线性变换 + 平移变换</h3><p><img src="/images/AssetMarkdown/image-20220811131633578.png" alt="image-20220811131633578" style="zoom:80%;" /></p><h3 id="d-transformation">3.2.4 2D Transformation</h3><p><img src="/images/AssetMarkdown/image-20220811131725685.png" alt="image-20220811131725685" style="zoom:80%;" /></p><h3 id="inverse-transform逆变换">3.2.5 Inverse Transform逆变换</h3><p>逆变换 &lt;==&gt; 乘变换矩阵的逆矩阵</p><p><img src="/images/AssetMarkdown/image-20220811155155659.png" alt="image-20220811155155659" style="zoom:80%;" /></p><h2 id="composing-transforms变换的组合">3.3 ComposingTransforms变换的组合</h2><h3 id="举例">3.3.1 举例</h3><ol type="1"><li>复杂变换可以有简单变换组合而成</li><li>简单变换的顺序是很有必要的 &lt;==&gt; 矩阵乘法不满足交换律</li></ol><p>变换的目标：</p><p><img src="/images/AssetMarkdown/image-20220811155307566.png" alt="image-20220811155307566" style="zoom:80%;" /></p><p>变换的方法：先平移后旋转 or 先旋转后平移</p><p><img src="/images/AssetMarkdown/image-20220811155434542.png" alt="image-20220811155434542" style="zoom:80%;" /></p><p>矩阵表示：<strong>从右到左</strong>进行矩阵乘法，顺序为：<strong>缩放=&gt; 旋转 =&gt; 平移</strong></p><p><img src="/images/AssetMarkdown/image-20220811155453930.png" alt="image-20220811155453930" style="zoom:80%;" /></p><h3 id="多个变换">3.3.2 多个变换</h3><p>假设有一系列仿射变换<spanclass="math inline">\(A_1,A_2,A_3...\)</span></p><ol type="1"><li><p>可以用矩阵乘法表示：</p><p><img src="/images/AssetMarkdown/image-20220811155912416.png" alt="image-20220811155912416" style="zoom:80%;" /></p></li><li><p>可以先计算<spanclass="math inline">\(A_n...A_2·A_1\)</span>，再与列向量相乘</p><ol type="1"><li>一个3*3的矩阵可以表示任意的变换</li></ol></li></ol><h3 id="变换的分解">3.3.3 变换的分解</h3><p>以C点为中心进行旋转<spanclass="math inline">\(\alpha\)</span>度：<spanclass="math inline">\(T(\vec{c})·R(\alpha)·T(\vec{-c})\)</span></p><ol type="1"><li>先将图形按照<spanclass="math inline">\(\vec{-c}\)</span>的方向进行平移：<spanclass="math inline">\(T(\vec{-c})\)</span></li><li>然后绕原点旋转<span class="math inline">\(\alpha\)</span>度：<spanclass="math inline">\(R(\alpha)\)</span></li><li>然后将图形按照<spanclass="math inline">\(\vec{c}\)</span>的方向进行平移：<spanclass="math inline">\(T(\vec{c})\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20220811160035313.png" alt="image-20220811160035313" style="zoom:80%;" /></p><h1 id="第04课-变换2三维变换">第04课 变换2：三维变换</h1><h2 id="有关旋转的补充">4.0 有关旋转的补充</h2><strong>旋转矩阵的逆 == 旋转矩阵的转置</strong> ==&gt;<strong>旋转矩阵为正交矩阵</strong> $$ R_{}= (<span class="math display">\[\begin{matrix}\cos\theta &amp; -\sin\theta \\\sin\theta &amp; \cos\theta\end{matrix}\]</span><p>) \</p>R_{-}= (<span class="math display">\[\begin{matrix}\cos\theta &amp; \sin\theta \\-\sin\theta &amp; \cos\theta\end{matrix}\]</span><p>) =R_{}^T \</p><p>R_{-}=R_^{-1} $$</p><p>正交矩阵：<span class="math inline">\(R^T=R^{-1}\)</span></p><h2 id="d-transformations">4.1 3D Transformations</h2><h3 id="齐次坐标-1">4.4.1 齐次坐标</h3><ol type="1"><li>3维点：<span class="math inline">\((x,y,z,1)^T\)</span></li><li>3维点的补充形式：<spanclass="math inline">\((x,y,z,w)^T\)</span>与<spanclass="math inline">\((\frac{x}{w},\frac{y}{w},\frac{z}{w},1)^T\)</span>等价</li><li>3维向量：<span class="math inline">\((x,y,z,0)^T\)</span></li></ol><h3 id="仿射变换">4.4.2 仿射变换</h3><blockquote><p><strong>Affine Transform</strong>：</p></blockquote><ol type="1"><li>变换的顺序：先<strong>线性变换</strong>，后加<strong>平移</strong>量</li></ol><p><img src="/images/AssetMarkdown/image-20220812113815122.png" alt="image-20220812113815122" style="zoom:80%;" /></p><h4 id="缩放">4.4.2.1 缩放</h4><p><img src="/images/AssetMarkdown/image-20220812113919856.png" alt="image-20220812113919856" style="zoom:80%;" /></p><h4 id="平移">4.4.2.2 平移</h4><p><img src="/images/AssetMarkdown/image-20220812113927686.png" alt="image-20220812113927686" style="zoom:80%;" /></p><h4 id="旋转">4.4.2.3 旋转</h4><h5 id="绕坐标轴旋转">4.4.2.3.1 绕坐标轴旋转</h5><ol type="1"><li><p>绕X轴：X不变，YZ旋转</p><p><img src="/images/AssetMarkdown/image-20220812114205936.png" alt="image-20220812114205936" style="zoom:80%;" /></p></li><li><p>绕Y轴：Y不变，ZX旋转</p><p><img src="/images/AssetMarkdown/image-20220812114238231.png" alt="image-20220812114238231" style="zoom:80%;" /></p></li><li><p>绕Z轴：Z不变，XY旋转</p><p><img src="/images/AssetMarkdown/image-20220812114220868.png" alt="image-20220812114220868" style="zoom:80%;" /></p></li></ol><h5 id="绕任意过原点的轴旋转">4.4.2.3.2 绕任意过原点的轴旋转</h5><blockquote><p>有两种形式：欧拉角、四元数</p><ol type="1"><li>四元数：多应用于旋转的插值操作</li></ol></blockquote><ol type="1"><li><p>绕任意轴旋转：分解为<strong>欧拉角</strong></p><ol type="1"><li>将任意轴方向的旋转，分解为绕X、Y、Z轴的旋转：<spanclass="math inline">\(R_{x,y,z}(\alpha,\beta,\gamma)\)</span></li><li><spanclass="math inline">\(\alpha,\beta,\gamma\)</span>也被称为欧拉角</li></ol><p><img src="/images/AssetMarkdown/image-20230226070451531.png" alt="image-20230226070451531" style="zoom: 80%;" /></p></li><li><p><strong>Rodrigues’ Rotation Formula 罗德里格旋转公式</strong></p><ol type="1"><li>向量<strong>v</strong>绕过原点的轴<strong>n</strong>旋转<strong><spanclass="math inline">\(\alpha\)</span></strong>角</li><li>向量<strong>I</strong>为向量<strong>v</strong>方向的单位向量</li></ol><p><img src="/images/AssetMarkdown/image-20230226070549341.png" alt="image-20230226070549341" style="zoom:80%;" /></p></li></ol><blockquote><p>推导思路：</p><ol type="1"><li><p><strong>v</strong>与<strong>n</strong>垂直时，<spanclass="math inline">\(\vec{v&#39;}=\cos\alpha*\vec{v}+\sin\alpha*(\vec{n}×\vec{I})\)</span></p></li><li><p><strong>v</strong>与<strong>n</strong>不垂直时，将<strong>v</strong>分解为垂直于<strong>n</strong>的向量<strong>v<sub>⊥</sub></strong>和平行于<strong>n</strong>的向量<strong>v<sub>∥</sub></strong></p><ol type="1"><li><spanclass="math inline">\(\vec{v_∥&#39;}=\vec{v_∥}=|\vec{v}|*cos&lt;\vec{v},\vec{n}&gt;=\vec{v}·\vec{n}·\vec{n}\)</span></li><li><spanclass="math inline">\(\vec{v_⊥}=\vec{v}-\vec{v_∥}=\vec{v}-\vec{v}·\vec{n}·\vec{n}\)</span></li><li><spanclass="math inline">\(\vec{v_⊥&#39;}=\cos\alpha*\vec{v_⊥}+\sin\alpha*(\vec{n}×\vec{v_⊥})\)</span></li><li>综上可得：<spanclass="math inline">\(\vec{v&#39;}=\vec{v_∥&#39;}+\vec{v_⊥&#39;}=\cos\alpha*\vec{v}+(1-\cos\alpha)*\vec{v}·\vec{n}·\vec{n}+\sin\alpha*(\vec{n}×\vec{v})\)</span></li></ol></li><li><p>矩阵形式：<spanclass="math inline">\(\vec{v&#39;}=\cos\alpha*\vec{v}+(1-\cos\alpha)*\vec{v}·\vec{n}·\vec{n}+\sin\alpha*(\vec{n}×\vec{v})\)</span>$</p><pre><code>                   $=[\cos\alpha*\vec&#123;I&#125;+(1-\cos\alpha)*\vec&#123;n&#125;·\vec&#123;n&#125;^T+\sin\alpha*(\vec&#123;n&#125;×\vec&#123;I&#125;)]·\vec&#123;v&#125;$</code></pre></li></ol></blockquote><h5 id="绕过任意点的任意轴旋转">4.4.2.3.2 绕过任意点的任意轴旋转</h5><p>绕过任意轴<strong>n</strong>旋转<strong><spanclass="math inline">\(\alpha\)</span></strong>角</p><ol type="1"><li>先将轴平移至过原点</li><li>然后旋转</li><li>最后平移回去</li></ol><h2 id="model-view-transformation">4.2 Model &amp; ViewTransformation</h2><h3 id="什么是视图变换">4.2.1 什么是视图变换</h3><ol type="1"><li>与照相类比：<strong>MVP</strong>变换</li></ol><table><colgroup><col style="width: 42%" /><col style="width: 57%" /></colgroup><thead><tr class="header"><th style="text-align: center;">照相</th><th style="text-align: center;">对应变换</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">找一个好的地方、人物排列</td><td style="text-align: center;">模型变换 <strong>model</strong>transformation</td></tr><tr class="even"><td style="text-align: center;">找一个好的角度放置摄像机</td><td style="text-align: center;">视图变换 <strong>view</strong>transformation</td></tr><tr class="odd"><td style="text-align: center;">拍照，三维空间投影到二维平面</td><td style="text-align: center;">投影变换 <strong>projection</strong>transformation</td></tr></tbody></table><h3 id="定义camera">4.2.2 定义Camera</h3><ol type="1"><li>位置<strong>Position</strong>：<spanclass="math inline">\(\vec{e}\)</span></li><li>往哪看<strong>Look-at/gaze direction</strong>：<spanclass="math inline">\(\vec{g}\)</span></li><li>向上方向<strong>Up direction</strong>：<spanclass="math inline">\(\vec{t}\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20220812123220752.png" alt="image-20220812123220752" style="zoom:80%;" /></p><h3 id="关键点相机与物体的相对位置决定看到的图像">4.2.3关键点：相机与物体的相对位置决定看到的图像</h3><ol type="1"><li><p>只要<strong>摄像机</strong>与<strong>物体</strong>的相对位置一样，所看到的图形就是一样的</p><figure><img src="/images/AssetMarkdown/image-20220812123524813.png"alt="image-20220812123524813" /><figcaption aria-hidden="true">image-20220812123524813</figcaption></figure></li><li><p>将摄像机永远放在一个标准的位置</p><ol type="1"><li><strong>Position</strong>：原点</li><li><strong>Up direction</strong>：Y轴</li><li><strong>Look-at direction</strong>：-Z轴</li></ol></li><li><p>当相机变换时，将物体随着相机变换</p></li></ol><h3 id="将相机移动到标准位置">4.2.4 将相机移动到标准位置</h3><ol type="1"><li><p>方法</p><ol type="1"><li>将<spanclass="math inline">\(\vec{e}\)</span>平移到<strong>原点</strong></li><li>旋转 <span class="math inline">\(\vec{g}\)</span>到<strong>-Z</strong>的方向</li><li>旋转 <span class="math inline">\(\vec{t}\)</span>到<strong>Y</strong>的方向</li><li>旋转 <span class="math inline">\(\vec{g}×\vec{t}\)</span>到<strong>X</strong>方向</li></ol></li><li><p>矩阵表示：设<spanclass="math inline">\(M_{view}=R_{view}T_{view}\)</span></p><ol type="1"><li><p>将<span class="math inline">\(\vec{e}\)</span>平移到原点</p><p><img src="/images/AssetMarkdown/image-20220812164249448.png" alt="image-20220812164249448" style="zoom:80%;" /></p></li><li><p>旋转 <span class="math inline">\(\vec{g}\)</span>到<strong>-Z</strong>、 <span class="math inline">\(\vec{t}\)</span>到<strong>Y</strong>、<spanclass="math inline">\(\vec{g}×\vec{t}\)</span>到<strong>X</strong>：考虑逆矩阵</p><p><img src="/images/AssetMarkdown/image-20220812164531901.png" alt="image-20220812164531901" style="zoom:80%;" /></p></li></ol></li></ol><h3 id="总结">4.2.5 总结</h3><ol type="1"><li>将物体与相机一起旋转：<strong>Model Transformation ==&gt; <spanclass="math inline">\(M_{model}\)</span></strong></li><li>将相机变换到标准位置：<strong>View Transformation ==&gt; <spanclass="math inline">\(M_{view}\)</span></strong><ol type="1"><li>Position：原点</li><li>Up direction：Y轴</li><li>Look-at direction：-Z轴</li></ol></li></ol><h2 id="projection-transformation">4.3 Projection Transformation</h2><ol type="1"><li>正交投影 <strong>OrthographicProjection</strong>：不存在近大远小</li><li>透视投影 <strong>PerspectiveProjection</strong>：存在近大远小，平行线不再平行</li></ol><p><img src="/images/AssetMarkdown/image-20220812165450522.png" alt="image-20220812165450522" style="zoom:80%;" /></p><h3 id="正交投影">4.3.1 正交投影</h3><blockquote><p><strong>Orthographic Projection</strong>：</p><ol type="1"><li>思想：直接扔掉物体的Z坐标，然后将其移动到[-1,1]的标准范围内</li></ol></blockquote><ol type="1"><li><p>实际做法：将一个立方体<span class="math inline">\([l, r]×[b,t]×[f, n]\)</span>映射到标准立方体<span class="math inline">\([-1,1]^3\)</span>上</p><ol type="1"><li>首先，通过<strong>平移</strong>操作，将立方体的中心移到原点</li><li>然后，通过<strong>缩放</strong>操作，将立方体缩放为标准立方体</li><li>立方体的定义：X轴<spanclass="math inline">\([l,r]\)</span>；Y轴<spanclass="math inline">\([b,t]\)</span>；Z轴<spanclass="math inline">\([f,n]\)</span></li><li>变换之后，物体一定会有拉伸</li></ol><p><img src="/images/AssetMarkdown/image-20220812170410007.png" alt="image-20220812170410007" style="zoom:80%;" /></p></li><li><p>变换矩阵：先平移到原点，再将<spanclass="math inline">\(x,y,z\)</span>缩放到<spanclass="math inline">\(2\)</span></p><p>$$ M_{ortho}= (</p><span class="math display">\[\begin{matrix}\frac{2}{r-l} &amp; 0              &amp; 0             &amp; 0 \\0              &amp; \frac{2}{t-b} &amp; 0             &amp; 0 \\0              &amp; 0             &amp; \frac{2}{n-f} &amp; 0 \\0              &amp; 0             &amp; 0             &amp; 1 \\\end{matrix}\]</span><p>)</p><p>(</p><span class="math display">\[\begin{matrix}1 &amp; 0 &amp; 0 &amp; -\frac{r+l}{2} \\0 &amp; 1 &amp; 0 &amp; -\frac{t+b}{2} \\0 &amp; 0 &amp; 1 &amp; -\frac{n+f}{2} \\0 &amp; 0 &amp; 0 &amp; 1 \\\end{matrix}\]</span><p>)</p><p>= (</p><span class="math display">\[\begin{matrix}\frac{2}{r-l} &amp; 0              &amp; 0             &amp;-\frac{r+l}{r-l} \\0              &amp; \frac{2}{t-b} &amp; 0             &amp;-\frac{t+b}{t-b} \\0              &amp; 0             &amp; \frac{2}{n-f} &amp;-\frac{n+f}{n-f} \\0              &amp; 0             &amp; 0             &amp; 1 \\\end{matrix}\]</span><p>) $$</p></li></ol><h3 id="透视投影">4.3.2 透视投影</h3><blockquote><p><strong>Perspective Projection</strong></p><ol type="1"><li>基础知识：<span class="math inline">\((x,y,z,1)\)</span>与<spanclass="math inline">\((kx,ky,kz,k)\)</span>表示同一个点，因此<spanclass="math inline">\((xz,yz,z^2,z)\)</span>表示的也是这个点</li><li>思想：将透视投影转化为正交投影<spanclass="math inline">\(M_{persp-&gt;ortho}\)</span>，然后再进行正交投影变换<spanclass="math inline">\(M_{ortho}\)</span></li></ol></blockquote><h4 id="如何进行透视投影">4.3.2.1 如何进行透视投影</h4><p><img src="/images/AssetMarkdown/image-20220812171751431.png" alt="image-20220812171751431" style="zoom:80%;" /></p><ol type="1"><li>首先，定义从相机点向外的两个平面<strong>n、f</strong>，<strong>f</strong>平面要比<strong>n</strong>平面大</li><li>此时就相当于<strong>f</strong>平面上的点全部投影到<strong>n</strong>平面上</li><li>透视投影的做法<ol type="1"><li>先将<strong>Frustum</strong>挤成<strong>Cuboid</strong>(<spanclass="math inline">\(n \rightarrow n，f \rightarrowf&#39;\)</span>)，满足如下三个定义：<spanclass="math inline">\(M_{persp-&gt;ortho}\)</span><ol type="1"><li>近平面<span class="math inline">\(n\)</span>永远不变</li><li>远平面<span class="math inline">\(f\)</span>的Z值永远不变</li><li>远平面<span class="math inline">\(f\)</span>的中心点<spanclass="math inline">\((0,0,f)\)</span>永远不变</li></ol></li><li>再进行一次正交投影：<spanclass="math inline">\(M_{ortho}\)</span></li></ol></li></ol><h4 id="计算矩阵m_persp-ortho">4.3.2.2 计算矩阵<spanclass="math inline">\(M_{persp-&gt;ortho}\)</span></h4><ol type="1"><li><p>思路：找到变换后的点<spanclass="math inline">\((x&#39;,y&#39;,z&#39;)\)</span>与原来的点<spanclass="math inline">\((x,y,z)\)</span>的对应关系</p></li><li><p>从YZ平面上看，挤压前后存在相似三角形，从而可得到<spanclass="math inline">\(y&#39;=\frac{n}{z}*y\)</span></p><ol type="1"><li>同理，<span class="math inline">\(x&#39;=\frac{n}{z}*x\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20220812172142284.png" alt="image-20220812172142284" style="zoom:80%;" /></p></li><li><p>齐次坐标表示</p><p><img src="/images/AssetMarkdown/image-20220812172516140.png" alt="image-20220812172516140" style="zoom:80%;" /></p></li><li><p>矩阵表示</p><table><colgroup><col style="width: 11%" /><col style="width: 88%" /></colgroup><thead><tr class="header"><th style="text-align: center;">由3得</th><thstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20220812172528972.png" alt="image-20220812172528972" style="zoom:80%;" /></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><strong>因此</strong></td><tdstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20220812172545755.png" alt="image-20220812172545755" style="zoom:80%;" /></td></tr></tbody></table></li><li><p>对于矩阵的第三行(对于Z值)，有以下性质</p><table><colgroup><col style="width: 100%" /></colgroup><thead><tr class="header"><th style="text-align: center;">在近平面上的点，坐标不变</th></tr></thead><tbody><tr class="odd"><tdstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20220812173013770.png" alt="image-20220812173013770" style="zoom:80%;" /></td></tr><tr class="even"><tdstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20220812173047212.png" alt="image-20220812173047212" style="zoom:80%;" /></td></tr><tr class="odd"><tdstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20220812173249005.png" alt="image-20220812173249005" style="zoom:80%;" /></td></tr></tbody></table><table><colgroup><col style="width: 100%" /></colgroup><thead><tr class="header"><th style="text-align: center;">在远平面上的中心点<spanclass="math inline">\((0,0,f)\)</span>，坐标不变</th></tr></thead><tbody><tr class="odd"><tdstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20220812173205858.png" alt="image-20220812173205858" style="zoom:80%;" /></td></tr></tbody></table><table><colgroup><col style="width: 100%" /></colgroup><thead><tr class="header"><th style="text-align: center;">根据两个等式，可以解出<spanclass="math inline">\(A,B\)</span></th></tr></thead><tbody><tr class="odd"><tdstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20220812173341348.png" alt="image-20220812173341348" style="zoom:80%;" /></td></tr></tbody></table></li><li><p>综上 <span class="math display">\[M_{persp \rightarrow ortho}=\left(\begin{matrix}n &amp; 0 &amp; 0   &amp; 0 \\0 &amp; n &amp; 0   &amp; 0 \\0 &amp; 0 &amp; n+f &amp; -nf \\0 &amp; 0 &amp; 1   &amp; 0 \\\end{matrix}\right)\]</span></p></li><li><p>最后，再进行正交投影：<spanclass="math inline">\(M_{persp}=M_{ortho}M_{persp-&gt;ortho}\)</span></p></li></ol>$$ M_{persp}= (<span class="math display">\[\begin{matrix}\frac{2}{r-l} &amp; 0             &amp; 0             &amp;-\frac{r+l}{r-l} \\0             &amp; \frac{2}{t-b} &amp; 0             &amp;-\frac{t+b}{t-b} \\0             &amp; 0             &amp; \frac{2}{n-f} &amp;-\frac{n+f}{n-f} \\0             &amp; 0             &amp; 0             &amp; 1 \\\end{matrix}\]</span><p>)</p>(<span class="math display">\[\begin{matrix}n &amp; 0 &amp; 0   &amp; 0 \\0 &amp; n &amp; 0   &amp; 0 \\0 &amp; 0 &amp; n+f &amp; -nf \\0 &amp; 0 &amp; 1   &amp; 0 \\\end{matrix}\]</span><p>)</p><p>=</p>(<span class="math display">\[\begin{matrix}\frac{2n}{r-l}  &amp; 0              &amp; -\frac{r+l}{r-l} &amp; 0 \\0               &amp; \frac{2n}{t-b} &amp; -\frac{t+b}{t-b} &amp; 0  \\0               &amp; 0              &amp; \frac{n+f}{n-f}  &amp;-\frac{2nf}{n-f} \\0               &amp; 0              &amp; 1                &amp; 0 \\\end{matrix}\]</span><p>) $$</p><h4 id="对于不在近远平面上的点">4.3.3.3 对于不在近/远平面上的点</h4><p><span class="math display">\[\left(\begin{matrix}n &amp; 0 &amp; 0   &amp; 0 \\0 &amp; n &amp; 0   &amp; 0 \\0 &amp; 0 &amp; n+f &amp; -nf \\0 &amp; 0 &amp; 1   &amp; 0 \\\end{matrix}\right)\left(\begin{matrix}x \\y \\z \\1 \\\end{matrix}\right)=\left(\begin{matrix}nx \\ny \\(n+f)z-nf \\z \\\end{matrix}\right)==&gt;\left(\begin{matrix}\frac{n}{z}x \\\frac{n}{z}y \\(n+f)-\frac{nf}{z} \\1 \\\end{matrix}\right)\]</span></p><ol type="1"><li>近平面上的点<span class="math inline">\((z=n)\)</span><ol type="1"><li><spanclass="math inline">\(z&#39;=(n+f)-\frac{nf}{n}=n\)</span></li><li><span class="math inline">\(z&#39;=z\)</span></li></ol></li><li>远平面上的点<span class="math inline">\((z=f)\)</span><ol type="1"><li><spanclass="math inline">\(z&#39;=(n+f)-\frac{nf}{f}=f\)</span></li><li><span class="math inline">\(z&#39;=z\)</span></li></ol></li><li>不在近/远平面上的点<spanclass="math inline">\((f&lt;z&lt;n)\)</span><ol type="1"><li><span class="math inline">\(z&#39;=(n+f)-\frac{nf}{z}\)</span><ol type="1"><li>设<span class="math inline">\(n=1,f=-1,z=0.5\)</span>，则<spanclass="math inline">\(z&#39;=2\)</span></li><li>设<span class="math inline">\(n=1,f=-1,z=-0.5\)</span>，则<spanclass="math inline">\(z&#39;=-2\)</span></li></ol></li><li>可得：若<span class="math inline">\(z&lt;0\)</span>，则<spanclass="math inline">\(z&#39;\)</span>更靠近<strong>远平面<spanclass="math inline">\(f\)</span></strong>；若<spanclass="math inline">\(z&gt;0\)</span>，则<spanclass="math inline">\(z&#39;\)</span>更靠近<strong>近平面<spanclass="math inline">\(n\)</span></strong></li></ol></li></ol><h4 id="定义视锥">4.3.3.4 定义视锥</h4><blockquote><p>定义一个视锥，需要</p><ol type="1"><li>宽高比：<strong>Aspect ratio</strong></li><li>垂直的可视角度：<strong>Vertical Field of View</strong></li></ol></blockquote><p><img src="/images/AssetMarkdown/image-20220813112938428.png" alt="image-20220813112938428" style="zoom:80%;" /></p><ol type="1"><li><p><strong>Aspect ratio 纵横比</strong>：<spanclass="math inline">\(\frac{width}{height}\)</span></p></li><li><p><strong>field-of-view(fovY)视野</strong>：从摄像机所在位置出发，连接屏幕宽的两个中点，两条线所夹的角度</p></li><li><p>从<strong>fovY</strong>和<strong>Aspect</strong>推出<strong>l, r,b, t</strong></p><p><img src="/images/AssetMarkdown/image-20220813113243520.png" alt="image-20220813113243520" style="zoom:80%;" /></p></li></ol><h1 id="第05课-光栅化1三角形">第05课 光栅化1：三角形</h1><blockquote><p>规范立方体 =&gt; 屏幕：<strong>Canonical Cube to Screen</strong></p></blockquote><h2 id="屏幕的定义">5.1 屏幕的定义</h2><ol type="1"><li><p>像素点形成的二维数组</p><ol type="1"><li>数组的大小：分辨率<strong>Resolution</strong></li></ol></li><li><p>屏幕是一个典型的光栅成像设备：<strong>Raster Display</strong></p><ol type="1"><li>在德语中，raster == screen</li><li>rasterize == drawing onto the screen</li></ol></li><li><p>像素<strong>Pixel</strong>：FYL，picture element的缩写</p><ol type="1"><li>在本节课中，一个像素就是一个小的立方体，有着一个固定的颜色</li><li>颜色是红、绿、蓝的组合</li></ol></li><li><p>屏幕空间<strong>Screen Space</strong></p><p><img src="/images/AssetMarkdown/image-20220813114126068.png" alt="image-20220813114126068" style="zoom:67%;" /></p></li><li><p>像素的坐标</p><ol type="1"><li>由一个整数坐标<strong>(x,y)</strong>表示，范围为<strong>(0,0) ~(width-1, height-1)</strong></li><li>像素的中心在<strong>(x+0.5, y+0.5)</strong></li><li>屏幕的范围为<strong>(0, 0) ~ (width, height)</strong></li></ol></li></ol><h2 id="视口变换-113-rightarrow-0width0height">5.2 视口变换：<spanclass="math inline">\([-1,1]^3 \rightarrow[0,width]×[0,height]\)</span></h2><blockquote><p><strong>Viewport Transform</strong>，思想：</p><ol type="1"><li>忽略Z</li><li>变换XY坐标：<span class="math inline">\([-1,1]^2 \rightarrow[0,width]×[0,height]\)</span></li></ol><p>此时，三维空间中的多种物体，已经变成了二维空间上的多个多边形</p></blockquote><p><span class="math display">\[M_{viewport}=\left(\begin{matrix}\frac{width}{2} &amp; 0                 &amp; 0 &amp; \frac{width}{2} \\0               &amp; \frac{height}{2}  &amp; 0 &amp; \frac{height}{2}\\0               &amp; 0                 &amp; 1 &amp; 0 \\0               &amp; 0                 &amp; 0 &amp; 1\end{matrix}\right)\]</span></p><h2 id="现代显示原理">5.3 现代显示原理</h2><ol type="1"><li><p>帧缓冲<strong>FrameBuffer</strong>：将内存中的一块区域映射到屏幕上，内存中的数据即为要显示的数据</p></li><li><p>液晶显示器<strong>LCD</strong>：Liquid Crystal Display，通过液晶将光翻转</p><p><img src="/images/AssetMarkdown/image-20230226081745766.png" alt="image-20230226081745766" style="zoom:80%;" /></p></li><li><p>发光二极管阵列LED：</p><p><img src="/images/AssetMarkdown/image-20230226081945181.png" alt="image-20230226081945181" style="zoom:80%;" /></p></li><li><p>电子墨水屏：通过通电，控制每个像素的黑色/白色</p><p><img src="/images/AssetMarkdown/image-20230226082024437.png" alt="image-20230226082024437" style="zoom:80%;" /></p></li></ol><h2 id="三角形的性质">5.4 三角形的性质</h2><ol type="1"><li>最基础的多边形，任何多边形都可以拆分成多个三角形</li><li>三角形三个顶点一定共面</li><li>可以很好的定义内部外部</li><li>定义三个顶点的属性后，可以轻易定义三角形内部的每个点的属性插值：重心插值</li></ol><h2 id="光栅化三角形-像素">5.5 光栅化：三角形 =&gt; 像素</h2><p><img src="/images/AssetMarkdown/image-20220813121135954.png" alt="image-20220813121135954" style="zoom: 67%;" /></p><h3 id="采样法-确定像素颜色">5.5.1 采样法 确定像素颜色</h3><blockquote><p><strong>Sampling</strong>：对于每一个采样点，查询函数的值</p></blockquote><ol type="1"><li><p>也就是函数离散化的过程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>; x &lt; xmax; x++)</span><br><span class="line">    output[x] = <span class="built_in">f</span>(x);</span><br></pre></td></tr></table></figure></li><li><p>定义一个函数：<strong>inside(t, x, y)</strong> <spanclass="math display">\[inside(t,x,y)=\left\{\begin{matrix}1 &amp; (x,y)在三角形t内\\0 &amp; (x,y)不在三角形t内\end{matrix}\right.\]</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>; x &lt; xmax; x++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">0</span>; y &lt; ymax; y++)</span><br><span class="line">        image[x][y] = <span class="built_in">inside</span>(tri, x+<span class="number">0.5</span>, y+<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/AssetMarkdown/image-20220813121848377.png" alt="image-20220813121848377" style="zoom: 67%;" /></p></li><li><p><strong>inside(t, x,y)</strong>函数的实现方法：<strong>叉乘</strong></p><ol type="1"><li><p>已知点与三角形共面，如何判断一个点是否在三角形内</p></li><li><p>按照<spanclass="math inline">\(P_0,P_1,P_2\)</span>的顺序进行叉乘<spanclass="math inline">\(\vec{P_0P_1}×\vec{P_0Q}、\vec{P_1P_2}×\vec{P_1Q}、\vec{P_2P_0}×\vec{P_2Q}\)</span>，三者的<spanclass="math inline">\(Z\)</span>的正负性相同则说明<spanclass="math inline">\(Q\)</span>在三角形内</p><p><img src="/images/AssetMarkdown/image-20220813122230668.png" alt="image-20220813122230668" style="zoom: 50%;" /></p></li><li><p>边界情况：可以不做处理 or 特殊处理，在本课中，均不做处理</p></li></ol><p><img src="/images/AssetMarkdown/image-20220813122354867.png" alt="image-20220813122354867" style="zoom: 50%;" /></p></li></ol><h3 id="三角形的包围盒">5.5.2 三角形的包围盒</h3><ol type="1"><li><p>三角形的包围盒<strong>BoundingBox</strong>：只需要考虑包围盒内的像素</p><ol type="1"><li><p>这里是轴向的<strong>AABB</strong>包围盒，因为只有XY平面的</p><p><img src="/images/AssetMarkdown/image-20220813122501707.png" alt="image-20220813122501707" style="zoom:50%;" /></p></li></ol></li><li><p>也可以对每行计算 最左像素 和 最右像素</p><p><img src="/images/AssetMarkdown/image-20220813122658221.png" alt="image-20220813122658221" style="zoom:50%;" /></p></li></ol><h1 id="第06课-光栅化2反走样深度缓冲">第06课光栅化2：反走样&amp;深度缓冲</h1><blockquote><p><strong>Antialiasing and Z-Buffering</strong></p></blockquote><ol type="1"><li><p><strong>Artifacts</strong>：瑕疵，指一切看上去不太对的地方</p></li><li><p>采样可能产生的瑕疵：</p><ol type="1"><li><p>锯齿</p><p><img src="/images/AssetMarkdown/image-20230226185128331.png" alt="image-20230226185128331" style="zoom: 50%;" /></p></li><li><p>摩尔纹：将左图的奇数行和奇数列删除，会产生右面的效果</p><p><img src="/images/AssetMarkdown/image-20230226185149464.png" alt="image-20230226185149464" style="zoom:80%;" /></p></li></ol></li><li><p>车轮效应：车轮高速逆时针旋转时，看上去好像是在顺时针旋转</p></li></ol><table><thead><tr class="header"><th style="text-align: center;">现象</th><th style="text-align: center;">原因</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">锯齿 Jaggies</td><td style="text-align: center;">在空间上的采样率不足</td></tr><tr class="even"><td style="text-align: center;">摩尔纹 Moire</td><td style="text-align: center;">对一个图像降低采样率</td></tr><tr class="odd"><td style="text-align: center;">车轮效应 Wagon wheel effect</td><td style="text-align: center;">在时间上的采样率不足</td></tr></tbody></table><h2 id="反走样方法在采样之前进行过滤模糊处理">6.1反走样方法：在采样之前进行过滤/模糊处理</h2><p><img src="/images/AssetMarkdown/image-20230226185816066.png" alt="image-20230226185816066" style="zoom:80%;" /></p><h3 id="先滤波后采样aliasing">6.1.1 先滤波，后采样：Aliasing</h3><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th style="text-align: center;">原始图片</th><th style="text-align: center;">点采样</th><th style="text-align: center;">模糊处理抗锯齿</th></tr></thead><tbody><tr class="odd"><tdstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20230226185933649.png" alt="image-20230226185933649" style="zoom:80%;" /></td><tdstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20230226185944079.png" alt="image-20230226185944079" style="zoom:80%;" /></td><tdstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20230226185951932.png" alt="image-20230226185951932" style="zoom:80%;" /></td></tr></tbody></table><h3 id="先采样后滤波blurred-aliasing">6.1.2 先采样，后滤波：BlurredAliasing</h3><p><img src="/images/AssetMarkdown/image-20230226190155171.png" alt="image-20230226190155171" style="zoom:80%;" /></p><h2 id="频率域">6.2 频率域</h2><h3 id="空间域-与-频率域的转换傅里叶变换">6.2.1 空间域 与频率域的转换：傅里叶变换</h3><p><img src="/images/AssetMarkdown/image-20230226191158596.png" alt="image-20230226191158596" style="zoom:80%;" /></p><ol type="1"><li>任何一个函数，均可以展开为多个三角函数的和</li><li>傅里叶变换，实际上就是将函数在不同频率域上展开</li></ol><h3 id="函数的频率越高需要的采样频率越高">6.2.2函数的频率越高，需要的采样频率越高</h3><p><img src="/images/AssetMarkdown/image-20230226191506715.png" alt="image-20230226191506715" style="zoom:80%;" /></p><h3 id="从频率角度理解走样">6.2.3 从频率角度理解走样</h3><p><img src="/images/AssetMarkdown/image-20230226191902811.png" alt="image-20230226191902811" style="zoom:80%;" /></p><ol type="1"><li>在采样频率一定时，采样两个频率不同的函数，我们无法区分这两个函数，因此会产生锯齿</li></ol><h2 id="滤波删除一些频率的内容">6.3 滤波：删除一些频率的内容</h2><h3 id="通过傅里叶变换将图像变为频率图">6.3.1通过傅里叶变换，将图像变为频率图</h3><p><img src="/images/AssetMarkdown/image-20230226192200644.png" alt="image-20230226192200644" style="zoom:80%;" /></p><ol type="1"><li>中心是低频区，四周是高频区</li><li>亮度表示当前频率包含的信息数量</li><li>上图的信息主要集中在低频区</li><li>出现两条线的原因<ol type="1"><li>一般情况下，傅里叶变换会将图像视为周期函数</li><li>对于图片来说，相当于在图像的右边再复制一份图像</li><li>通常情况下，图片的左右边界不会相同，因此在边界处会有剧烈的变换</li><li>分析图像内部的内容时，一般忽略这两条线</li></ol></li></ol><h3 id="高通滤波">6.3.2 高通滤波</h3><blockquote><p><strong>高通滤波 ==&gt; 只保留图像的高频部分 ==&gt;图像内容的边界</strong></p></blockquote><p><img src="/images/AssetMarkdown/image-20230226192757970.png" alt="image-20230226192757970" style="zoom:80%;" /></p><h3 id="低通滤波">6.3.3 低通滤波</h3><blockquote><p><strong>低通滤波 ==&gt; 只保留图像的低频部分 ==&gt;对图像的模糊处理</strong></p></blockquote><p><img src="/images/AssetMarkdown/image-20230226192911384.png" alt="image-20230226192911384" style="zoom:80%;" /></p><h3 id="过滤高频和低频部分">6.3.4 过滤高频和低频部分</h3><p><img src="/images/AssetMarkdown/image-20230226193200309.png" alt="image-20230226193200309" style="zoom:80%;" /></p><h2 id="滤波-平均-卷积">6.4 滤波 = 平均 = 卷积</h2><blockquote><p><strong>Filter = Averaging = Convolution</strong></p><ol type="1"><li>滤波器覆盖信号的某些部分时，将对应位做点乘：卷积操作</li><li>实际上也是一个平均操作</li></ol></blockquote><p><img src="/images/AssetMarkdown/image-20230226193458236.png" alt="image-20230226193458236" style="zoom:80%;" /></p><h3 id="卷积定理时域的卷积-频域的乘积">6.4.1 卷积定理：时域的卷积&lt;=&gt; 频域的乘积</h3><p><strong>卷积定理</strong>：在时域上的卷积，等价于在频域上的乘积，即以下两个操作等价</p><ol type="1"><li>在时域上，通过卷积进行滤波</li><li>先通过傅里叶变换，将函数与滤波器转换到频域上；然后把两者相乘；最后再进行逆傅里叶变换，变换到时域上</li></ol><p><img src="/images/AssetMarkdown/image-20230226194122537.png" alt="image-20230226194122537" style="zoom:80%;" /></p><h3 id="滤波器的时域与频域的关系">6.4.2 滤波器的时域与频域的关系</h3><blockquote><p>时域上变大了，频域上反而变低了：Box越大，得出的结果越模糊</p></blockquote><p><img src="/images/AssetMarkdown/image-20230226194605360.png" alt="image-20230226194605360" style="zoom:67%;" /></p><p><img src="/images/AssetMarkdown/image-20230226194506188.png" alt="image-20230226194506188" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230226194514473.png" alt="image-20230226194514473" style="zoom:80%;" /></p><h2 id="频率角度理解采样">6.5 频率角度理解采样</h2><h3 id="采样-重复原始信号的频谱">6.5.1 采样 = 重复原始信号的频谱</h3><blockquote><p>采样频率越快，频谱复制越稀疏</p><p>采样频率越满，频谱复制越密集</p></blockquote><table><colgroup><col style="width: 50%" /><col style="width: 50%" /></colgroup><thead><tr class="header"><th style="text-align: center;">时域上采样 &lt;=&gt; 两个函数相乘</th><th style="text-align: center;">频域上的卷积 &lt;=&gt;重复原始信号的频谱</th></tr></thead><tbody><tr class="odd"><tdstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20230226194857621.png" alt="image-20230226194857621" style="zoom:80%;" /></td><tdstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20230226194911883.png" alt="image-20230226194911883" style="zoom:80%;" /></td></tr></tbody></table><h3 id="走样-频谱的内容出现重叠">6.5.2 走样 = 频谱的内容出现重叠</h3><p><img src="/images/AssetMarkdown/image-20230226195426029.png" alt="image-20230226195426029" style="zoom:80%;" /></p><h3 id="反走样-先删除高频信息在采样">6.5.3 反走样 =先删除高频信息，在采样</h3><ol type="1"><li>先模糊，后采样：先删除一个信号的高频信息，然后在进行采样</li></ol><p><img src="/images/AssetMarkdown/image-20230226195656888.png" alt="image-20230226195656888" style="zoom:80%;" /></p><h2 id="反走样的实际做法">6.6 反走样的实际做法</h2><ol type="1"><li>对每个像素，根据三角形覆盖的面积，做平均值</li><li>然后再进行采样</li></ol><p><img src="/images/AssetMarkdown/image-20230226200044458.png" alt="image-20230226200044458" style="zoom:80%;" /></p><h3 id="msaamultisample-antialiasing">6.6.1 MSAA：MultisampleAntialiasing</h3><ol type="1"><li><strong>超采样SuperSampling</strong>：将每个像素划分为多个小的采样点，然后该像素的颜色为多个采样点的平均</li><li>MSAA近似的是抗锯齿的第一步操作，即<strong>模糊处理</strong></li><li>MSAA无法提高屏幕的分辨率，只是通过多个采样点得到近似的三角形覆盖</li><li>MSAA是通过增大计算量，得到抗锯齿效果</li><li>在实际使用中，会将采样点按特殊的方法排列，有些采样点还会被多个像素复用</li></ol><blockquote><p><img src="/images/AssetMarkdown/image-20230226201008321.png" alt="image-20230226201008321" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230226201027928.png" alt="image-20230226201027928" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230226201036128.png" alt="image-20230226201036128" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230226201053512.png" alt="image-20230226201053512" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230226201100860.png" alt="image-20230226201100860" style="zoom:80%;" /></p></blockquote><h3 id="fxaafast-approximate-antialiasing">6.6.2 FXAA：Fast ApproximateAntialiasing</h3><ol type="1"><li>快速近似抗锯齿</li><li>通过图像的后期处理，先将有锯齿的图像得出来，然后通过图像匹配找到边界，将这些像素换为边界上的颜色</li></ol><h3 id="taatemporal-antialiasing">6.6.3 TAA：Temporal Antialiasing</h3><ol type="1"><li>通过找上一帧的信息，进行抗锯齿操作</li><li>假设是静止画面，在相邻两帧同一个像素用不同的点感知是否在一个三角形内</li><li>复用上一帧感知到的值，相当于将MSAA的采样点分布在时间上，对于具体的某一帧没有额外操作</li></ol><h2 id="超分辨率超采样">6.7 超分辨率/超采样</h2><ol type="1"><li>采样率不够，而分辨率较大时，会使用这种技术</li><li>DLSS：Deep Learning SuperSampling，通过深度学习，猜测丢失的信息</li></ol><h2 id="深度缓冲解决可见性">6.8 深度缓冲：解决可见性</h2><p><img src="/images/AssetMarkdown/image-20230316201036427.png" alt="image-20230316201036427" style="zoom:80%;" /></p><ol type="1"><li>Z-Buffer：存储<strong>每一个像素</strong>，所看到的几何物体的最浅距离<ol type="1"><li>设Z始终为整数，且Z越小离相机越近</li></ol></li><li>具体算法：<ol type="1"><li>初始化深度缓存为<code>∞</code></li><li>对于每一个三角形<code>T</code><ol type="1"><li>对于<code>T</code>中的每一个采样点<code>(x,y,z)</code>：</li><li>如果<code>Z &lt; z-buffer[x,y]</code>：更新<code>frame-buffer、z-buffer</code></li><li>否则，跳过该采样点</li></ol></li></ol></li><li>复杂度<ol type="1"><li>有<code>n</code>个三角形，则复杂度为<code>O(n)</code></li><li>此处并没有排序，而是对每一个像素，维护了一个最小值</li></ol></li><li>画出来的结果，与画三角形的顺序无关</li><li><strong>深度缓存无法处理透明物体</strong></li></ol><h1 id="第07课-着色1blinn-phong反射模型">第07课着色1：Blinn-Phong反射模型</h1><blockquote><p><strong>Shading</strong>：着色</p><ol type="1"><li>对不同物体，定义不同材质，从而与光线产生不同作用</li></ol><p>局部性：</p><ol type="1"><li>只考虑自己的属性，不考虑与其他物体的存在</li><li>因此，没有阴影</li></ol></blockquote><figure><img src="/images/AssetMarkdown/image-20230316203039767.png"alt="image-20230316203039767" /><figcaption aria-hidden="true">image-20230316203039767</figcaption></figure><h2 id="反射模型的输入">7.1 反射模型的输入</h2><p><img src="/images/AssetMarkdown/image-20230316203536809.png" alt="image-20230316203536809" style="zoom:80%;" /></p><h2 id="光照的能量传递关系">7.2 光照的能量传递关系</h2><ol type="1"><li><p>余弦定理：单位面积接收到的光的能量占比为<code>cos θ</code>，<code>θ</code>为光照方向与平面法线的夹角</p><p><img src="/images/AssetMarkdown/image-20230316204159302.png" alt="image-20230316204159302" style="zoom:80%;" /></p></li><li><p>设光源的能量为<code>I</code>，光源与表面的距离为<code>r</code>，则到达表面的能量为<spanclass="math inline">\(\frac{I}{r^2}\)</span></p><p><img src="/images/AssetMarkdown/image-20230316204518794.png" alt="image-20230316204518794" style="zoom:80%;" /></p></li></ol><h2 id="漫反射-diffuse-reflection">7.3 漫反射 Diffuse Reflection</h2><p><span class="math display">\[L_d=k_d\frac{I}{r^2}max(0,\vec{n}·\vec{l})\]</span></p><ol type="1"><li><span class="math inline">\(L_d\)</span>：漫反射光照</li><li><spanclass="math inline">\(k_d\)</span>：漫反射系数，通常为物体的颜色</li><li><span class="math inline">\(I/r^2\)</span>：到达该点的能量</li><li><spanclass="math inline">\(max(0,\vec{n}·\vec{l})\)</span>：该点接收到的能量</li><li>由于漫反射到四面八方的能量均相同，因此没有<spanclass="math inline">\(\vec{v}\)</span>的事情</li></ol><p><img src="/images/AssetMarkdown/image-20230316204556352.png" alt="image-20230316204556352" style="zoom:80%;" /></p><h2 id="镜面反射高光项-specular-reflection">7.4 镜面反射&amp;高光项Specular Reflection</h2><blockquote><p>接近镜面反射时，会出现高光</p></blockquote><p><span class="math display">\[L_s=k_s\frac{I}{r^2}max(0,\vec{n}·\vec{h})^p\]</span></p><ol type="1"><li><span class="math inline">\(L_s\)</span>：镜面反射光照</li><li><spanclass="math inline">\(k_s\)</span>：镜面反射系数，通常为白色</li><li><span class="math inline">\(I/r^2\)</span>：到达该点的能量</li><li><spanclass="math inline">\(max(0,\vec{n}·\vec{l})\)</span>：该点接收到的能量</li><li><spanclass="math inline">\(p\)</span>：为了让高光的区域足够小，需要将夹角余弦进行幂操作</li></ol><p><img src="/images/AssetMarkdown/image-20230316205631263.png" alt="image-20230316205631263" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230316220333380.png" alt="image-20230316220333380" style="zoom:80%;" /></p><h2 id="环境光-ambient-term">7.5 环境光 Ambient Term</h2><blockquote><p>假设所有点接收到的环境光均相同</p></blockquote><p><span class="math display">\[L_a=k_aI_a\]</span></p><ol type="1"><li><span class="math inline">\(L_a\)</span>：环境光</li><li><spanclass="math inline">\(k_a\)</span>：环境光系数，通常为物体颜色</li><li>环境光通常为一个常量，保证没有地方是黑的</li></ol><p><img src="/images/AssetMarkdown/image-20230316220425251.png" alt="image-20230316220425251" style="zoom:80%;" /></p><h2 id="blinn-phong反射模型">7.6 Blinn-Phong反射模型</h2><p><span class="math display">\[\begin{aligned}L &amp;= L_a+L_d+L_s\\  &amp;= k_aI_a+k_d\frac{I}{r^2}max(0,n·l)+k_s\frac{I}{r^2}max(0,n·h)^p\end{aligned}\]</span></p><p><img src="/images/AssetMarkdown/image-20230316220636330.png" alt="image-20230316220636330" style="zoom:80%;" /></p><h1 id="第08课-着色2着色频率实时渲染管线">第08课着色2：着色频率&amp;实时渲染管线</h1><h2 id="着色频率">8.1 着色频率</h2><p><img src="/images/AssetMarkdown/image-20230316221140250.png" alt="image-20230316221140250" style="zoom:80%;" /></p><ol type="1"><li>着色频率即为：将结果应用到哪些平面上<ol type="1"><li>左1：应用到每个三角面上，<strong>Flat Shading</strong></li><li>左2：应用到每个顶点上，<strong>Gouraud Shading</strong></li><li>左3：应用到每个像素上，<strong>Phong Shading</strong></li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230316221604284.png" alt="image-20230316221604284" style="zoom:80%;" /></p><h3 id="计算顶点法线">8.1.1 计算顶点法线</h3><blockquote><p>将与该顶点相关的所有面的法线，做加权平均，权重为三角形面积</p></blockquote><p><span class="math display">\[N_v=\frac{\sum_i N_i}{|\sum_i N_i|}\]</span></p><p><img src="/images/AssetMarkdown/image-20230316221815730.png" alt="image-20230316221815730" style="zoom:80%;" /></p><h3 id="计算像素法线">8.1.2 计算像素法线</h3><blockquote><p>使用重心坐标，对相邻两个顶点的法线进行插值</p></blockquote><p><img src="/images/AssetMarkdown/image-20230316222038138.png" alt="image-20230316222038138" style="zoom:80%;" /></p><h2 id="实时渲染管线">8.2 实时渲染管线</h2><ol type="1"><li>输入：3维空间中的若干个点</li><li><strong>Vertex Processing</strong>：将3维空间的点，投影到屏幕空间上<ol type="1"><li>Model, View Projection变换</li><li>着色、纹理映射</li></ol></li><li><strong>Triangle Processing</strong>：形成屏幕空间上的三角形</li><li><strong>Rasterization</strong>：通过光栅化，将三角形绘制到屏幕上<ol type="1"><li>对三角形是否覆盖进行采样</li></ol></li><li><strong>Fragment Processing</strong>：对像素进行着色<ol type="1"><li>Z-Buffer</li><li>着色、纹理映射</li></ol></li><li><strong>Framebuffer Opreations</strong>：将三角形拼装成图像</li></ol><p><img src="/images/AssetMarkdown/image-20230316222331676.png" alt="image-20230316222331676" style="zoom:80%;" /></p><h2 id="shader程序">8.3 Shader程序</h2><ol type="1"><li>对每一个顶点/像素，Shader均会执行一次</li><li>顶点着色器：对顶点操作</li><li>片段着色器、像素着色器：对像素操作，确定当前像素是什么颜色</li></ol><h2 id="gpu">8.4 GPU</h2><ol type="1"><li>是整个图形管线的硬件实现：如光栅化、投影</li><li>有一部分是可编程的：即着色器</li><li>GPGPU：通用GPU计算，可以完成各种各样的GPU计算</li><li>是一个高度并行化的多核处理器</li></ol><p><img src="/images/AssetMarkdown/image-20230316225348436.png" alt="image-20230316225348436" style="zoom:80%;" /></p><h2 id="纹理映射">8.5 纹理映射</h2><ol type="1"><li><p>根本作用：定义3维物体上任何一个点的属性</p></li><li><p><strong>纹理</strong>：任何一个3维物体的表面都是2维的，因此可以和一张图有一个一一对应的关系，这张图即为纹理</p><ol type="1"><li>将3维物体上的每一个三角形的顶点，映射到纹理图像上<ol type="1"><li>由美工完成</li><li>自动化：参数化模型</li></ol></li></ol></li><li><p>UV坐标系：即纹理坐标的坐标系，通常范围为[0~1] × [0~1]</p><p><img src="/images/AssetMarkdown/image-20230316230121429.png" alt="image-20230316230121429" style="zoom:80%;" /></p></li><li><p>不同的位置可以映射到同一个位置上</p><p><img src="/images/AssetMarkdown/image-20230316230208252.png" alt="image-20230316230208252" style="zoom:80%;" /></p></li><li><p>好的纹理：纹理的上下左右可以无缝衔接，称为<strong>tiledtextures</strong></p><p><img src="/images/AssetMarkdown/image-20230316230252605.png" alt="image-20230316230252605" style="zoom:80%;" /></p></li></ol><h1 id="第09课-着色3纹理的应用">第09课 着色3：纹理的应用</h1><h2 id="重心坐标-barycentric-coordinates">9.1 重心坐标 BarycentricCoordinates</h2><p>为什么需要插值</p><ol type="1"><li>我们的很多操作是定义在<strong>顶点</strong>上的</li><li>我们需要在<strong>三角形</strong>内获得平滑的值</li></ol><p>插值什么内容</p><ol type="1"><li>纹理坐标、颜色、法线</li></ol><p>怎么做插值</p><ol type="1"><li>重心坐标</li></ol><h3 id="重心坐标是什么">9.1.1 重心坐标是什么</h3><p><img src="/images/AssetMarkdown/image-20230320181655673.png" alt="image-20230320181655673" style="zoom:80%;" /></p><ol type="1"><li><p>定义在三角形上：三角形<strong>所在平面</strong>的任意一个点的坐标，都可以用三个顶点坐标的线性组合表示，且<spanclass="math inline">\(\alpha+\beta+\gamma=1\)</span></p><ol type="1"><li><span class="math inline">\((x,y)=\alpha A+ \beta B + \gammaC\)</span>，可以得到一个坐标<spanclass="math inline">\((\alpha,\beta,\gamma)\)</span></li><li>如果在<strong>三角形内</strong>，则<spanclass="math inline">\(\alpha,\beta,\gamma\)</span>均为<strong>非负</strong>的</li></ol></li><li><p>求<spanclass="math inline">\(\alpha,\beta,\gamma\)</span>：通过面积计算</p><p><img src="/images/AssetMarkdown/image-20230320182149277.png" alt="image-20230320182149277" style="zoom:80%;" /></p></li><li><p>三角形的<strong>重心</strong>：分成的三个三角形面积相等</p><p><img src="/images/AssetMarkdown/image-20230320182314078.png" alt="image-20230320182314078" style="zoom:80%;" /></p></li><li><p>使用公式计算：</p><p><img src="/images/AssetMarkdown/image-20230320182412696.png" alt="image-20230320182412696" style="zoom:80%;" /></p></li></ol><h3 id="重心坐标插值">9.1.2 重心坐标插值</h3><p><strong>注意：投影后，重心坐标可能会改变，因此插值三维属性，应该使用三维坐标</strong></p><p><img src="/images/AssetMarkdown/image-20230320182502273.png" alt="image-20230320182502273" style="zoom:80%;" /></p><h2 id="纹理的基础应用">9.2 纹理的基础应用</h2><h3 id="简单纹理映射漫反射颜色">9.2.1 简单纹理映射：漫反射颜色</h3><p>对每一个屏幕中的采样点<spanclass="math inline">\((x,y)\)</span>：</p><ol type="1"><li>通过重心坐标插值，计算<spanclass="math inline">\((x,y)\)</span>对应的纹理坐标<spanclass="math inline">\((u,v)\)</span></li><li>得到纹理中，<spanclass="math inline">\((u,v)\)</span>所在点的颜色，记为<code>texcolor = texture.sample(u,v)</code></li><li>将该采样点的颜色，设置为<code>texcolor</code></li></ol><h3 id="纹理放大双线性插值-bilinear-interpolation">9.2.2纹理放大：双线性插值 Bilinear interpolation</h3><blockquote><p>像素<strong>pixel</strong> &lt;=&gt;纹理元素<strong>texel</strong>，纹理需要放大时，多个pixel会对应到同一个texel上</p></blockquote><blockquote><p>纹理过小：失真</p><p><img src="/images/AssetMarkdown/image-20230320184241753.png" alt="image-20230320184241753" style="zoom:80%;" /></p></blockquote><ol type="1"><li>找到临近的四个点</li><li>计算水平距离<code>s</code>和垂直距离<code>t</code>，均为<code>[0,1]</code>之间的值</li><li>定义线性插值操作：<spanclass="math inline">\(lerp(x,v_0,v_1)=v_0+x(v_1-v_0)\)</span>，<spanclass="math inline">\(x\)</span>为<code>[0,1]</code>之间的值</li><li>进行<strong>两次线性插值</strong>操作：<ol type="1"><li>水平方向：<spanclass="math inline">\(u_0=lerp(s,u_{00},u_{10}),u_1=lerp(s,u_{01},u_{11})\)</span></li><li>垂直方向：<spanclass="math inline">\(f(x,y)=lerp(t,u_0,u_1)\)</span></li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230320183957812.png" alt="image-20230320183957812" style="zoom:80%;" /></p><h3 id="纹理缩小">9.2.3 纹理缩小</h3><blockquote><p>纹理过大：远处摩尔纹，近处锯齿</p><ol type="1"><li>远处，一个像素覆盖了纹理上的很大一块区域，因此会存在走样</li></ol><p><img src="/images/AssetMarkdown/image-20230320184320810.png" alt="image-20230320184320810" style="zoom:80%;" /></p></blockquote><h4 id="mipmap">9.2.3.1 Mipmap</h4><p><strong>Mipmap</strong>：允许做<strong>快速、近似、正方形</strong>的范围查询</p><ol type="1"><li><p>每一层均将上一层缩小到原来的一半</p><ol type="1"><li>预处理纹理</li><li>多了1/3的存储量</li></ol><p><img src="/images/AssetMarkdown/image-20230320185053505.png" alt="image-20230320185053505" style="zoom:80%;" /></p></li><li><p>计算某个像素对应到纹理的正方形区域</p><ol type="1"><li>将屏幕上的某个像素点<code>p1</code>及其两个邻居<code>p2,p3</code>对应到纹理上的三个点<code>t1,t2,t3</code></li><li>在屏幕上，<code>p1</code>与<code>p2</code>的距离为<code>1</code>，<code>p1</code>与<code>p3</code>的距离为<code>1</code></li><li>在纹理中，<code>t1</code>与<code>t2</code>的距离为<code>L1</code>，<code>t1</code>与<code>t2</code>的距离为<code>L2</code></li><li>取<code>L=max(L1,L2)</code>，则该像素在纹理空间上对应的正方形区域为，以<code>t1</code>为中心的<code>L×L</code>的区域</li></ol><p><img src="/images/AssetMarkdown/image-20230320185714401.png" alt="image-20230320185714401" style="zoom:80%;" /></p></li><li><p>计算正方形区域的平均值</p><ol type="1"><li>假设正方形为<code>1×1</code>，则可以直接在<code>0</code>层中获得该区域的平均值</li><li>假设正方形为<code>4×4</code>，则可以直接在<code>1</code>层中获得该区域的平均值</li><li>因此，我们可以在第<spanclass="math inline">\(D=log_2L\)</span>层中获取该区域的平均值</li><li>如果<spanclass="math inline">\(log_2L\)</span>不是整数，则可以通过<strong>线性插值</strong>，获得该区域的平均值</li><li>每一层的查询，使用了一次<strong>双线性插值</strong>，最后又进行了一次<strong>线性插值</strong>，因此称为<strong>三线性插值</strong></li></ol><p><img src="/images/AssetMarkdown/image-20230320190152780.png" alt="image-20230320190152780" style="zoom:80%;" /></p></li><li><p>缺点：在远处会完全模糊<strong>overblur</strong></p></li></ol><h4 id="各向异性过滤">9.2.3.2 各向异性过滤</h4><p><strong>AnisotropicFiltering</strong>：各向异性过滤，对矩形的区域快速查询平均值</p><p><img src="/images/AssetMarkdown/image-20230320190538811.png" alt="image-20230320190538811" style="zoom:80%;" /></p><ol type="1"><li>各向异性过滤：水平、竖直压扁，开销为原本的3倍</li><li>EWA过滤：将图像分为一个个的椭圆</li></ol><p><img src="/images/AssetMarkdown/image-20230320190625611.png" alt="image-20230320190625611" style="zoom:80%;" /></p><h2 id="纹理的其他应用">9.3 纹理的其他应用</h2><p>现代GPU中，纹理的本质：是一块内存区域，且可以进行范围查询</p><h3 id="环境贴图-environment-map">9.3.1 环境贴图 Environment Map</h3><ol type="1"><li>环境贴图：即为空间中的某个点，向上下左右前后六个方向，所能接收到的光</li><li>可以通过环境贴图，进行光照计算，进而实现环境光渲染</li><li>基本假设：环境光来自无限远处，只记录环境光的方向信息</li><li>可以使用<strong>Spherical Map</strong>或者<strong>CubeMap</strong>表示</li></ol><p><img src="/images/AssetMarkdown/image-20230320203116579.png" alt="image-20230320203116579" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230320203423125.png" alt="image-20230320203423125" style="zoom:80%;" /></p><blockquote><p>由于立方体的<strong>各个面都是均匀</strong>的，因此能很好的避免天空球的<strong>极点消失</strong>现象</p><ol type="1"><li>天空盒只记录方向信息</li><li>需要先判断某个方向是属于哪一个面上的</li></ol></blockquote><p><img src="/images/AssetMarkdown/image-20230320203303350.png" alt="image-20230320203303350" style="zoom:80%;" /></p><h3 id="凹凸贴图-法线贴图">9.3.2 凹凸贴图 &amp; 法线贴图</h3><ol type="1"><li>凹凸贴图：定义某个点的相对高度(沿法线移动的距离)，从而改变周围像素的法线方向</li><li>法线贴图：定义某个点的法线</li></ol><p><img src="/images/AssetMarkdown/image-20230320203552597.png" alt="image-20230320203552597" style="zoom:80%;" /></p><blockquote><p>计算修改后的法线</p></blockquote><ol type="1"><li><p>一维贴图，修改像素的法线：<strong>flatland</strong></p><ol type="1"><li>设原来的表面法线<code>n(p)=(0, 1)</code></li><li>计算梯度：<code>dp=c*[h(p+1)-h(p)]</code></li><li>则切线为：<code>(1,dp)</code></li><li>因此更改后的法线为：<code>n(p)=(-dp, 1).normalized()</code></li></ol><p><img src="/images/AssetMarkdown/image-20230320203941915.png" alt="image-20230320203941915" style="zoom:80%;" /></p></li><li><p>二维贴图，修改像素的法线：<strong>局部坐标系下</strong></p><ol type="1"><li>设原来的表面法线<code>n(p)=(0, 0, 1)</code></li><li>计算梯度：<code>dp/du=c1*[h(u+1)-h(u)]</code>，<code>dp/dv=c2*[h(v+1)-h(v)]</code></li><li>因此更改后的法线为：<code>n(p)=(-dp/du, -dp/dv ,1).normalized()</code></li></ol></li></ol><h3 id="位移贴图-displacement-mapping">9.3.3 位移贴图 DisplacementMapping</h3><ol type="1"><li>与凹凸贴图类似，但是会直接<strong>更改三角形顶点的位置</strong></li><li>要求原有模型的三角形比较细，要求模型的三角形顶点之间的间隔，比纹理之间的间隔小</li></ol><p><img src="/images/AssetMarkdown/image-20230320204818983.png" alt="image-20230320204818983" style="zoom:80%;" /></p><h3 id="三维纹理">9.3.4 三维纹理</h3><ol type="1"><li>定义一个三维空间的噪声函数，可以得到三维空间中，任意一个点的属性</li></ol><p><img src="/images/AssetMarkdown/image-20230320205137485.png" alt="image-20230320205137485" style="zoom:80%;" /></p><h3 id="保存预处理的数据">9.3.5 保存预处理的数据</h3><p><img src="/images/AssetMarkdown/image-20230320205230388.png" alt="image-20230320205230388" style="zoom:80%;" /></p><h3 id="三维纹理-体积渲染">9.3.6 三维纹理 &amp; 体积渲染</h3><p><img src="/images/AssetMarkdown/image-20230320205313633.png" alt="image-20230320205313633" style="zoom:80%;" /></p><h1 id="第10课-几何1介绍">第10课 几何1：介绍</h1><h2 id="隐式表示-implicit">10.1 隐式表示 Implicit</h2><ol type="1"><li><p><strong>f(x,y,z) =0</strong>：表示一定的关系，并不直接给出实际点</p></li><li><p>优点：便于判断某个<strong>点与面</strong>的关系</p><p><img src="/images/AssetMarkdown/image-20230320210121129.png" alt="image-20230320210121129" style="zoom:80%;" /></p></li><li><p>缺点：无法直接判断出<strong>形状</strong>/找到所有在这个面上的点</p><p><img src="/images/AssetMarkdown/image-20230320210022919.png" alt="image-20230320210022919" style="zoom:80%;" /></p></li></ol><h2 id="显示表示-explicit">10.2 显示表示 Explicit</h2><ol type="1"><li><p>显示表示：直接用三角形表示 / 通过参数映射给出</p><p><img src="/images/AssetMarkdown/image-20230320210219640.png" alt="image-20230320210219640" style="zoom:80%;" /></p></li><li><p>优点：便于<strong>取样</strong>，判断形状</p><p><img src="/images/AssetMarkdown/image-20230320210302100.png" alt="image-20230320210302100" style="zoom:80%;" /></p></li><li><p>缺点：难以判断某个<strong>点和面</strong>的关系</p><p><img src="/images/AssetMarkdown/image-20230320210417478.png" alt="image-20230320210417478" style="zoom:80%;" /></p></li></ol><h2 id="cg中的隐式几何表示">10.3 CG中的隐式几何表示</h2><h3 id="数学公式表述">10.3.1 数学公式表述</h3><p><img src="/images/AssetMarkdown/image-20230320210536832.png" alt="image-20230320210536832" style="zoom:80%;" /></p><h3 id="构造几何csgconstructive-solid-geometry">10.3.2构造几何CSG：Constructive Solid Geometry</h3><p><img src="/images/AssetMarkdown/image-20230320210649720.png" alt="image-20230320210649720" style="zoom:80%;" /></p><h3 id="距离函数-distance-functions">10.3.3 距离函数 DistanceFunctions</h3><ol type="1"><li>描述空间中的任何一个点，到该表面的最近距离<ol type="1"><li>如果在物体外，则为正数</li><li>如果在物体内，则为负数</li><li>SDF：有向距离函数</li></ol></li><li>优点：便于做两个物体的<strong>边界融合</strong></li></ol><p><img src="/images/AssetMarkdown/image-20230320210931112.png" alt="image-20230320210931112" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230320211414373.png" alt="image-20230320211414373" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230320211444830.png" alt="image-20230320211444830" style="zoom:80%;" /></p><h3 id="水平集函数">10.3.4 水平集函数</h3><p><img src="/images/AssetMarkdown/image-20230320211928804.png" alt="image-20230320211928804" style="zoom:80%;" /></p><h3 id="分形-fractal">10.3.5 分形 Fractal</h3><p><strong>分形 &lt;=&gt; 自相似</strong></p><p><img src="/images/AssetMarkdown/image-20230320212054041.png" alt="image-20230320212054041" style="zoom:80%;" /></p><h2 id="cg中的显示几何表示">10.4 CG中的显示几何表示</h2><h3 id="点云">10.4.1 点云</h3><ol type="1"><li>通过特别多的点，表示一个模型</li><li>通常为三维扫描的输出</li></ol><p><img src="/images/AssetMarkdown/image-20230320212656886.png" alt="image-20230320212656886" style="zoom:80%;" /></p><h3 id="多边形面">10.4.2 多边形面</h3><ol type="1"><li>通常为三角形 &amp; 四边形</li></ol><p><img src="/images/AssetMarkdown/image-20230320212736997.png" alt="image-20230320212736997" style="zoom:80%;" /></p><h3 id="the-wavefront-object-file-format">10.4.3 The Wavefront ObjectFile Format</h3><ol type="1"><li><code>v</code>：点的坐标</li><li><code>vt</code>：纹理坐标</li><li><code>vn</code>：法向</li><li><code>f</code>：连接关系，同一行内为三角形的三个点，每个点的格式为<code>v/vt/vn</code>，表示该点的坐标/纹理坐标/法向</li></ol><p><img src="/images/AssetMarkdown/image-20230320212854657.png" alt="image-20230320212854657" style="zoom:80%;" /></p><h1 id="第11课-几何2曲线和曲面">第11课 几何2：曲线和曲面</h1><h2 id="贝塞尔曲线-bezier-curve">11.1 贝塞尔曲线 Bezier Curve</h2><ol type="1"><li>定义四个控制点<code>p0,p1,p2,p3</code>，要求曲线的起始切线方向为<code>p1-p0</code>，终止切线方向为<code>p3-p2</code></li><li>曲线不一定经过控制点</li></ol><p><img src="/images/AssetMarkdown/image-20230320213504658.png" alt="image-20230320213504658" style="zoom:80%;" /></p><h3 id="de-casteljau算法">11.1.1 de Casteljau算法</h3><h4 id="二次贝塞尔曲线三个控制点">11.1.1.1二次贝塞尔曲线：三个控制点</h4><ol type="1"><li><code>b0</code>为起点，<code>b2</code>为终点，<code>b1</code>控制曲线弯曲</li><li>实际上是：对于每一个时间<code>t</code>，找到当前时刻对应的点的坐标<ol type="1"><li>第一步：<ol type="1"><li>在<span class="math inline">\(b_0b_1\)</span>上，设<spanclass="math inline">\(b_0\)</span>为时间<code>0</code>，<spanclass="math inline">\(b_1\)</span>为时间<code>1</code>，线性插值找到<spanclass="math inline">\(b_0^1\)</span></li><li>在<span class="math inline">\(b_1b_2\)</span>上，设<spanclass="math inline">\(b_1\)</span>为时间<code>0</code>，<spanclass="math inline">\(b_2\)</span>为时间<code>1</code>，线性插值找到<spanclass="math inline">\(b_1^1\)</span></li></ol></li><li>第二步：<ol type="1"><li>在<span class="math inline">\(b_0^1b_1^1\)</span>上，设<spanclass="math inline">\(b_0^1\)</span>为时间<code>0</code>，<spanclass="math inline">\(b_1^1\)</span>为时间<code>1</code>，线性插值找到<spanclass="math inline">\(b_0^2\)</span></li></ol></li><li>则<spanclass="math inline">\(b_0^2\)</span>记为贝塞尔曲线，在时间<code>t</code>所在的位置</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230320214216113.png" alt="image-20230320214216113" style="zoom:80%;" /></p><h4 id="四个控制点">11.1.1.2 四个控制点</h4><ol type="1"><li><code>b0</code>为起点，<code>b3</code>为终点，<code>b1,b2</code>控制曲线弯曲</li><li>实际上是：对于每一个时间<code>t</code>，找到当前时刻对应的点的坐标<ol type="1"><li>第一步：<ol type="1"><li>在<span class="math inline">\(b_0b_1\)</span>上，设<spanclass="math inline">\(b_0\)</span>为时间<code>0</code>，<spanclass="math inline">\(b_1\)</span>为时间<code>1</code>，线性插值找到<spanclass="math inline">\(b_0^1\)</span></li><li>在<span class="math inline">\(b_1b_2\)</span>上，设<spanclass="math inline">\(b_1\)</span>为时间<code>0</code>，<spanclass="math inline">\(b_2\)</span>为时间<code>1</code>，线性插值找到<spanclass="math inline">\(b_1^1\)</span></li><li>在<span class="math inline">\(b_2b_3\)</span>上，设<spanclass="math inline">\(b_2\)</span>为时间<code>0</code>，<spanclass="math inline">\(b_3\)</span>为时间<code>1</code>，线性插值找到<spanclass="math inline">\(b_2^1\)</span></li></ol></li><li>第二步：<ol type="1"><li>在<span class="math inline">\(b_0^1b_1^1\)</span>上，设<spanclass="math inline">\(b_0^1\)</span>为时间<code>0</code>，<spanclass="math inline">\(b_1^1\)</span>为时间<code>1</code>，线性插值找到<spanclass="math inline">\(b_0^2\)</span></li><li>在<span class="math inline">\(b_1^1b_2^1\)</span>上，设<spanclass="math inline">\(b_1^1\)</span>为时间<code>0</code>，<spanclass="math inline">\(b_2^1\)</span>为时间<code>1</code>，线性插值找到<spanclass="math inline">\(b_1^2\)</span></li></ol></li><li>第三步：<ol type="1"><li>在<span class="math inline">\(b_0^2b_1^2\)</span>上，设<spanclass="math inline">\(b_0^2\)</span>为时间<code>0</code>，<spanclass="math inline">\(b_1^2\)</span>为时间<code>1</code>，线性插值找到<spanclass="math inline">\(b_0^3\)</span></li></ol></li><li>则<spanclass="math inline">\(b_0^3\)</span>记为贝塞尔曲线，在时间<code>t</code>所在的位置<code>x(t)</code></li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230320214234859.png" alt="image-20230320214234859" style="zoom:80%;" /></p><h4 id="贝塞尔曲线的代数形式">11.1.1.3 贝塞尔曲线的代数形式</h4><p><img src="/images/AssetMarkdown/image-20230320214621950.png" alt="image-20230320214621950" style="zoom:80%;" /></p><blockquote><p>2阶贝塞尔曲线</p></blockquote><p><img src="/images/AssetMarkdown/image-20230320214734581.png" alt="image-20230320214734581" style="zoom:80%;" /></p><h3 id="n阶贝塞尔曲线的代数表示">11.1.2 n阶贝塞尔曲线的代数表示</h3><blockquote><p>参数为 <strong>(1-t+t)<sup>n</sup></strong> 的多项式展开</p></blockquote><p><span class="math display">\[b^n(t) = \sum_{j=0}^n b_j B_j^n(t)\]</span></p><ol type="1"><li><spanclass="math inline">\(b^n(t)\)</span>：n阶贝塞尔曲线的表达式</li><li><spanclass="math inline">\(b_j\)</span>：第j个控制点，可以为三维空间中的点</li><li><spanclass="math inline">\(B_j^n(t)\)</span>：Bernstein多项式，此处为<spanclass="math inline">\(C_{n}^i\ t^i\ (1-t)^{n-i}\)</span></li></ol><h3 id="贝塞尔曲线的性质">11.1.3 贝塞尔曲线的性质</h3><ol type="1"><li><p>必须过起点和终点：<spanclass="math inline">\(b(0)=b_0,b(1)=b_n\)</span></p></li><li><p>对于三阶贝塞尔曲线：<spanclass="math inline">\(b&#39;(0)=3(b_1-b_0),b&#39;(1)=3(b_3-b_2)\)</span></p></li><li><p>在仿射变换中：<strong>对贝塞尔曲线的仿射变换 &lt;=&gt;对控制点做仿射变换然后再计算贝塞尔曲线</strong></p><ol type="1"><li>但是对投影变换不行</li></ol></li><li><p>凸包性质：<strong>贝塞尔曲线一定在控制点形成的凸包内</strong></p><ol type="1"><li><p>凸包：包围某些顶点的最小凸多边形</p><blockquote><p>可以将顶点想象为钉子，用橡皮筋包裹住所有顶点，然后松手，橡皮筋最后的形状记为这些顶点的凸包</p></blockquote></li><li><p>如果控制点在同一条直线上，则贝塞尔曲线就是这条直线</p></li></ol></li></ol><h3 id="分段贝塞尔曲线-picewise-bezier-curves">11.1.4 分段贝塞尔曲线Picewise Bezier Curves</h3><ol type="1"><li><p>通常为4个控制点，控制一段贝塞尔曲线</p></li><li><p>PS中的钢笔工具，就应用了分段贝塞尔曲线</p><p><img src="/images/AssetMarkdown/image-20230320220627770.png" alt="image-20230320220627770" style="zoom:80%;" /></p></li><li><p>保证<strong>连续</strong>（<strong>C<sup>0</sup>连续</strong>）：</p><p><img src="/images/AssetMarkdown/image-20230320221118919.png" alt="image-20230320221118919" style="zoom:80%;" /></p></li><li><p>保证<strong>光滑/切线连续</strong>（<strong>C<sup>1</sup>连续</strong>）：相邻的两端贝塞尔曲线中，上一段曲线的最后两个控制点，与下一段曲线的最初两个控制点，共线且距离相同</p><p><img src="/images/AssetMarkdown/image-20230320221132408.png" alt="image-20230320221132408" style="zoom:80%;" /></p></li></ol><h2 id="样条曲线-spline">11.2 样条曲线 Spline</h2><p>样条：一个可控的曲线</p><h3 id="b样条-basis-spline">11.2.1 B样条 Basis-Spline</h3><p>基函数样条</p><ol type="1"><li>贝塞尔曲线，既可以理解为用Bernstein多项式，对控制点加权求和；也可以理解为用控制点，对Bernstein多项式进行加权求和。则Bernstein多项式，即为基函数</li><li>相当于由不同的函数，通过某一种方式结合起来，得到另一个函数</li><li>B样条是对贝塞尔曲线的扩展，可以保证<strong>修改的局部性</strong>，改变一个点，至多影响曲线的某个部分</li></ol><h2 id="贝塞尔曲面-bezier-surfaces">11.3 贝塞尔曲面 Bezier Surfaces</h2><h3 id="个控制点">11.3.1 4×4个控制点</h3><ol type="1"><li><p>对于每一行的4个控制点，计算每一行的贝塞尔曲线</p></li><li><p>对于每一个时间<code>t1</code>，对应的4行贝塞尔曲线上的点，认为是4个控制点，可以得到另一个贝塞尔曲线，其时间为<code>t2</code></p><p><img src="/images/AssetMarkdown/image-20230320222831716.png" alt="image-20230320222831716" style="zoom:80%;" /></p></li><li><p>在<code>t1,t2</code>的变换过程中，即可得到贝塞尔曲面</p><p><img src="/images/AssetMarkdown/image-20230320222940089.png" alt="image-20230320222940089" style="zoom:80%;" /></p></li></ol><h3 id="计算贝塞尔曲面">11.3.2 计算贝塞尔曲面</h3><blockquote><p>可以将参数<code>(u,v)</code>，映射到曲面上的对应点，因此贝塞尔曲面是显示表示</p></blockquote><p><img src="/images/AssetMarkdown/image-20230320223338990.png" alt="image-20230320223338990" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230320223409877.png" alt="image-20230320223409877" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230320223417719.png" alt="image-20230320223417719" style="zoom:80%;" /></p><h1 id="第12课-几何3网格体">第12课 几何3：网格体</h1><h2 id="网格体的细分-subdivision">12.1 网格体的细分 Subdivision</h2><ol type="1"><li>引入更多三角形</li><li>调整顶点的位置，让网格体更加接近原样</li></ol><h3 id="loop细分三角形网格体">12.1.1 Loop细分：三角形网格体</h3><ol type="1"><li><p>连接三角形三条边的中点，可以将一个三角形划分为四个三角形</p><p><img src="/images/AssetMarkdown/image-20230321162509372.png" alt="image-20230321162509372" style="zoom:80%;" /></p></li><li><p>计算新的顶点的位置</p><ol type="1"><li>设新增的顶点为图中的白点，白点被原来的两个三角形<code>ABC、ABD</code>共享</li><li>则可以计算新的顶点的坐标值：<code>3/8 * (A+B) + 1/8 * (C+D)</code></li></ol><p><img src="/images/AssetMarkdown/image-20230321162618650.png" alt="image-20230321162618650" style="zoom:80%;" /></p></li><li><p>更改旧的顶点的位置</p><ol type="1"><li>设顶点的度为<code>n</code>，与<code>n</code>相关的一个数<code>u</code></li><li>则更改顶点的位置为：<code>(1-n*u) * 当前顶点原来的位置 + u * 相邻节点的位置之和</code></li></ol><p><img src="/images/AssetMarkdown/image-20230321162914642.png" alt="image-20230321162914642" style="zoom:80%;" /></p></li></ol><h3 id="catmull-clark细分一般的网格体">12.1.2Catmull-Clark细分：一般的网格体</h3><ol type="1"><li>quad face：四边形面</li><li>non-quad face：非四边形面</li><li>Extraordinary vertex：奇异点，度数不为4的点</li></ol><p><img src="/images/AssetMarkdown/image-20230321163537134.png" alt="image-20230321163537134" style="zoom:80%;" /></p><p>细分方法：</p><ol type="1"><li><p>增加新的点：每一条线取中点，每一个面取中点，然后将边上的中点与面中心的点连起来</p><ol type="1"><li>新出现了2个奇异点，度数均为2</li><li>每个原来的非四边形面均会引入一个奇异点，且一次操作后会消失</li></ol><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><thstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20230321163943647.png" alt="image-20230321163943647" style="zoom:80%;" /></th><thstyle="text-align: center;"><img src="/images/AssetMarkdown/image-20230321164016513.png" alt="image-20230321164016513" style="zoom:80%;" /></th><th><img src="/images/AssetMarkdown/image-20230321163957959.png" alt="image-20230321163957959" style="zoom:80%;" /></th></tr></thead><tbody></tbody></table></li><li><p>修改点的坐标</p><p><img src="/images/AssetMarkdown/image-20230321164236099.png" alt="image-20230321164236099" style="zoom:80%;" /></p></li></ol><h2 id="网格体简化-simplification">12.2 网格体简化 Simplification</h2><h3 id="边坍缩-collapsing-an-edge">12.2.1 边坍缩 Collapsing An Edge</h3><ol type="1"><li>选中一条边，将两个端点合并为一个顶点</li></ol><p><img src="/images/AssetMarkdown/image-20230321164735232.png" alt="image-20230321164735232" style="zoom:80%;" /></p><h3 id="二次度量误差-quadric-error-metrics">12.2.2 二次度量误差 QuadricError Metrics</h3><ol type="1"><li>将点放到某一个位置，使得其到原本与它关联面的距离平方和最小</li></ol><p><img src="/images/AssetMarkdown/image-20230321165037373.png" alt="image-20230321165037373" style="zoom:80%;" /></p><h3 id="边坍缩的二次误差">12.2.3 边坍缩的二次误差</h3><ol type="1"><li>假设坍缩该边，并且将坍缩后的点放到最佳位置，计算其二次度量误差</li><li>从误差小的边开始坍缩</li><li>但是每一次坍缩后，需要更新其他受影响边的二次度量误差：用堆维护</li><li>本质上是一个贪心算法，用局部最优，组成全局最优</li></ol><p><img src="/images/AssetMarkdown/image-20230321165529353.png" alt="image-20230321165529353" style="zoom:80%;" /></p><h1 id="第12课-阴影-shadow-mapping">第12课 阴影 Shadow Mapping</h1><ol type="1"><li>本质上是一个<strong>图像空间</strong>的算法<ol type="1"><li>不需要知道场景的几何信息</li><li>会存在<strong>走样</strong>现象</li></ol></li><li>核心思想：<ol type="1"><li>点不在阴影里 &lt;=&gt; 摄像机&amp;光源均可以看到该点</li></ol></li><li>ShadowMapping只能处理点光源的阴影，且会有明显的边界，即<strong>硬阴影</strong></li></ol><h2 id="第一步render-from-light">12.1 第一步：Render from Light</h2><p>从光源看向场景，记录看到的任何点的深度，即获取Z-Buffer</p><p><img src="/images/AssetMarkdown/image-20230321170213274.png" alt="image-20230321170213274" style="zoom:80%;" /></p><h2 id="第二步render-from-eye">12.2 第二步：Render from Eye</h2><ol type="1"><li><p>从摄像机看向场景，记录看到的点</p><p><img src="/images/AssetMarkdown/image-20230321170427126.png" alt="image-20230321170427126" style="zoom:80%;" /></p></li><li><p>将看到的点，投影回光源，判断该位置对应的光源看到的深度</p><ol type="1"><li>如果深度相同，则可以看到</li><li>如果深度不相同，则不可以看到</li></ol><p><img src="/images/AssetMarkdown/image-20230321170510434.png" alt="image-20230321170510434" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230321170625379.png" alt="image-20230321170625379" style="zoom:80%;" /></p></li></ol><h2 id="示例">12.3 示例</h2><p><img src="/images/AssetMarkdown/image-20230321170932574.png" alt="image-20230321170932574" style="zoom:80%;" /></p><ol type="1"><li><p>从光源看向场景，记录深度图</p><p><img src="/images/AssetMarkdown/image-20230321170818410.png" alt="image-20230321170818410" style="zoom:80%;" /></p></li><li><p>从相机看向场景，将每一个像素投影回光源看到的图像，对比两个深度</p><p><img src="/images/AssetMarkdown/image-20230321170902602.png" alt="image-20230321170902602" style="zoom:80%;" /></p></li><li><p>由于存在浮点精度、shadowmap的分辨率与场景的分辨率等问题，会导致阴影的各种问题</p></li></ol><h2 id="硬阴影与软阴影">12.4 硬阴影与软阴影</h2><ol type="1"><li>Umbra 本影：完全看不到光源</li><li>Penumbra 半影：看到部分光源</li><li>软阴影一定是因为光源存在大小</li></ol><p><img src="/images/AssetMarkdown/image-20230321171532601.png" alt="image-20230321171532601" style="zoom:80%;" /></p><h1 id="第13课-光线追踪1whitted-style-ray-tracing">第13课光线追踪1：Whitted-Style Ray Tracing</h1><h2 id="为什么要使用光线追踪">13.1 为什么要使用光线追踪</h2><ol type="1"><li><p>光栅化不能很好解决全局效果</p><ol type="1"><li>软阴影</li><li>Glossy反射</li><li>间接光照</li></ol><p><img src="/images/AssetMarkdown/image-20230321172627995.png" alt="image-20230321172627995" style="zoom:80%;" /></p></li><li><p>光栅化的速度很快，但是质量较低，通常用于实时渲染</p></li><li><p>光线追踪质量高，但是非常慢，通常用于离线制作</p></li></ol><h2 id="基础光线追踪算法">13.2 基础光线追踪算法</h2><h3 id="光线是什么">13.2.1 光线是什么</h3><ol type="1"><li>光线沿直线传播</li><li>光线和光线不会发生碰撞</li><li>光线从光源发出，经过反射、折射等过程，进入人的眼睛：<strong>光路可逆性</strong></li></ol><h3 id="光线投射">13.2.2 光线投射</h3><ol type="1"><li>eyeray：从<strong>眼睛</strong>到屏幕上的<strong>像素</strong>，连接的而成的射线，只记录最近的<strong>交点</strong></li><li>shadowray：从某个<strong>点</strong>到<strong>光源</strong>的连线</li><li>根据两条线的关系，判断着色</li></ol><p><img src="/images/AssetMarkdown/image-20230321173554636.png" alt="image-20230321173554636" style="zoom:80%;" /></p><h3 id="递归光线追踪">13.2.3 递归光线追踪</h3><p><img src="/images/AssetMarkdown/image-20230321173940996.png" alt="image-20230321173940996" style="zoom:80%;" /></p><ol type="1"><li>primary ray：即eye ray</li><li>secondary ray：经过折射/反射后的光线</li></ol><p><img src="/images/AssetMarkdown/image-20230321174050214.png" alt="image-20230321174050214" style="zoom:80%;" /></p><h2 id="光线和表面的交点">13.3 光线和表面的交点</h2><h3 id="光线的数学定义">13.3.1 光线的数学定义</h3><ol type="1"><li>起点<code>o</code>，方向<code>d</code></li><li>射线定义：<code>r(t) = o + td</code></li></ol><p><img src="/images/AssetMarkdown/image-20230321174353486.png" alt="image-20230321174353486" style="zoom:80%;" /></p><h3 id="光线-与-球-求交点">13.3.2 光线 与 球 求交点</h3><p><img src="/images/AssetMarkdown/image-20230321174429897.png" alt="image-20230321174429897" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230321174531995.png" alt="image-20230321174531995" style="zoom:80%;" /></p><h3 id="光线-与-隐式表面-求交点">13.3.3 光线 与 隐式表面 求交点</h3><p><img src="/images/AssetMarkdown/image-20230321174700426.png" alt="image-20230321174700426" style="zoom:80%;" /></p><h3 id="光线-与-三角形-求交点">13.3.4 光线 与 三角形 求交点</h3><blockquote><p>如果射线与物体的交点数量为<strong>奇数</strong>，则点在<strong>物体内</strong>；如果是<strong>偶数</strong>，则在<strong>物体外</strong></p></blockquote><ol type="1"><li>光线和平面求交</li><li>判断点是否在三角形内</li></ol><h4 id="平面的数学定义">13.3.4.1 平面的数学定义</h4><ol type="1"><li>给一个点<span class="math inline">\(p_0\)</span>，一条法线<spanclass="math inline">\(\vec{N}\)</span></li><li>则平面为：<span class="math inline">\((p-p_0)·\vec{N} =0\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20230321175203939.png" alt="image-20230321175203939" style="zoom:80%;" /></p><h4 id="光线和平面的交点">13.3.4.2 光线和平面的交点</h4><p><img src="/images/AssetMarkdown/image-20230321203414616.png" alt="image-20230321203414616" style="zoom:80%;" /></p><h4 id="moller-trumbore算法">13.3.4.3 Moller Trumbore算法</h4><ol type="1"><li>用重心坐标表示平面：<span class="math inline">\((1-b_1-b_2)\vec{P_0}+ b_1\vec{P_1} + b_2\vec{P_2}\)</span></li><li>判定点在射线上：<span class="math inline">\(t\ge 0\)</span></li><li>判定点在三角形内：<span class="math inline">\(b_1 \ge 0,b_2 \ge0\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20230321203545908.png" alt="image-20230321203545908" style="zoom:80%;" /></p><h2 id="加速-光线-与-三角形表面-求交">13.4 加速 光线 与 三角形表面求交</h2><h3 id="包围盒-bounding-volumes">13.4.1 包围盒 Bounding Volumes</h3><ol type="1"><li>用一个简单的形状，将物体包围起来，如果不能与包围盒相交，则一定不会与物体相交</li></ol><p><img src="/images/AssetMarkdown/image-20230321215130003.png" alt="image-20230321215130003" style="zoom:80%;" /></p><h3 id="轴对齐包围盒aabbaxis-aligned-bounding-box">13.4.2轴对齐包围盒AABB：Axis-Aligned Bounding Box</h3><ol type="1"><li><p>空间中的长方体，可以理解为3对表面的交集</p></li><li><p>轴对齐包围盒：长方体的每一个边，均与坐标轴平行</p></li><li><p>二维空间，光线与长方形求交</p><ol type="1"><li>对于竖着的情况，可以得到在<spanclass="math inline">\(t=t_{x-min}\)</span>时，与<spanclass="math inline">\(x=x_0\)</span>相交；在<spanclass="math inline">\(t=t_{x-max}\)</span>时，与<spanclass="math inline">\(x=x_1\)</span>相交</li><li>对于横着的情况，可以得到在<spanclass="math inline">\(t=t_{y-min}\)</span>时，与<spanclass="math inline">\(y=y_0\)</span>相交；在<spanclass="math inline">\(t=t_{y-max}\)</span>时，与<spanclass="math inline">\(y=y_1\)</span>相交</li><li>由于长方形可以看作四条线的交集，因此光线在长方形中的部分，也可以看作<spanclass="math inline">\([t_{x-min},t_{x-max}]\)</span>和<spanclass="math inline">\([t_{y-min},t_{y-max}]\)</span>的交集</li><li>从而可以得到光线与长方形的交点对应的时间<spanclass="math inline">\(t_{enter} =\max(t_{x-min},t_{y-min})\)</span>，<spanclass="math inline">\(t_{exit}=\min(t_{x-max},t_{y-max})\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20230321220625451.png" alt="image-20230321220625451" style="zoom:80%;" /></p></li><li><p>三维空间，光线与长方体求交</p><ol type="1"><li>只有当光线同时进入了3对表面，才能说光线进入了长方体</li><li>光线只要离开了1对表面，就说钢线离开了长方体</li><li>对于每一对表面，计算一次<spanclass="math inline">\([t_{min},t_{max}]\)</span></li><li>则对于长方体来说，<span class="math inline">\(t_{enter} =\max(t_{min})\)</span>，<spanclass="math inline">\(t_{exit}=\min(t_{max})\)</span></li></ol></li><li><p>如果<spanclass="math inline">\(t_{exit}&lt;0\)</span>，则说明盒子在光线的背后，不可能有交点</p></li><li><p>如果<span class="math inline">\(t_{exit}\ge0,t_{enter}&lt;0\)</span>，则说明光线的起点在盒子里面，肯定有交点</p></li></ol><p><strong>因此，光线与AABB有交点，当且仅当：<spanclass="math inline">\(t_{enter}&lt;t_{exit}\)</span> 并且 <spanclass="math inline">\(t_{exit} \ge 0\)</span></strong></p><h1 id="第14课-光线追踪2使用aabb包围盒加速光线追踪">第14课光线追踪2：使用AABB包围盒加速光线追踪</h1><h2 id="直接使用aabb包围盒">14.1 直接使用AABB包围盒</h2><ol type="1"><li><p>找到包围盒</p></li><li><p>将包围盒分为格子<code>Grid</code></p></li><li><p>如果某个格子与物体的表面相交，则标记该格子</p><p><img src="/images/AssetMarkdown/image-20230321222357738.png" alt="image-20230321222357738" style="zoom:80%;" /></p></li><li><p>将光线与格子求交</p><ol type="1"><li>如果光线与格子相交，且格子内有物体，则将光线与对应物体求交</li></ol><p><img src="/images/AssetMarkdown/image-20230321222609290.png" alt="image-20230321222609290" style="zoom:80%;" /></p></li><li><p>格子过于稀疏 or 过于密集，均会使效率变低</p></li><li><p>通常，格子的数量是场景中的物体数目的整数倍：<code>#cells = C * #objs</code></p><p><img src="/images/AssetMarkdown/image-20230321222827253.png" alt="image-20230321222827253" style="zoom:80%;" /></p></li></ol><h2 id="空间划分-spatial-partitions">14.2 空间划分 SpatialPartitions</h2><p>将空间划分为大小不同的盒子</p><p>缺点：</p><ol type="1"><li>难以判断哪些三角形属于当前格子</li><li>一个三角形可能会处在多个格子中</li></ol><p><img src="/images/AssetMarkdown/image-20230321225126054.png" alt="image-20230321225126054" style="zoom:80%;" /></p><h3 id="kd-tree-预处理">14.2.1 KD-Tree 预处理</h3><ol type="1"><li>注意，每一个部分都要划分，按照水平、竖直的顺序交替分割</li><li>中间节点：<ol type="1"><li>分割轴：x、y、z</li><li>分割位置：在分割轴上的分割点的坐标</li><li>子节点：指向子节点的指针，有2个子节点</li></ol></li><li>叶节点：<ol type="1"><li>记录和该格子相交的物体</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230322164639853.png" alt="image-20230322164639853" style="zoom:80%;" /></p><h3 id="kd-tree加速光线追踪">14.2.2 KD-Tree加速光线追踪</h3><ol type="1"><li>如果光线和格子没有交点，则不做操作</li><li>如果光线和格子有交点<ol type="1"><li>如果格子为叶节点，则光线与叶节点中的所有物体求交</li><li>否则与格子的两个子节点求交</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230322170220976.png" alt="image-20230322170220976" style="zoom:80%;" /></p><h2 id="物体划分-object-partitions">14.3 物体划分 Object Partitions</h2><ol type="1"><li>将物体分为两堆，然后再求包围盒</li><li>包围盒之间可能有相交，但可以保证一个三角形最多只在一个包围盒中</li></ol><h3 id="层次包围盒-bvhbounding-volume-hierarchy">14.3.1 层次包围盒BVH：Bounding Volume Hierarchy</h3><ol type="1"><li>找到一个包围盒</li><li>递归的将包围盒中的物体划分为两个部分</li><li>重新计算包围盒</li><li>重复23，直到每个包围和中的物体数量足够少</li><li>将物体存在每个叶节点中</li></ol><p><img src="/images/AssetMarkdown/image-20230322171211451.png" alt="image-20230322171211451" style="zoom:80%;" /></p><h3 id="划分方法">14.3.2 划分方法</h3><ol type="1"><li>每次找最长的轴进行划分</li><li>每次找第n/2个三角形，进行划分，保证两边的三角形个数相差不多<ol type="1"><li>根据重心坐标，划分三角形的位置</li><li>可以类似于找第k大数，通过快排，在O(n)时间内找到</li></ol></li><li>如果场景中的物体移动了，就需要重新建立BVH树</li></ol><h3 id="bvh加速光线追踪">14.3.3 BVH加速光线追踪</h3><ol type="1"><li>如果光线和包围盒没有交点，则不做操作</li><li>如果光线和包围盒有交点<ol type="1"><li>如果包围盒为叶节点，则光线与叶节点中的所有物体求交</li><li>否则与包围盒的两个子节点求交</li></ol></li></ol><h3 id="空间划分-vs-物体划分">14.3.4 空间划分 vs 物体划分</h3><p><img src="/images/AssetMarkdown/image-20230322172055257.png" alt="image-20230322172055257" style="zoom:80%;" /></p><h1 id="第15课-光线追踪3brdf-渲染方程">第15课 光线追踪3：BRDF &amp;渲染方程</h1><h2 id="辐射度量学-basic-radiometry">15.1 辐射度量学 Basicradiometry</h2><ol type="1"><li>如何描述光照：定义了一系列的方法和单位</li><li>给光赋予了一系列空间上的属性（依旧是基于几何光学）<ol type="1"><li>Radiant flux：辐射通量</li><li>intensity：强度</li><li>irradiance：辐射通量密度</li><li>radiance：辐射</li></ol></li><li>在物理上准确定义光照的方法</li></ol><p><img src="/images/AssetMarkdown/image-20230322174129089.png" alt="image-20230322174129089" style="zoom:80%;" /></p><h3 id="radiant-fluxpower单位时间的能量">15.1.1 RadiantFlux/Power：单位时间的能量</h3><ol type="1"><li>Radiant <strong>Energy</strong>：光源辐射出来的能量，<spanclass="math inline">\(Q\)</span>，单位为<strong>焦耳J</strong>，在CG中基本不使用</li><li>Radiant <strong>Flux/Power</strong>：单位时间内发射的能量，<spanclass="math inline">\(\Phi=\frac{dQ}{dt}\)</span>，单位为<strong>瓦特W</strong>/<strong>流明lm=lumen</strong></li></ol><h3 id="radiant-intensity单位立体角的能量">15.1.2 RadiantIntensity：单位立体角的能量</h3><ol type="1"><li>Radiant <strong>Intensity</strong>：单位立体角上的power，<spanclass="math inline">\(I(\omega)=\frac{d\Phi}{d\omega}\)</span>，单位为<strong>坎德拉cd</strong><ol type="1"><li>也就是光源在某个方向上的亮度</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230322174233794.png" alt="image-20230322174233794" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230322175039042.png" alt="image-20230322175039042" style="zoom:80%;" /></p><h4 id="立体角-solid-angles">15.1.2.1 立体角 Solid Angles</h4><ol type="1"><li>角度：<spanclass="math inline">\(\theta=\frac{l}{r}\)</span>，单位为<strong>rad</strong></li><li>立体角：<spanclass="math inline">\(\Omega=\frac{A}{r^2}\)</span>，单位为<strong>sr</strong></li></ol><p><img src="/images/AssetMarkdown/image-20230322174554385.png" alt="image-20230322174554385" style="zoom:80%;" /></p><h4 id="单位立体角-differential-solid-angles">15.1.2.2 单位立体角Differential Solid Angles</h4><ol type="1"><li>单位面积：<span class="math inline">\(dA=r^2sin\theta\ d\theta\d\phi\)</span></li><li>单位立体角：<span class="math inline">\(d\omega=sin\theta\ d\theta\d\phi\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20230322174804469.png" alt="image-20230322174804469" style="zoom:80%;" /></p><h3 id="irradiance单位面积的能量">15.1.4 Irradiance：单位面积的能量</h3><ol type="1"><li><p>Irradiance：表面上<strong>与光线垂直</strong>的单位面积接收到的能量，<spanclass="math inline">\(E(x)=\frac{d\phi(x)}{dA}\)</span>，单位<strong><spanclass="math inline">\(\frac{W}{m^2}\)</span>，<spanclass="math inline">\(\frac{lm}{m^2}\)</span>=lux</strong></p><ol type="1"><li>如果表面与光线<strong>不垂直</strong>，则需要投影到垂直方向：<spanclass="math inline">\(E(x)=\frac{d\phi(x)}{dA}\ \cos\theta\)</span>，<spanclass="math inline">\(\theta\)</span>为光线与法线的夹角</li></ol><p><img src="/images/AssetMarkdown/image-20230323202218229.png" alt="image-20230323202218229" style="zoom:80%;" /></p></li><li><p>光在传播的过程中，Intensity没有变，而Irradiate变小了，因为面积变大了</p><p><img src="/images/AssetMarkdown/image-20230323202709508.png" alt="image-20230323202709508" style="zoom:80%;" /></p></li></ol><h3 id="radiance单位立体角单位面积的能量">15.1.5Radiance：单位立体角&amp;单位面积的能量</h3><ol type="1"><li>Radiance：表面上<strong>与光线垂直</strong>的单位面积接收到的能量，<spanclass="math inline">\(L(p,\omega)=\frac{d^2\phi(p,\omega)}{d\omega dAcos \theta}\)</span>，单位<strong><span class="math inline">\(\frac{cd}{m^2}\)</span>，<span class="math inline">\(\frac{lm}{sr\m^2}=\frac{lm}{sr\ m^2}\)</span>=nit</strong><ol type="1"><li>单位面积的Intensity：<spanclass="math inline">\(L(p,\omega)=\frac{dI(p,\omega)}{dA cos\theta}\)</span></li><li>单位立体角的Irradiance：<spanclass="math inline">\(L(p,\omega)=\frac{dE(p)}{d\omega cos\theta}\)</span></li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230323203046905.png" alt="image-20230323203046905" style="zoom:80%;" /></p><h3 id="irradiance-vs-radiance">15.1.6 Irradiance vs Radiance</h3><ol type="1"><li><strong>Irradiance</strong>：单位面积<strong>dA</strong>接收到的所有能量，<spanclass="math inline">\(E(p)\)</span></li><li><strong>Radiance</strong>：单位面积<strong>dA</strong>在单位方向<strong>dω</strong>处接收到的所有能量，<spanclass="math inline">\(L(p,\omega)\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20230323203503761.png" alt="image-20230323203503761" style="zoom:80%;" /></p><h2 id="brdf双向反射分布函数">15.2 BRDF：双向反射分布函数</h2><blockquote><p><strong>Bidirectional Reflectance Distribution Function</strong></p></blockquote><h3 id="某个点的反射">15.2.1 某个点的反射</h3><ol type="1"><li>单位面积<strong>dA</strong>，在某个单位立体角<strong>ω<sub>i</sub></strong>处吸收能量<strong>dE(ω<sub>i</sub>)</strong></li><li>会反射到另一个单位立体角<strong>ω<sub>r</sub></strong>、单位面积的能量<strong>dL<sub>r</sub>(x,ω<sub>r</sub>)</strong></li></ol><p><img src="/images/AssetMarkdown/image-20230323204145095.png" alt="image-20230323204145095" style="zoom:80%;" /></p><h3 id="brdf">15.2.2 BRDF</h3><ol type="1"><li>入射光的Radiance：<strong>dE<sub>i</sub>(ω<sub>i</sub>)</strong></li><li>反射光的Irradiance：<strong>dL<sub>r</sub>(ω<sub>r</sub>)</strong></li><li>入射光在反射方向的能量分布比例<strong>f<sub>r</sub>(ω<sub>i</sub> →ω<sub>r</sub>)</strong>为：<ol type="1"><li>入射光的Radiance / 反射光的Irradiance</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230323204215288.png" alt="image-20230323204215288" style="zoom:80%;" /></p><h3 id="反射方程-reflection-equation">15.2.3 反射方程 ReflectionEquation</h3><ol type="1"><li>某个着色点<strong>p</strong>，当反射方向为<strong>ω<sub>r</sub></strong>是，反射的光<strong>L<sub>r</sub>(p,ω<sub>r</sub>)</strong>为：<ol type="1"><li>在每个入射方向<strong>ω<sub>i</sub></strong>的反射的能量<strong>f<sub>r</sub>(p,ω<sub>i</sub> → ω<sub>r</sub>) L<sub>i</sub>(p, ω<sub>i</sub>) cosθ<sub>i</sub></strong>，对入射方向立体角<strong>dω<sub>i</sub></strong>的积分</li><li>只考虑半球<strong>H<sup>2</sup> / Ω+</strong></li></ol></li><li>问题：任何出射的radiance，都可能作为其他着色点的入射的radiance，因此存在递归定义</li></ol><p><img src="/images/AssetMarkdown/image-20230323204816473.png" alt="image-20230323204816473" style="zoom:80%;" /></p><h2 id="渲染方程-rendering-equation">15.3 渲染方程 RenderingEquation</h2><p>某个点<strong>p</strong>向某个方向<strong>ω<sub>o</sub></strong>出射的光<strong>L<sub>o</sub>(p,ω<sub>o</sub>)</strong>由两部分构成</p><ol type="1"><li>自己产生的光：<span class="math inline">\(L_e(p, ω_o)\)</span></li><li>反射的光：<spanclass="math inline">\(\int_{\Omega+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(n·\omega_i)d\omega_i\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20230323205330782.png" alt="image-20230323205330782" style="zoom:80%;" /></p><h3 id="一个点光源">15.3.1 一个点光源</h3><p><img src="/images/AssetMarkdown/image-20230323211001791.png" alt="image-20230323211001791" style="zoom:80%;" /></p><h3 id="很多个点光源加和">15.3.2 很多个点光源：加和</h3><p><img src="/images/AssetMarkdown/image-20230323211106534.png" alt="image-20230323211106534" style="zoom:80%;" /></p><h3 id="面光源很多个点光源的集合-积分">15.3.3 面光源：很多个点光源的集合=&gt; 积分</h3><p><img src="/images/AssetMarkdown/image-20230323211423936.png" alt="image-20230323211423936" style="zoom:80%;" /></p><h3 id="其他表面的反射当成面光源使用">15.3.4其他表面的反射：当成面光源使用</h3><p><img src="/images/AssetMarkdown/image-20230323211407432.png" alt="image-20230323211407432" style="zoom:80%;" /></p><h3 id="渲染方程的简化表示">15.3.5 渲染方程的简化表示</h3><blockquote><p>积分方程</p></blockquote><p><img src="/images/AssetMarkdown/image-20230323211552304.png" alt="image-20230323211552304" style="zoom:80%;" /></p><blockquote><p>线性算子等式</p></blockquote><p><img src="/images/AssetMarkdown/image-20230323211712567.png" alt="image-20230323211712567" style="zoom:80%;" /></p><h3 id="光线弹射n次的光线追踪-全局光照">15.3.6 光线弹射n次的光线追踪=&gt; 全局光照</h3><p><img src="/images/AssetMarkdown/image-20230323212038657.png" alt="image-20230323212038657" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230323212529890.png" alt="image-20230323212529890" style="zoom:80%;" /></p><h2 id="概率论">15.4 概率论</h2><h3 id="pdf概率分布函数x-px">15.4.1 PDF：概率分布函数，X ~ p(x)</h3><blockquote><p><strong>Probability Distribution Function</strong></p></blockquote><p><img src="/images/AssetMarkdown/image-20230323213850665.png" alt="image-20230323213850665" style="zoom:80%;" /></p><h3 id="随机变量函数的期望">15.4.2 随机变量函数的期望</h3><p><img src="/images/AssetMarkdown/image-20230323214009047.png" alt="image-20230323214009047" style="zoom:80%;" /></p><h1 id="第16课-光线追踪4蒙特卡洛积分-路径追踪">第16课光线追踪4：蒙特卡洛积分 &amp; 路径追踪</h1><h2 id="复习">16.1 复习</h2><blockquote><p>渲染方程：描述了光线的传递</p></blockquote><p><img src="/images/AssetMarkdown/image-20230323221310058.png" alt="image-20230323221310058" style="zoom:80%;" /></p><ol type="1"><li>存在积分</li><li>是一个递归的计算：因为入射光可能是其他面的反射光</li></ol><h2 id="蒙特卡洛积分采样求定积分">16.2 蒙特卡洛积分：采样求定积分</h2><p><img src="/images/AssetMarkdown/image-20230323221704667.png" alt="image-20230323221704667" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230323222122882.png" alt="image-20230323222122882" style="zoom:80%;" /></p><ol type="1"><li>在<spanclass="math inline">\([a,b]\)</span>中采样多次，设每次采样点为<spanclass="math inline">\(x_i\)</span>，对应的函数值为<spanclass="math inline">\(f(x_i)\)</span>，则使用<spanclass="math inline">\((b-a)*f(x_i)\)</span>，近似定积分的值</li><li>当采样次数足够多时，求平均值，即可得到实际的定积分的值</li><li>设随机采样点<span class="math inline">\(X_i\)</span> ~ <spanclass="math inline">\(p(x)\)</span>，要求<spanclass="math inline">\(\int_{a}^bp(x)=1\)</span>，则蒙特卡洛的积分值为：<spanclass="math inline">\(F_N=\frac{1}{N}\sum_{i=1}^{N}\frac{f(X_i)}{p(X_i)}\)</span></li></ol><blockquote><p>示例：用<span class="math inline">\(X_i\)</span> ~ <spanclass="math inline">\(p(x)\)</span> = C采样</p><p><img src="/images/AssetMarkdown/image-20230323222403543.png" alt="image-20230323222403543" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230323222419854.png" alt="image-20230323222419854" style="zoom:80%;" /></p></blockquote><p>注意：</p><ol type="1"><li>采样次数越多，结果越精确</li><li>在x上采样，则就是在x上积分</li></ol><h2 id="路径追踪path-tracing">16.3 路径追踪：Path Tracing</h2><h3 id="whitted-style-ray-tracing-的做法存在的问题">16.3.1 Whitted-StyleRay Tracing 的做法存在的问题</h3><p>不断的弹射光线，在任意一个位置均弹射光线</p><ol type="1"><li>如果是光滑物体：则沿镜面方向反射、折射方向折射</li><li>如果是漫反射物体：停止弹射</li></ol><p>存在问题：</p><ol type="1"><li>对于glossy物体，不能按照specular那样的镜面反射处理</li><li>漫反射物体会将光线均匀的弹射到各个部分，而非不反射</li></ol><h3 id="使用蒙特卡洛积分实现渲染方程中的积分">16.3.2使用蒙特卡洛积分，实现渲染方程中的积分</h3><p><img src="/images/AssetMarkdown/image-20230323224040938.png" alt="image-20230323224040938" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230323224120396.png" alt="image-20230323224120396" style="zoom:80%;" /></p><h4 id="直接光照">16.3.2.1 直接光照</h4><p><strong>shade(p, ω<sub>o</sub>)</strong></p><ol type="1"><li>随机选择<strong>N</strong>个方向，N的分布满足某一种PDF</li><li><strong>L<sub>o</sub></strong>初始化为0.0</li><li>对于每一个方向<strong>ω<sub>i</sub></strong><ol type="1"><li>追踪光线<strong>r(p, ω<sub>i</sub>)</strong></li><li>如果光线<strong>r</strong>击中了光源<ol type="1"><li><strong>L<sub>o</sub> += (1/N) * L<sub>i</sub> * f<sub>r</sub> * cosθ / PDF(ω<sub>i</sub>)</strong></li></ol></li></ol></li><li>返回<strong>L<sub>o</sub></strong></li></ol><h4 id="间接光照">16.3.2.2 间接光照</h4><blockquote><p>相当于从P点看Q点的直接光照</p></blockquote><p><strong>shade(p, ω<sub>o</sub>)</strong></p><ol type="1"><li>随机选择<strong>N</strong>个方向，N的分布满足某一种PDF</li><li><strong>L<sub>o</sub></strong>初始化为0.0</li><li>对于每一个方向<strong>ω<sub>i</sub></strong><ol type="1"><li>追踪光线<strong>r(p,ω<sub>i</sub>)</strong>（p点发出，方向为ω<sub>i</sub>）</li><li>如果光线<strong>r</strong>击中了光源<ol type="1"><li><strong>L<sub>o</sub> += (1/N) * L<sub>i</sub> * f<sub>r</sub> * cosθ / PDF(ω<sub>i</sub>)</strong></li></ol></li><li>如果光线<strong>r</strong>击中了物体，且物体位于<strong>q</strong><ol type="1"><li><strong>L<sub>o</sub> += (1/N) * shade(q, -ω<sub>i</sub>) *f<sub>r</sub> * cos θ / PDF(ω<sub>i</sub>)</strong></li></ol></li></ol></li><li>返回<strong>L<sub>o</sub></strong></li></ol><p><img src="/images/AssetMarkdown/image-20230323224729779.png" alt="image-20230323224729779" style="zoom:80%;" /></p><h2 id="路径追踪解决光线数量爆炸">16.4 路径追踪：解决光线数量爆炸</h2><blockquote><p>问题：光线的数量会爆炸：光线数量 = N <sup>反射次数</sup>，只有当N =1时，才不会指数爆炸 ==&gt; 路径追踪</p></blockquote><p><img src="/images/AssetMarkdown/image-20230323225058558.png" alt="image-20230323225058558" style="zoom:80%;" /></p><h3 id="每一个着色点只使用1根光线进行追踪">16.4.1每一个着色点，只使用1根光线进行追踪</h3><p><strong>shade(p, ω<sub>o</sub>)</strong></p><ol type="1"><li>随机选择<strong>1</strong>个方向<strong>ω<sub>i</sub></strong>，ω<sub>i</sub>的分布满足某一种PDF</li><li>追踪光线<strong>r(p,ω<sub>i</sub>)</strong>（p点发出，方向为ω<sub>i</sub>）</li><li>如果光线<strong>r</strong>击中了光源<ol type="1"><li>返回 <strong>L<sub>o</sub> = L<sub>i</sub> * f<sub>r</sub> * cos θ /PDF(ω<sub>i</sub>)</strong></li></ol></li><li>如果光线<strong>r</strong>击中了物体，且物体位于<strong>q</strong><ol type="1"><li>返回 <strong>L<sub>o</sub> = shade(q, -ω<sub>i</sub>) *f<sub>r</sub> * cos θ / PDF(ω<sub>i</sub>)</strong></li></ol></li></ol><h3 id="解决噪声问题选择多个穿过该着色点的路径每个路径1条光线">16.4.2解决噪声问题：选择多个穿过该着色点的路径，每个路径1条光线</h3><p><strong>ray_generation(camPos, pixel)</strong></p><ol type="1"><li>在该像素中，随机选择<strong>N</strong>个采样位置</li><li><strong>pixel_radiance = 0.0</strong></li><li>对于每一个采样位置<ol type="1"><li>追踪光线<strong>r(camPos, cam_to_sample)</strong></li><li>如果光线<strong>r</strong>在<strong>p</strong>点击中场景<ol type="1"><li><strong>pixel_radiance += (1/N) * shade(p,sample_to_cam)</strong></li></ol></li></ol></li><li>返回<strong>pixel_radiance</strong></li></ol><p><img src="/images/AssetMarkdown/image-20230323225611788.png" alt="image-20230323225611788" style="zoom:80%;" /></p><h3 id="解决递归无法停下问题runssian-roulette">16.4.3解决递归无法停下问题：Runssian Roulette</h3><blockquote><p>问题：<strong>shade(p,ω<sub>o</sub>)</strong>是递归定义的，可能无法停下 ==&gt;RR，一定概率停止追踪</p></blockquote><ol type="1"><li>定义一个概率<strong>P</strong></li><li><strong>P</strong>的概率，发射一个光线，并且返回<strong>L<sub>o</sub>/ P</strong></li><li><strong>1-P</strong>的概率，不发射光线，返回<strong>0</strong></li><li>最后的期望依旧为<strong>L<sub>o</sub></strong></li></ol><p><img src="/images/AssetMarkdown/image-20230323230308526.png" alt="image-20230323230308526" style="zoom:80%;" /></p><p><strong>shade(p, ω<sub>o</sub>)</strong></p><ol type="1"><li>定义概率<strong>P_RR</strong></li><li>随机生成一个在<strong>[0,1]</strong>的实数<strong>dist</strong>，如果<strong>dist&gt;P_RR</strong>，则返回<strong>0.0</strong></li><li>随机选择<strong>1</strong>个方向<strong>ω<sub>i</sub></strong>，ω<sub>i</sub>的分布满足某一种PDF</li><li>追踪光线<strong>r(p,ω<sub>i</sub>)</strong>（p点发出，方向为ω<sub>i</sub>）</li><li>如果光线<strong>r</strong>击中了光源<ol type="1"><li>返回 <strong>L<sub>o</sub> = L<sub>i</sub> * f<sub>r</sub> * cos θ /PDF(ω<sub>i</sub>) / P_RR</strong></li></ol></li><li>如果光线<strong>r</strong>击中了物体，且物体位于<strong>q</strong><ol type="1"><li>返回 <strong>L<sub>o</sub> = shade(q, -ω<sub>i</sub>) *f<sub>r</sub> * cos θ / PDF(ω<sub>i</sub>) / P_RR</strong></li></ol></li></ol><h3 id="让路径追踪变得高效对光源采样">16.4.4让路径追踪变得高效：对光源采样</h3><blockquote><p>均匀采样，导致很多光线无法打到小的光源，导致浪费计算力</p></blockquote><p><img src="/images/AssetMarkdown/image-20230323231200753.png" alt="image-20230323231200753" style="zoom:80%;" /></p><blockquote><p>对光源进行采样，然后将渲染方程修改为对光源的积分：即找到<strong>dω</strong> 与 <strong>dA</strong> 的关系</p></blockquote><p><img src="/images/AssetMarkdown/image-20230323231551425.png" alt="image-20230323231551425" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230323231600802.png" alt="image-20230323231600802" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230323231643529.png" alt="image-20230323231643529" style="zoom:80%;" /></p><blockquote><p>优化算法</p></blockquote><p>将radiance分为两个部分：</p><ol type="1"><li>来自光源的radiance：直接采样光源</li><li>其他反射光：使用RR的方法</li></ol><p><img src="/images/AssetMarkdown/image-20230323231831265.png" alt="image-20230323231831265" style="zoom:80%;" /></p><p><strong>shade(p, ω<sub>o</sub>)</strong></p><ol type="1"><li><blockquote><p>光源的贡献</p></blockquote><ol type="1"><li>均匀的对位于<strong>x'</strong>的光源进行采样，<strong>PDF_light = 1/ A</strong></li><li>从<strong>p</strong>向<strong>x'</strong>发射一条光线，如果光线不会被阻挡，则<ol type="1"><li><strong>L_dir = L<sub>i</sub> * f<sub>r</sub> * cos θ * cos θ‘ / |x'- p|<sup>2</sup> / PDF_light</strong></li></ol></li></ol></li><li><blockquote><p>其他反射光的贡献</p></blockquote><ol type="1"><li><strong>L_indir = 0.0</strong></li><li>判断是否需要采样，RR的概率为<strong>P_RR</strong></li><li>均匀的对半球进行采样，方位角为<strong>ω<sub>i</sub></strong>，<strong>PDF_hemi= 1 / 2Π</strong></li><li>追踪光线<strong>r(p,ω<sub>i</sub>)</strong>（p点发出，方向为ω<sub>i</sub>）</li><li>如果光线<strong>r</strong>击中了<strong>非发光体</strong>，且物体位于<strong>q</strong><ol type="1"><li><strong>L_indir = shade(q, -ω<sub>i</sub>) * f<sub>r</sub> * cos θ /PDF_hemi / P_RR</strong></li></ol></li></ol></li><li>返回<strong>L_dir + L_indir</strong></li></ol><h1 id="第17课-材质与外观">第17课 材质与外观</h1><h2 id="材质-brdf-btdf-bsdf">17.1 材质 == BRDF + BTDF= BSDF</h2><h3 id="漫反射材质-brdf">17.1.1 漫反射材质 BRDF</h3><ol type="1"><li>光线会被均匀的反射到每个方向</li><li>完全不吸收能量、不发光的漫反射材质：<spanclass="math inline">\(f_r=\frac{\rho}{\pi} \in[0,\frac{1}{\pi}]\)</span><ol type="1"><li>其中<span class="math inline">\(\rho \in[0,1]\)</span>，表示对光的反射率</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230324152718150.png" alt="image-20230324152718150" style="zoom:80%;" /></p><h3 id="镜面反射-brdf">17.1.2 镜面反射 BRDF</h3><ol type="1"><li>将入射光、反射光、平面放到立体角中</li><li>立体角坐标轴的Z轴方向为法线方向，XY平面为物体表面</li></ol><p><img src="/images/AssetMarkdown/image-20230322174804469.png" alt="image-20230322174804469" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230324153808848.png" alt="image-20230324153808848" style="zoom:80%;" />-</p><h3 id="折射-btdf">17.1.3 折射 BTDF</h3><ol type="1"><li>使用折射定律，算出反射角对应的<spanclass="math inline">\(\theta\)</span></li><li>然后通过方位角，求解对应向量</li></ol><p><img src="/images/AssetMarkdown/image-20230324154159876.png" alt="image-20230324154159876" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230324154758730.png" alt="image-20230324154758730" style="zoom:80%;" /></p><h3 id="菲涅尔项多少光反射多少光折射">17.1.4菲涅尔项：多少光反射，多少光折射</h3><ol type="1"><li><strong>反射率</strong>取决于<strong>入射角度</strong></li></ol><p><img src="/images/AssetMarkdown/image-20230324161453003.png" alt="image-20230324161453003" style="zoom:80%;" /></p><blockquote><p><img src="/images/AssetMarkdown/image-20230324155034305.png" alt="image-20230324155034305" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230324161318996.png" alt="image-20230324161318996" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230324161350170.png" alt="image-20230324161350170" style="zoom:80%;" /></p></blockquote><h2 id="微表面模型-microfacet-material">17.2 微表面模型 MicrofacetMaterial</h2><ol type="1"><li>从近处看：看到几何</li><li>从远处看：看到材质、外观</li></ol><p><img src="/images/AssetMarkdown/image-20230324161736587.png" alt="image-20230324161736587" style="zoom:80%;" /></p><h3 id="微表面brdf">17.2.1 微表面BRDF</h3><ol type="1"><li>微表面都是完全的镜子，只有在镜面反射方向，才能看到反射光线</li><li>微表面的法线分布，可以表示表面的粗糙程度<ol type="1"><li>法线分布集中 &lt;=&gt; glossy</li><li>法线分布发散 &lt;=&gt; diffuse</li></ol></li><li>当光线接近平行射入表面时，微表面之间的相互遮挡较大<ol type="1"><li>称为grazing angle</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230330212241199.png" alt="image-20230330212241199" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230330212608972.png" alt="image-20230330212608972" style="zoom:80%;" /></p><h3 id="各向同性各向异性材质-isotropicanisotropic-materials">17.2.2各向同性/各向异性材质 Isotropic/Anisotropic Materials</h3><p><img src="/images/AssetMarkdown/image-20230330213918232.png" alt="image-20230330213918232" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230330214126623.png" alt="image-20230330214126623" style="zoom:80%;" /></p><h2 id="brdf的性质">17.3 BRDF的性质</h2><ol type="1"><li><p>值非负：<span class="math inline">\(f_r(\omega_i \rightarrow\omega_r) \ge 0\)</span></p></li><li><p>线性性质：<spanclass="math inline">\(L_r(p,\omega_r)=\int_{H^2}f_r(p,\omega_i\rightarrow \omega_r)L_i(p, \omega_i)cos \theta_i\d\omega_i\)</span></p><ol type="1"><li>可以分成很多块，然后相加</li></ol><p><img src="/images/AssetMarkdown/image-20230330214746731.png" alt="image-20230330214746731" style="zoom:80%;" /></p></li><li><p>可逆性：<span class="math inline">\(f_r(\omega_i \rightarrow\omega_r) = f_r(\omega_r \rightarrow \omega_i)\)</span></p><p><img src="/images/AssetMarkdown/image-20230330214759683.png" alt="image-20230330214759683" style="zoom:80%;" /></p></li><li><p>能量守恒：<span class="math inline">\(\forall \omega_r,\int_{H^2}f_r(\omega_i \rightarrow \omega_r)cos \theta_i\ d\omega_i \le1\)</span></p><ol type="1"><li>BRDF不可能让能量变多</li><li>因此，光线追踪经过很多次反射后，能量会收敛</li></ol></li><li><p>各向同性 &amp; 各向异性</p><ol type="1"><li>各向同性：<spanclass="math inline">\(f_r(\theta_i,\phi_i;\theta_r,\phi_r)=f_r(\theta_i,\theta_r,\phi_r-\phi_i)\)</span><ol type="1"><li>降低了一个维度的自由度</li></ol></li><li>考虑对称性，对于所有的BRDF：<spanclass="math inline">\(f_r(\theta_i,\theta_r,\phi_r-\phi_i)=f_r(\theta_r,\theta_i,\phi_i-\phi_r)=f_r(\theta_i,\theta_r,|\phi_r-\phi_i|)\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20230330215347624.png" alt="image-20230330215347624" style="zoom:80%;" /></p></li></ol><h2 id="测量brdf">17.4 测量BRDF</h2><ol type="1"><li>给定一个光源(入射方向)、一个摄像机(出射方向)</li><li>更改这光源和摄像机的位置，测量对应的BRDF</li><li>优化：<ol type="1"><li>对于各向同性的物体，可以通过方位角，将4D转化为3D</li><li>可逆性：降低了一半的测量次数</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230330215511604.png" alt="image-20230330215511604" style="zoom: 80%;" /></p><h2 id="保存brdf">17.5 保存BRDF</h2><p>MERL BRDF Database：</p><ol type="1"><li>测量了很多不同的材质</li><li>保存为三维数组</li></ol><p><img src="/images/AssetMarkdown/image-20230330220014005.png" alt="image-20230330220014005" style="zoom:80%;" /></p><h1 id="第18课-高级渲染">第18课 高级渲染</h1><h2 id="高级光线传播">18.1 高级光线传播</h2><h3 id="无偏-有偏-蒙特卡洛估计">18.1.1 无偏 &amp; 有偏 蒙特卡洛估计</h3><ol type="1"><li>无偏：不论样本数是多少，估计值的期望总是正确的</li><li>有偏：期望和正确值不一样；但是样本数足够多时，会收敛到正确值<strong>consistency</strong><ol type="1"><li>有偏 = 模糊</li><li>一致性 = 样本足够多时可以收敛到不模糊</li></ol></li></ol><h3 id="双向路径追踪-bdpt">18.1.2 双向路径追踪 BDPT</h3><ol type="1"><li>从光源、观察点开始，分别生成两个不同的半路径</li><li>将半路径的端点连起来</li><li>缺点：渲染速度慢</li></ol><p><img src="/images/AssetMarkdown/image-20230330220720680.png" alt="image-20230330220720680" style="zoom:80%;" /></p><blockquote><p>对于间接光较多的场景，双向路径追踪效果更好</p></blockquote><p><img src="/images/AssetMarkdown/image-20230330220814339.png" alt="image-20230330220814339" style="zoom:80%;" /></p><h3 id="metropolis光线传播-mlt">18.1.3 Metropolis光线传播 MLT</h3><ol type="1"><li>用马尔科夫链进行采样<ol type="1"><li>马尔科夫链：当前有一个样本，返回一个与之接近的样本</li><li>优点：可以生成一个样本分布与与任意函数形状一致的PDF</li></ol></li><li>给任意一个路径，可以生成与之相似的路径：是一个局部的方法</li></ol><p><img src="/images/AssetMarkdown/image-20230330221257024.png" alt="image-20230330221257024" style="zoom:80%;" /></p><blockquote><p>适用于做困难的路径传播，因为可以由一条较好的路径开始，找到更多的路径</p><p><img src="/images/AssetMarkdown/image-20230330221447583.png" alt="image-20230330221447583" style="zoom:80%;" /></p><p>缺点：</p><ol type="1"><li>难以在理论上计算收敛的速度</li><li>所有操作都是局部的，有的像素快，有的像素满，会很"脏"</li><li>难以用于动画的渲染</li></ol><p><img src="/images/AssetMarkdown/image-20230330222050918.png" alt="image-20230330222050918" style="zoom:80%;" /></p></blockquote><h3 id="光子映射-photon-mapping">18.1.4 光子映射 Photon Mapping</h3><ol type="1"><li><p>适用于渲染SDS(Specular-Diffuse-Specular)路径、生成caustics</p><ol type="1"><li>caustics：由于光线的聚焦产生的非常强的高亮图案</li></ol><p><img src="/images/AssetMarkdown/image-20230330222033557.png" alt="image-20230330222033557" style="zoom:80%;" /></p></li><li><p>分为两步：</p><ol type="1"><li>从光源开始，辐射光子，直到光子打到diffuse表面，将结果记录下来</li><li>从摄像机开始，发射半路径，直到路径打到diffuse表面上</li><li>计算局部密度估计 local density estimation：<ol type="1"><li>对任何一个着色点，取最近的n个光子，计算这n个光子占据的面积，计算其密度</li><li>n较少时，噪声大；n较大时，会模糊</li></ol></li></ol></li><li><p>有偏估计：</p><ol type="1"><li>因为dN / dA != ΔN / ΔA，只有ΔA很小时才接近dA</li><li>光子越多，找n个光子占据的面积越小，就更接近正确结果</li><li>不能确定ΔA，增加光子，因为ΔA永远不会接近dA</li></ol></li></ol><h3 id="vertex-connection-and-merging">18.1.5 Vertex Connection andMerging</h3><ol type="1"><li>将BDPT和光子映射结合起来</li><li>使用BDPT生成两段sub-path</li><li>如果有两段sub-path的终点非常接近，则使用光子映射计算其贡献</li></ol><p><img src="/images/AssetMarkdown/image-20230330223206732.png" alt="image-20230330223206732" style="zoom: 80%;" /></p><h3 id="实时辐射度-instant-radiosity">18.1.6 实时辐射度 InstantRadiosity</h3><ol type="1"><li>已经被照亮的地方，认为是光源，照亮别的地方<ol type="1"><li>从光源开始发射sub-path，停在某些地方，形成新的光源VPL(Virtual PointLight)</li><li>用新的光源照亮着色点</li></ol></li><li>优点：快，并且效果较好</li><li>缺点：<ol type="1"><li>在缝隙处会出现问题</li><li>不能做glossy物体</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230330223358225.png" alt="image-20230330223358225" style="zoom:80%;" /></p><h2 id="高级外观建模">18.2 高级外观建模</h2><p>外观 == 材质 == BRDF</p><h3 id="非表面模型云-烟雾等">18.2.1 非表面模型：云、 烟、雾等</h3><p><strong>Participating Media</strong>：参与介质</p><p><img src="/images/AssetMarkdown/image-20230330224145788.png" alt="image-20230330224145788" style="zoom:80%;" /></p><p><strong>Phase Function</strong>：相位函数，规定光线如何散射</p><p><img src="/images/AssetMarkdown/image-20230330224250395.png" alt="image-20230330224250395" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230330224330452.png" alt="image-20230330224330452" style="zoom:80%;" /></p><h3 id="头发表面">18.2.2 头发表面</h3><p>会有两种高光：有色、无色</p><p><strong>Kajiya-Kay模型</strong>：光线打到圆柱上，会反射为圆锥</p><p><img src="/images/AssetMarkdown/image-20230330224648071.png" alt="image-20230330224648071" style="zoom:80%;" /></p><p><strong>Marschner模型</strong>：光线打到圆柱上，一部分会反射为圆锥，一部分会穿进去</p><ol type="1"><li><strong>R</strong>：直接反射</li><li><strong>TT</strong>：穿进头发，然后再穿出来</li><li><strong>TRT</strong>：穿进头发，发生反射，然后再穿出来</li><li>定义光线和一根圆柱如何作用：R、TT、TRT</li><li>根据光线传播，计算和多个头发的作用</li></ol><p><img src="/images/AssetMarkdown/image-20230330224739393.png" alt="image-20230330224739393" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230330225204954.png" alt="image-20230330225204954" style="zoom:80%;" /></p><p><strong>Double Cylinder Model</strong>：增加一个圆柱，模拟髓质</p><p><img src="/images/AssetMarkdown/image-20230330225312464.png" alt="image-20230330225312464" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230330225323075.png" alt="image-20230330225323075" style="zoom:80%;" /></p><h3 id="颗粒材质granular">18.2.3 颗粒材质：Granular</h3><ol type="1"><li><p>由很多小石子构成的模型</p><p><img src="/images/AssetMarkdown/image-20230330225609403.png" alt="image-20230330225609403" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230330225635165.png" alt="image-20230330225635165" style="zoom:80%;" /></p></li></ol><h3 id="表面模型次表面散射-bssrdf">18.2.4 表面模型：次表面散射BSSRDF</h3><p><strong>Translucent</strong>：光线从一个点进入表面，在物体内发生了一系列散射，然后再从另一个点钻出表面</p><p><img src="/images/AssetMarkdown/image-20230330225827858.png" alt="image-20230330225827858" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230330225950269.png" alt="image-20230330225950269" style="zoom:80%;" /></p><p><strong>Dipole</strong>近似：在物体上下添加两个光源，模拟次表面反射的效果</p><p><img src="/images/AssetMarkdown/image-20230330230124438.png" alt="image-20230330230124438" style="zoom:80%;" /></p><h3 id="布料">18.2.5 布料</h3><p>布料的定义</p><ol type="1"><li>纤维的集合 fiber</li><li>纤维缠绕，可以得到不同的股 Ply</li><li>股绕在一起，可以得到线 Yarn</li><li>线织成布 cloth</li></ol><p><img src="/images/AssetMarkdown/image-20230330230502109.png" alt="image-20230330230502109" style="zoom:80%;" /></p><p>将布料当作物体表面，使用<strong>BRDF</strong>渲染</p><p><img src="/images/AssetMarkdown/image-20230330230747552.png" alt="image-20230330230747552" style="zoom:80%;" /></p><p>将布料划分为很小的块，作为<strong>散射介质</strong>渲染</p><p><img src="/images/AssetMarkdown/image-20230330230632698.png" alt="image-20230330230632698" style="zoom:80%;" /></p><p>将布料划分为很多个线，类似<strong>头发模型</strong>渲染</p><p><img src="/images/AssetMarkdown/image-20230330230810766.png" alt="image-20230330230810766" style="zoom:80%;" /></p><h2 id="通过修改微表面法线分布得到不同的效果">18.3通过修改微表面法线分布，得到不同的效果</h2><p><img src="/images/AssetMarkdown/image-20230330231505492.png" alt="image-20230330231505492" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230330231516015.png" alt="image-20230330231516015" style="zoom:80%;" /></p><h3 id="对一个区域内的微表面进行积分">18.3.1对一个区域内的微表面进行积分</h3><p><img src="/images/AssetMarkdown/image-20230330231534136.png" alt="image-20230330231534136" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230330231544316.png" alt="image-20230330231544316" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230330231601075.png" alt="image-20230330231601075" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230330231611914.png" alt="image-20230330231611914" style="zoom:80%;" /></p><h3 id="波动光学与几何光学得到的ndf">18.3.2波动光学与几何光学得到的NDF</h3><p><img src="/images/AssetMarkdown/image-20230330231719561.png" alt="image-20230330231719561" style="zoom:80%;" /></p><h2 id="程序化生成表面">18.4 程序化生成表面</h2><ol type="1"><li>定义在空间中的函数，可以在使用的时候，查询空间中的某个点的值，而不是将三维纹理存储下来，<strong>噪声函数</strong></li></ol><p><img src="/images/AssetMarkdown/image-20230330231937462.png" alt="image-20230330231937462" style="zoom:80%;" /></p><h1 id="第19课-相机透镜光场">第19课 相机&amp;透镜&amp;光场</h1><h2 id="相机">19.1 相机</h2><p>快门：控制光在某个极短时间内进入相机</p><p>传感器：将光的信息记录下来，只能记录Irradiance，不能记录radiance，因此需要小孔/棱镜成像</p><p><img src="/images/AssetMarkdown/image-20230331150921690.png" alt="image-20230331150921690" style="zoom:80%;" /></p><h3 id="针孔相机">19.1.1 针孔相机</h3><ol type="1"><li>没有景深的效果，不会模糊</li></ol><h3 id="基础概念">19.1.2 基础概念</h3><h4 id="视场-fov">19.1.2.1 视场 FOV</h4><p><strong>FOV</strong>：视场</p><ol type="1"><li>传感器高度：<strong>h</strong></li><li>传感器到小孔的距离：<strong>焦距f</strong></li><li>焦距越大，视场越大</li><li>传感器越小，视场越小</li></ol><p><img src="/images/AssetMarkdown/image-20230331151043290.png" alt="image-20230331151043290" style="zoom:80%;" /></p><blockquote><p>以<strong>35mm格式</strong>的胶片为标准，通过更改<strong>焦距f</strong>，定义视场</p><ol type="1"><li>也就是确定了传感器高度<strong>h</strong></li><li>通常说的是等效到35mm格式，而不是传感器就是35mm</li></ol></blockquote><p><img src="/images/AssetMarkdown/image-20230331151357618.png" alt="image-20230331151357618" style="zoom:80%;" /></p><p>传感器sensor和胶片film可以不一样，但可以当作是一样的</p><ol type="1"><li>传感器：接收到了具体信息</li><li>胶片：最后呈现的效果</li></ol><blockquote><p>小的传感器 + 小焦距，可以得到相同的视场</p></blockquote><p><img src="/images/AssetMarkdown/image-20230331151711271.png" alt="image-20230331151711271" style="zoom:80%;" /></p><h4 id="曝光度-exposure">19.1.2.2 曝光度 Exposure</h4><p><strong>Exposure = 时间(T) × Irradiance(E)</strong></p><ol type="1"><li>时间越长、单位时间内接收到的能量越多，最后的曝光度越大</li><li>曝光度记录的是energy，而不是power</li><li>时间：由快门控制</li><li>Irradiance：由很多因素决定，如光圈</li></ol><h4 id="影响曝光度的因素光圈快门iso">19.1.2.3影响曝光度的因素：光圈&amp;快门&amp;ISO</h4><ol type="1"><li>光圈<strong>ApertureSize</strong>：用<strong><code>FN</code>或<code>F/N</code></strong>表示<ol type="1"><li>模拟人的瞳孔，通过<strong>F-stop/F-number</strong>控制开关</li><li><strong>N</strong>对应光圈半径的倒数</li><li><strong>光圈越大，越亮，但是远的部分越模糊</strong></li><li>如果要考虑景深，光圈就应该小，图像就会暗，因此就需要更长的快门时间，从而无法考虑运动模糊的问题</li></ol></li><li>快门<strong>Shutter speed</strong>：用分数表示<ol type="1"><li>控制记录的时间</li><li><strong>时间越长，越模糊</strong></li><li>因为存在运动模糊效果：对快门时间内记录到的所有信息做了一个平均</li><li>相当于在时间上采样时，做了一个模糊效果</li><li><strong>Rollingshutter</strong>：对于高速运动的物体，可能会出现扭曲的现象</li></ol></li><li>感光度<strong>ISO gain</strong>：用ISOxx表示<ol type="1"><li>类似于后期处理，对接收到的光乘上某个数</li><li>可以发生在硬件上，也可以发生在软件上</li><li><strong>ISO越大，越亮，但是噪声也越大</strong></li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20230331152235235.png" alt="image-20230331152235235" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230331153511790.png" alt="image-20230331153511790" style="zoom:80%;" /></p><h4 id="高速低速摄影">19.1.2.4 高速/低速摄影</h4><p><strong>高速摄影</strong></p><ol type="1"><li>即每秒钟要拍更多的照片</li><li>快门时间变短，同时需要更大的光圈</li></ol><p><strong>低速摄影/延迟摄影</strong></p><ol type="1"><li>即每秒钟要拍更少的照片</li><li>快门时间变长，就是需要运动模糊</li></ol><h2 id="薄透镜近似">19.2 薄透镜近似</h2><h3 id="理想化薄透镜">19.2.1 理想化薄透镜</h3><ol type="1"><li>平行光可以汇聚到焦点上，过交点可以发散为平行光</li><li>过中心不改变光路</li><li>可以任意更改焦距：通过透镜组，动态改变焦距</li></ol><p><img src="/images/AssetMarkdown/image-20230331154506466.png" alt="image-20230331154506466" style="zoom:80%;" /></p><h3 id="焦散模糊-defocus-blur">19.2.2 焦散模糊 Defocus Blur</h3><p><strong>CoC</strong>：Circle of Confusion</p><ol type="1"><li>当感光器在成像点后面时，会导致成像为一个圆</li><li>光圈越大，CoC越大</li></ol><p><img src="/images/AssetMarkdown/image-20230331155356722.png" alt="image-20230331155356722" style="zoom:80%;" /></p><h3 id="f-number的定义">19.2.3 F-Number的定义</h3><ol type="1"><li>F-Number = 焦距 / 光圈直径</li><li>拍的更清楚 =&gt; 使用小光圈</li></ol><p><img src="/images/AssetMarkdown/image-20230331155149689.png" alt="image-20230331155149689" style="zoom:80%;" /></p><h2 id="光线追踪模拟薄透镜">19.3 光线追踪模拟薄透镜</h2><h3 id="定义-3">19.3.1 定义</h3><ol type="1"><li>感光器的大小</li><li>焦距、光圈大小</li><li>物体与棱镜的距离，即物距<strong>z<sub>o</sub></strong></li></ol><p><img src="/images/AssetMarkdown/image-20230331155614225.png" alt="image-20230331155614225" style="zoom:80%;" /></p><h3 id="渲染方式">19.3.2 渲染方式</h3><ol type="1"><li>在感光元件上选一个点<strong>x'</strong></li><li>在透镜上选另一个点<strong>x''</strong></li><li>连接<strong>x'</strong>和<strong>x''</strong>，可以得到通过该透镜后的光线<strong>x''→x'''</strong></li><li>考虑<strong>x''→x'''</strong>的Radiance，记录到<strong>x'</strong>上即可</li></ol><h2 id="景深-depth-of-fielddf-dn">19.4 景深 Depth ofField：D<sub>F</sub> ~ D<sub>N</sub></h2><ol type="1"><li>用不同的光圈，会影响模糊的范围</li><li>在<strong>实际场景</strong>中有<strong>一段深度(景深)</strong>，这段通过透镜，会在成像区域附近形成一个区域，我们认为这个区域内的CoC都是足够小的</li><li>这段深度内的像素，认为均是锐利的，即不模糊的</li></ol><p><img src="/images/AssetMarkdown/image-20230331160147996.png" alt="image-20230331160147996" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230331161005848.png" alt="image-20230331161005848" style="zoom:80%;" /></p><h2 id="光场-light-field-lumigraph">19.5 光场 Light Field /Lumigraph</h2><h3 id="全光函数-plenoptic-function">19.5.1 全光函数 PlenopticFunction</h3><h4 id="grayscale-snapshotpθ-φ">19.5.1.1 Grayscale snapshot：P(θ,Φ)</h4><ol type="1"><li>定义了在一个固定地方，向任意一个<strong>方向(θ,Φ)</strong>看，能够看到的亮度值</li></ol><h4 id="color-snapshotpθ-φ-λ">19.5.1.2 Color snapshot：P(θ, Φ, λ)</h4><ol type="1"><li>定义了在一个固定地方，向任意一个<strong>方向(θ,Φ)</strong>看，能够看到的<strong>波长为λ</strong>的亮度值</li></ol><h4 id="moviepθ-φ-λ-t">19.5.1.3 Movie：P(θ, Φ, λ, t)</h4><ol type="1"><li>定义了在一个固定地方，在某个<strong>时间t</strong>，向任意一个<strong>方向(θ,Φ)</strong>看，能够看到的<strong>波长为λ</strong>的亮度值</li><li>即电影</li></ol><h4 id="holographic-moviepθ-φ-λ-t-vx-vy-vz">19.5.1.4 HolographicMovie：P(θ, Φ, λ, t, V<sub>X</sub>, V<sub>Y</sub>, V<sub>Z</sub>)</h4><ol type="1"><li>定义了在某个<strong>位置(V<sub>X</sub>, V<sub>Y</sub>,V<sub>Z</sub>)</strong>，在某个<strong>时间t</strong>，向任意一个<strong>方向(θ,Φ)</strong>看，能够看到的<strong>波长为λ</strong>的亮度值</li><li>即全息电影</li></ol><h4 id="plenoptic-functionpθ-φ-λ-t-vx-vy-vz">19.5.1.5 PlenopticFunction：P(θ, Φ, λ, t, V<sub>X</sub>, V<sub>Y</sub>,V<sub>Z</sub>)</h4><ol type="1"><li>在任何<strong>时间t</strong>、任何<strong>地点V</strong>、向任何<strong>方向(θ,Φ)</strong>看，所能看到的所有的<strong>光λ</strong></li><li>是一个七维函数</li></ol><h3 id="光线的定义">19.5.2 光线的定义</h3><p>5个维度：<strong>P(θ, Φ, V<sub>X</sub>, V<sub>Y</sub>,V<sub>Z</sub>)</strong></p><ol type="1"><li>3个维度的坐标</li><li>2个维度的方向</li></ol><p><img src="/images/AssetMarkdown/image-20230331162624696.png" alt="image-20230331162624696" style="zoom:80%;" /></p><p>4个维度：</p><ol type="1"><li>2维的位置：<strong>(u, v)</strong></li><li>2维的方向：<strong>(θ, Φ)</strong></li></ol><p><img src="/images/AssetMarkdown/image-20230331162633863.png" alt="image-20230331162633863" style="zoom:80%;" /></p><h3 id="全光表面-plenoptic-surface">19.5.3 全光表面 PlenopticSurface</h3><p><img src="/images/AssetMarkdown/image-20230331162812295.png" alt="image-20230331162812295" style="zoom:80%;" /></p><p>光场：任何一个位置，往任何一个方向去的光的强度</p><ol type="1"><li>在表面的位置：<strong>(u, v)</strong></li><li>方向：<strong>(θ, Φ)</strong></li><li>从任意一个位置，往任意一个方向看，都看到该光场的强度</li></ol><h3 id="光场">19.5.4 光场</h3><p>不需要直到物体具体是什么，只需要直到<strong>包围盒外</strong>的光场信息</p><p><img src="/images/AssetMarkdown/image-20230331163303962.png" alt="image-20230331163303962" style="zoom:80%;" /></p><h3 id="lumigraph-organization">19.5.5 Lumigraph-Organization</h3><p>取一个平面，只需要直到该平面上任何一个位置，往任何一个方向去的光的强度</p><p><img src="/images/AssetMarkdown/image-20230331163416657.png" alt="image-20230331163416657" style="zoom:80%;" /></p><p>也可以定义两个平面<strong>(u,v) &amp; (s,t)</strong>，定义该光线</p><p><img src="/images/AssetMarkdown/image-20230331163525401.png" alt="image-20230331163525401" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230331164408327.png" alt="image-20230331164408327" style="zoom:80%;" /></p><blockquote><p><img src="/images/AssetMarkdown/image-20230331164514848.png" alt="image-20230331164514848" style="zoom:80%;" /></p></blockquote><h1 id="第20课-颜色与视觉">第20课 颜色与视觉</h1><h1 id="第21课-动画模拟仿真">第21课 动画/模拟/仿真</h1><h2 id="关键帧动画">21.1 关键帧动画</h2><ol type="1"><li>给定一系列关键的帧，通过<strong>插值</strong>，将中间的帧补全</li></ol><p><img src="/images/AssetMarkdown/image-20230406213305918.png" alt="image-20230406213305918" style="zoom:80%;" /></p><h2 id="物理模拟">21.2 物理模拟</h2><ol type="1"><li>建立物理模型，解某个时刻对应的方程</li></ol><p><img src="/images/AssetMarkdown/image-20230406213618926.png" alt="image-20230406213618926" style="zoom:80%;" /></p><h3 id="质点弹簧系统-mass-spring-system">21.2.1 质点弹簧系统 Mass SpringSystem</h3><ol type="1"><li>是一系列相互连接的质点和弹簧</li></ol><h4 id="理想弹簧">21.2.1.1 理想弹簧</h4><ol type="1"><li>弹簧没有长度，弹簧的力只与其被拉伸的长度有关</li><li><span class="math inline">\(k_s\)</span>：劲度系数</li></ol><p><img src="/images/AssetMarkdown/image-20230406214224321.png" alt="image-20230406214224321" style="zoom:80%;" /></p><h4 id="非零长度弹簧">21.2.1.2 非零长度弹簧</h4><ol type="1"><li>在理想弹簧的基础上，弹簧的初始长度为<spanclass="math inline">\(l\)</span></li><li>问题：由于动能和弹性势能的相互转换，弹簧会永远震动下去</li></ol><p><img src="/images/AssetMarkdown/image-20230406214307106.png" alt="image-20230406214307106" style="zoom:80%;" /></p><h4 id="添加能量流失">21.2.1.3 添加能量流失</h4><ol type="1"><li>在非零长度弹簧的基础上，添加一个摩擦力<spanclass="math inline">\(f=-k_d\dot b\)</span>，使弹簧能够停下来</li><li><span class="math inline">\(k_d\)</span>：阻尼系数 dampingcoefficient</li><li>问题：只能表示弹簧整体的能量损耗，不能表示弹簧内部的能量损耗</li></ol><p><img src="/images/AssetMarkdown/image-20230406215157003.png" alt="image-20230406215157003" style="zoom:80%;" /></p><h4 id="添加内部阻尼">21.2.1.4 添加内部阻尼</h4><ol type="1"><li>在上述弹簧的基础上，添加内部阻尼，以让弹簧能够恢复原样<ol type="1"><li>相对速度的投影：分解到沿着ab方向的速度，只有这个速度会让弹簧产生形变</li></ol></li><li>内部阻尼与弹簧的直接形变没有关系，只与ab的相对速度有关系</li></ol><p><img src="/images/AssetMarkdown/image-20230406215514210.png" alt="image-20230406215514210" style="zoom:80%;" /></p><h4 id="弹簧的结构">21.2.1.5 弹簧的结构</h4><p>用网格结构的弹簧模拟布料</p><ol type="1"><li>无法抵抗切变的力：从</li><li>无法抵抗out-of-plane的力</li></ol><p><img src="/images/AssetMarkdown/image-20230406215820111.png" alt="image-20230406215820111" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20230406220402457.png" alt="image-20230406220402457" style="zoom:80%;" /></p><blockquote><p>添加两个方向的对角线方向的弹簧，抵抗切变的力：</p><ol type="1"><li>当从两端拉弹簧时，对角线上的弹簧会被压缩，从而产生抵抗切变的力</li></ol></blockquote><p><img src="/images/AssetMarkdown/image-20230406220645857.png" alt="image-20230406220645857" style="zoom:80%;" /></p>]]></content>
      
      
      <categories>
          
          <category> GAMES系列课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAMES系列课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2023/02/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/02/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript"src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="chapter-1计算机网络的概念">Chapter 1：计算机网络的概念</h1><h2 id="概念组成功能分类">1.1 概念、组成、功能、分类</h2><h3 id="计算机网络的概念">1.1.1 计算机网络的概念</h3><ol type="1"><li><strong>计算机网络</strong>：是一个将分散的、具有独立功能的<strong>计算机系统</strong>，通过<strong>通信设备</strong>与<strong>线路</strong>连接起来，由功能完善的<strong>软件</strong>实现<strong>资源共享</strong>和<strong>信息传递</strong>的系统</li><li>计算机网络是<strong>互连</strong>的、<strong>自治</strong>的计算机集合<ol type="1"><li>互联：互连互通，使用通信链路</li><li>自治：无主从关系</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221108140214225.png" alt="image-20221108140214225" style="zoom: 67%;" /></p><h3 id="计算机网络的功能">1.1.2 计算机网络的功能</h3><ol type="1"><li><strong>数据通信</strong>：连通性</li><li><strong>资源共享</strong>：硬件、软件、数据</li><li>分布式处理：多台计算机各自承担同一工作任务的不同部分</li><li>提高可靠性：一台计算机宕机了，可以由另一台计算机替代它</li><li>负载均衡：多台计算机相互配合</li></ol><h3 id="计算机网络的组成">1.1.3 计算机网络的组成</h3><ol type="1"><li><p>组成部分：硬件、软件、协议</p></li><li><p><strong>工作方式</strong>：</p><ol type="1"><li>边缘部分：主机所在的部分，用户可以直接使用<ol type="1"><li><p>C/S方式</p><p><img src="/images/AssetMarkdown/image-20221231152632850.png" alt="image-20221231152632850" style="zoom:80%;" /></p></li><li><p>P2P方式</p><p><img src="/images/AssetMarkdown/image-20221231152643718.png" alt="image-20221231152643718" style="zoom:80%;" /></p></li></ol></li><li>核心部分：为边缘部分服务</li></ol><p><img src="/images/AssetMarkdown/image-20221108140609953.png" alt="image-20221108140609953" style="zoom: 67%;" /></p></li><li><p><strong>功能组成</strong></p><ol type="1"><li>通信子网：实现数据通信</li><li>资源子网：实现资源共享、数据处理</li></ol><p><img src="/images/AssetMarkdown/image-20221108140715884.png" alt="image-20221108140715884" style="zoom: 67%;" /></p></li></ol><h3 id="计算机网络的分类">1.1.4 计算机网络的分类</h3><ol type="1"><li><p>按分布范围分：</p><ol type="1"><li>广域网WAN：交换技术</li><li>城域网MAN</li><li>局域网WAN</li><li>个人区域网PAN：广播技术</li></ol></li><li><p>按使用者分：</p><ol type="1"><li>公用网：交钱就能进，如电信网</li><li>专用网：必须有特殊身份，如军队使用的网络</li></ol></li><li><p>按交换技术分：</p><ol type="1"><li>电路交换</li><li>报文交换</li><li>分组交换</li></ol></li><li><p>按拓扑结构分：</p><ol type="1"><li>总线型</li><li>星型</li><li>环型</li><li>网状型</li></ol><p><img src="/images/AssetMarkdown/image-20221108141011216.png" alt="image-20221108141011216" style="zoom:67%;" /></p></li><li><p>按传输技术分：</p><ol type="1"><li>广播式网络：共享公共通信信道</li><li>点对点网络：使用分组存储转发、路由选择的机制</li></ol></li></ol><h3 id="总结">1.1.5 总结</h3><p><img src="/images/AssetMarkdown/image-20221108141244410.png" alt="image-20221108141244410" style="zoom:80%;" /></p><h2 id="标准化工作及相关组织">1.2 标准化工作及相关组织</h2><h3 id="标准的分类">1.2.1 标准的分类</h3><ol type="1"><li>法定标准<ol type="1"><li>由权威机构制定的、正式的、合法的标准</li><li>如：OSI</li></ol></li><li>事实标准<ol type="1"><li>某些公司的产品在竞争中占据了主流，时间长了，这些产品中的技术和协议就成了标准</li><li>如：TCP/IP</li></ol></li></ol><h3 id="rfc">1.2.2 RFC</h3><ol type="1"><li>RFC：Request For Comments，是因特网标准的形式</li><li>RFC上升为因特网正式标准的四个阶段<ol type="1"><li>因特网草案(Internet Draft)：这个阶段还不是RFC文档</li><li>建议标准(Proposed Standard)：从这个阶段开始成为RFC文档</li><li>草案标准(Draft Standard)：交给IEFT、IAB进行审核</li><li>因特网标准(Internet Standard)：审核通过后，就成为因特网标准</li></ol></li></ol><h3 id="标准化工作的相关组织">1.2.3 标准化工作的相关组织</h3><ol type="1"><li><strong>国际标准化组织ISO</strong>：<ol type="1"><li>OSI参考模型，HDLC协议</li></ol></li><li>国际电信联盟ITU：<ol type="1"><li>制定通信规则</li></ol></li><li>电气电子工程师学会IEEE：<ol type="1"><li>学术机构、IEEE802系列标准、5G</li></ol></li><li>Internet工程任务组IETF：<ol type="1"><li>负责因特网相关标准的制定</li></ol></li></ol><h3 id="总结-1">1.2.4 总结</h3><p><img src="/images/AssetMarkdown/image-20221108142307828.png" alt="image-20221108142307828" style="zoom:80%;" /></p><h2 id="速率相关的性能指标">1.3 速率相关的性能指标</h2><h3 id="速率">1.3.1 速率</h3><ol type="1"><li><p>速率、<strong>数据率</strong>、<strong>数据传输速率</strong>、<strong>比特率</strong></p><ol type="1"><li>连接在计算机网络上的主机在数字信道上传送<strong>数据位数的速率</strong></li><li>单位：b/s, kb/s, Mb/s, Gb/s, Tb/s，依次递增10<sup>3</sup></li></ol><p><img src="/images/AssetMarkdown/image-20221108142711478.png" alt="image-20221108142711478" style="zoom:80%;" /></p></li></ol><h3 id="带宽">1.3.2 带宽</h3><ol type="1"><li><p>带宽：单位时间内，从网络中某一点到另一点所能通过的<strong>最高数据率</strong></p><ol type="1"><li>网络设备所能支持的最高速度</li><li>单位：b/s, kb/s, Mb/s, Gb/s</li></ol></li><li><p>带宽是链路的发送端发送数据的速率</p><ol type="1"><li>传播速率一般都是2×10<sup>8</sup> m/s</li></ol></li><li><p>带宽变大，会使链路发送数据的速率变大，但是不会影响数据传播的速率</p><p><img src="/images/AssetMarkdown/image-20221108143352010.png" alt="image-20221108143352010" style="zoom:80%;" /></p></li></ol><h3 id="吞吐量">1.3.3 吞吐量</h3><ol type="1"><li><p>吞吐量：单位时间内，通过<strong>某个网络(/信道/接口)</strong>的数据量</p><ol type="1"><li>单位：b/s, kb/s, Mb/s</li></ol></li><li><p>吞吐量受网络的带宽、网络的额定速率的限制</p><ol type="1"><li>链路带宽：理想情况下，接收方接受数据的最高速率</li><li>吞吐量：多个发送方发来数据的速率之和，一般小于链路带宽</li></ol><p><img src="/images/AssetMarkdown/image-20221108143744006.png" alt="image-20221108143744006" style="zoom:67%;" /></p></li></ol><h2 id="时延时延带宽积rtt利用率">1.4 时延、时延带宽积、RTT、利用率</h2><h3 id="时延">1.4.1 时延</h3><p>时延：数据从网络的一端传送到另一端所需的时间，也叫延迟/迟延，单位是s</p><ol type="1"><li><p>发送时延(传输时延)：</p><ol type="1"><li>从发送分组的第一个bit算起，到该分组的最后一个bit发送完毕的所需时间</li><li><span class="math inline">\(发送时延 =\frac{数据长度}{信道带宽(发送速率)}\)</span></li><li>发生在<strong>主机</strong>内</li><li>高速链路：提高了信道带宽(发送速率)</li></ol><p><img src="/images/AssetMarkdown/image-20221109132505719.png" alt="image-20221109132505719" style="zoom:80%;" /></p></li><li><p>传播时延：</p><ol type="1"><li>电磁波在信道上传播一定距离所需的时间</li><li><span class="math inline">\(传播时延 =\frac{信道长度}{电磁波在信道上的传播速率}\)</span></li><li>发生在<strong>信道</strong>上</li></ol><p><img src="/images/AssetMarkdown/image-20221109132649076.png" alt="image-20221109132649076" style="zoom:80%;" /></p></li><li><p>排队时延：</p><ol type="1"><li>等待输出/入链路所需的时间</li><li>发生在<strong>路由器</strong>，类似过安检排队</li></ol></li><li><p>处理时延：</p><ol type="1"><li>处理数据所需的时间</li><li>发送在<strong>路由器</strong>，类似过安检时的扫描</li></ol></li></ol><h3 id="时延带宽积">1.4.2 时延带宽积</h3><ol type="1"><li><span class="math inline">\(时延带宽积 = 传播时延 ×带宽\)</span>，单位为bit</li><li>也称为：以比特为单位的链路长度，即某段线路现在有多少比特，链路容量</li></ol><p><img src="/images/AssetMarkdown/image-20221109133245849.png" alt="image-20221109133245849" style="zoom:80%;" /></p><h3 id="往返时延rtt">1.4.3 往返时延RTT</h3><ol type="1"><li><strong>RTT</strong>：从发送方发送数据开始，到发送方收到接收方的确认(接收方收到数据后立即发送确认)，总共经历的时延<ol type="1"><li>RTT越大，在收到确认之前，可发送的数据越多</li></ol></li><li><span class="math inline">\(RTT = 传播时延×2+末端处理时间\)</span><ol type="1"><li>RTT不包括发送时延(传输时延)</li></ol></li></ol><h3 id="利用率">1.4.4 利用率</h3><ol type="1"><li>信道利用率：<span class="math inline">\(信道利用率 =\frac{有数据通过的时间}{(有+无)数据通过的时间}\)</span></li><li>网络利用率：信道利用率的加权平均值</li></ol><p><img src="/images/AssetMarkdown/image-20221109133634462.png" alt="image-20221109133634462" style="zoom: 67%;" /></p><h3 id="总结-2">1.4.5 总结</h3><p><img src="/images/AssetMarkdown/image-20221109133702155.png" alt="image-20221109133702155" style="zoom:80%;" /></p><h2 id="分层结构协议接口服务">1.5 分层结构、协议、接口、服务</h2><h3 id="分层的基本原则">1.5.1 分层的基本原则</h3><ol type="1"><li>各层之间相互独立，每层只实现一种相对独立的功能</li><li>每层之间界面自然清晰，易于理解，相互交流尽可能少</li><li>结构上可分割开，每层都采用最合适的技术来实现</li><li>保持下层对上层的独立性，上层单向使用下层提供的服务</li><li>整个分层结构应该能促进标准化工作</li></ol><h3 id="概念">1.5.2 概念</h3><ol type="1"><li>实体：第n层中的活动元素称为n层实体</li><li>对等实体：同一层的实体</li><li>协议：为进行网络中的对等实体数据交换而建立的规则、标准、约定，称为网络协议【水平】<ol type="1"><li>语法：规定传输数据的格式</li><li>语义：规定所要完成的功能</li><li>同步：规定各种操作的顺序</li></ol></li><li>接口(访问服务点SAP)：上层使用下层服务的入口</li><li>服务：下层为相邻上层提供的功能调用【垂直】</li></ol><p><img src="/images/AssetMarkdown/image-20221109211117196.png" alt="image-20221109211117196" style="zoom:67%;" /></p><ol type="1"><li><strong>SDU</strong>服务数据单元：为完成用户所要求的功能而应传送的数据</li><li><strong>PCI</strong>协议控制信息：控制协议操作的信息</li><li><strong>PDU</strong>协议数据单元：对等层次之间传送的数据单位</li></ol><p><img src="/images/AssetMarkdown/image-20221109211219883.png" alt="image-20221109211219883" style="zoom: 50%;" /></p><h3 id="概念总结">1.5.3 概念总结</h3><p><img src="/images/AssetMarkdown/image-20221109211511126.png" alt="image-20221109211511126" style="zoom:80%;" /></p><h3 id="总结-3">1.5.4 总结</h3><p><img src="/images/AssetMarkdown/image-20221109211533054.png" alt="image-20221109211533054" style="zoom:80%;" /></p><h2 id="osi参考模型">1.6 OSI参考模型</h2><h3 id="osi提出的背景">1.6.1 OSI提出的背景</h3><ol type="1"><li>目的：支持<strong>异构网络系统</strong>的互联互通</li><li>ISO在1984年提出开放系统互联(OSI)参考模型</li><li>理论成功，市场失败<ol type="1"><li>专家没有实操的经验</li><li>OSI实现复杂，运行效率低</li><li>制定时间过长，没有及时进入市场</li><li>层次划分不合理，有些功能会在多个层次中多次出现</li></ol></li></ol><h3 id="osi七层结构">1.6.2 OSI七层结构</h3><p><img src="/images/AssetMarkdown/image-20221109212411182.png" alt="image-20221109212411182" style="zoom:80%;" /></p><h3 id="osi参考模型解释通信过程">1.6.3 OSI参考模型解释通信过程</h3><p><img src="/images/AssetMarkdown/image-20221109212814640.png" alt="image-20221109212814640" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221109213106176.png" alt="image-20221109213106176" style="zoom:80%;" /></p><h3 id="osi不同分层">1.6.4 OSI不同分层</h3><h4 id="应用层">1.6.4.1 应用层</h4><ol type="1"><li>应用层：用户与网络的界面，即所有能和用户交互<strong>产生网络流量</strong>的程序</li><li>典型应用层服务<ol type="1"><li>文件传输：FTP</li><li>电子邮件：SMTP</li><li>万维网：HTTP</li></ol></li></ol><h4 id="表示层">1.6.4.2 表示层</h4><ol type="1"><li>表示层：用于处理在两个通信系统中交换信息的<strong>表示方式</strong>（语法和语义）</li><li>功能<ol type="1"><li>数据格式的变换：翻译官</li><li>数据加密解密</li><li>数据压缩和恢复</li></ol></li></ol><h4 id="会话层">1.6.4.3 会话层</h4><ol type="1"><li>会话层：向表示层实体/用户进程提供<strong>建立连接</strong>并在连接上<strong>有序</strong>地<strong>传输</strong>数据</li><li>会话，也叫<strong>建立同步SYN</strong></li><li>功能：<ol type="1"><li>建立、管理、终止会话</li><li>使用校验点，可使会话在通信失效时，从<strong>校验点/同步点</strong>继续恢复通信，实现数据同步<ol type="1"><li>适用于传输大文件</li></ol></li></ol></li><li>主要协议：ADSP、ASP</li></ol><h4 id="传输层">1.6.4.4 传输层</h4><ol type="1"><li>负责主机中<strong>两个进程</strong>的通信，即<strong>端到端</strong>的通信。传输单位是报文段/用户数据报</li><li>功能<ol type="1"><li>可靠传输、不可靠传输</li><li>差错控制</li><li>流量控制：接收端控制发送端发送的速率</li><li>复用分用<ol type="1"><li>复用：多个应用层进程可同时使用下面运输层的服务</li><li>分用：运输层把收到的信息分别交付给上面应用层中相应的进程</li></ol></li></ol></li><li>主要协议：TCP、UDP</li></ol><h4 id="网络层">1.6.4.5 网络层</h4><ol type="1"><li>网络层：把分组从源端传送到目的端，为分组交换网上的不同主机提供通信服务</li><li>传输单位：<strong>数据报</strong></li><li>功能<ol type="1"><li>路由选择：最佳路径</li><li>差错控制</li><li>流量控制：协调发送端和接收端的速度，限制发送方的速度</li><li>拥塞控制：若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状"态。因此要采取一定措施，缓解这种拥塞</li></ol></li><li>主要协议：IP、IPX、ICMP、IGMP、ARP、RARP、OSPF</li></ol><h4 id="数据链路层">1.6.4.6 数据链路层</h4><ol type="1"><li>数据链路层：把网络层传下来的数据报组装成帧</li><li>传输单位：<strong>帧</strong></li><li>功能：<ol type="1"><li>成帧：定义帧的开始和结束</li><li>差错控制：帧错、位错</li><li>流量控制</li><li>访问(接入)控制：控制对信道的访问</li></ol></li><li>主要协议：SDLC、HDLC、PPP、STP</li></ol><h4 id="物理层">1.6.4.7 物理层</h4><ol type="1"><li>物理层：在<strong>物理媒体</strong>上实现比特流的<strong>透明传输</strong></li><li>传输单位：<strong>比特</strong></li><li>透明传输：不管所传的数据是什么比特组合，都能在链路上传送</li><li>功能：<ol type="1"><li>定义接口特性</li><li>定义传输模式<ol type="1"><li>单工：只有一个人能够说话</li><li>半双工：两个人均能说话，但同一时间只有一个人说话</li><li>双工：两个人均能说话</li></ol></li><li>定义传输速率</li><li>比特同步</li><li>比特编码</li></ol></li><li>主要协议：Rj45、802.3</li></ol><h3 id="总结-4">1.6.3 总结</h3><p><img src="/images/AssetMarkdown/image-20221109220133205.png" alt="image-20221109220133205" style="zoom:80%;" /></p><h2 id="tcpip参考模型5层参考模型">1.7 TCP/IP参考模型、5层参考模型</h2><p><img src="/images/AssetMarkdown/image-20221110211627791.png" alt="image-20221110211627791" style="zoom:80%;" /></p><h3 id="osi与tcpip的共同点">1.7.1 OSI与TCP/IP的共同点</h3><ol type="1"><li>都分层</li><li>基于独立的协议栈的概念</li><li>可以实现异构网络互联</li></ol><h3 id="osi与tcpip的不同点">1.7.2 OSI与TCP/IP的不同点</h3><p><img src="/images/AssetMarkdown/image-20221110212313192.png" alt="image-20221110212313192" style="zoom:80%;" /></p><h3 id="层参考模型">1.7.3 5层参考模型</h3><p><img src="/images/AssetMarkdown/image-20221110212523658.png" alt="image-20221110212523658" style="zoom:80%;" /></p><h3 id="层参考模型的数据封装与解封装">1.7.45层参考模型的数据封装与解封装</h3><p><img src="/images/AssetMarkdown/image-20221110212735024.png" alt="image-20221110212735024" style="zoom:80%;" /></p><h2 id="第一章知识总结">1.8 第一章知识总结</h2><p><img src="/images/AssetMarkdown/image-20221110212818174.png" alt="image-20221110212818174" style="zoom:80%;" /></p><h1 id="chapter-2物理层">Chapter 2：物理层</h1><p><img src="/images/AssetMarkdown/image-20221110213211010.png" alt="image-20221110213211010" style="zoom:50%;" /></p><h2 id="物理层的基本概念">2.1 物理层的基本概念</h2><ol type="1"><li>物理层：解决如何在连接各种计算机的传输媒体上<strong>传输数据比特流</strong>，而不是具体的传输媒体</li><li>主要任务：确定与传输媒体<strong>接口</strong>有关的一些特性【定义标准】<ol type="1"><li><strong>机械特性</strong>：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、<strong>引线数目</strong>、<strong>引脚数量</strong>、排列情况</li><li><strong>电气特性</strong>：规定传输<strong>二进制位</strong>时，线路上信号的<strong>电压范围</strong>、阻抗匹配、<strong>传输速率</strong>、<strong>距离限制</strong>等</li><li><strong>功能特性</strong>：指明某条线上出现某一<strong>电平表示何种意义</strong>，接口部件的信号线的用途</li><li><strong>规程特性(过程特性)</strong>：定义各条物理线路的工作<strong>规程</strong>和<strong>时序</strong>关系</li></ol></li></ol><h2 id="数据通信的基础知识">2.2 数据通信的基础知识</h2><h3 id="典型的数据通信模型">2.2.1 典型的数据通信模型</h3><p><img src="/images/AssetMarkdown/image-20221110214223211.png" alt="image-20221110214223211" style="zoom:80%;" /></p><h3 id="相关术语">2.2.2 相关术语</h3><ol type="1"><li><p>通信的目的：传送消息</p></li><li><p><strong>数据</strong>：传送信息的实体，通常是有意义的符号序列</p></li><li><p><strong>信号</strong>：数据的电气/电磁的表现，是数据在传输过程中的<strong>存在形式</strong></p><ol type="1"><li>数字信号：代表消息的参数取值是离散的</li><li>模拟信号：代表消息的参数取值是连续的</li></ol></li><li><p><strong>信源</strong>：产生和发送数据的源头</p></li><li><p><strong>信宿</strong>：接收数据的终点</p></li><li><p><strong>信道</strong>：信号传输的媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接受信道</p><p><img src="/images/AssetMarkdown/image-20221110215133733.png" alt="image-20221110215133733" style="zoom:80%;" /></p></li></ol><h3 id="三种通信方式">2.2.3 三种通信方式</h3><ol type="1"><li><strong>单工通信</strong>：只有一个方向的通信而没有反方向的交互，仅需要<strong>一条</strong>信道</li><li><strong>半双工通信</strong>：通信的双方都可以发送或接收消息，但任何一方都不能同时发送和接收，需要<strong>两条</strong>信道</li><li><strong>全双工通信</strong>：通信双方可以同时发送和接收消息，也需要<strong>两条</strong>信道</li></ol><h3 id="两种数据传输方式">2.2.4 两种数据传输方式</h3><ol type="1"><li>串行传输：速度慢，费用低，适合远距离</li><li>并行传输：速度快，费用高，适合近距离，用于计算机内部数据传输</li></ol><p><img src="/images/AssetMarkdown/image-20221110215514788.png" alt="image-20221110215514788" style="zoom:80%;" /></p><h2 id="码元波特速率带宽计算">2.3码元、波特、速率、带宽(<strong>计算</strong>)</h2><h3 id="码元">2.3.1 码元</h3><ol type="1"><li><strong>码元</strong>是指用一个<strong>固定时长</strong>的<strong>信号波形</strong>(数字脉冲)，代表不同离散数值的基本波形，是数字通信中数字信号的计量单位，这个时长内的信号称为<strong>k进制码元</strong>，而该时长称为<strong>码元宽度</strong><ol type="1"><li>当码元的离散状态有M个时(M大于2)，此时码元为<strong>M进制码元</strong></li></ol></li><li><strong>1码元可以携带多个比特的信息量</strong>。例如，在使用二进制编码时，只有两种不同的码元，一种代表0状态，另一种代表1状态</li></ol><p><img src="/images/AssetMarkdown/image-20221113162232308.png" alt="image-20221113162232308" style="zoom:80%;" /></p><h3 id="速率波特带宽">2.3.2 速率、波特、带宽</h3><ol type="1"><li>速率也叫数据率，是指数据的<strong>传输速率</strong>，表示单位时间内传输的数据量。可以用<strong>码元传输速率</strong>和<strong>信息传输速率</strong>表示。</li><li><strong>码元传输速率</strong>：别名码元速率、波形速率、调制速率、符号速率等，它表示单位时间内数字通信系统所传输的<strong>码元个数</strong>(也可称为<strong>脉冲个数或信号变化的次数</strong>)<ol type="1"><li>单位是<strong>波特(Baud)</strong></li><li><strong>1波特</strong>：表示数字通信系统每秒传输一个码元，<strong>1Baud= 1码元/s</strong></li><li>这里的码元可以是多进制的，也可以是二进制的，但<strong>码元速率与进制数无关</strong></li></ol></li><li><strong>信息传输速率</strong>：别名信息速率、比特率等，表示单位时间内数字通信系统传输的<strong>二进制码元个数</strong>(即比特数)<ol type="1"><li>单位：<strong>比特/秒(b/s)</strong></li></ol></li><li><strong>关系</strong>：若一个码元携带n bit的信息量，则MBaud的码元传输速率所对应的信息传输速率为<span class="math inline">\(M ×n\)</span> bit/s</li><li><strong>带宽</strong>：表示在单位时间内从网络中的某一点到另一点所能通过的“<strong>最高数据率</strong>”，常用来表示网络的通信线路所能传输数据的能力<ol type="1"><li>单位：<strong>比特/秒(b/s)</strong></li></ol></li></ol><h3 id="练习题">2.3.3 练习题</h3><p><img src="/images/AssetMarkdown/image-20221113163219588.png" alt="image-20221113163219588" style="zoom: 80%;" /></p><h2 id="奈氏准则香农定理计算">2.4奈氏准则、香农定理(<strong>计算</strong>)</h2><h3 id="失真">2.4.1 失真</h3><p><img src="/images/AssetMarkdown/image-20221113163436831.png" alt="image-20221113163436831" style="zoom:80%;" /></p><p>影响失真程度的因素：</p><ol type="1"><li>码元传输速率</li><li>信号传输距离</li><li>噪声干扰</li><li>传输媒体质量</li></ol><h3 id="失真的一种现象码间串扰">2.4.2 失真的一种现象：码间串扰</h3><ol type="1"><li><strong>信道带宽</strong>：信道能够通过的<strong>最高频率和最低频率之差</strong></li><li><strong>码间串扰</strong>：<strong>接收端</strong>收到的信号波形<strong>失去了码元之间清晰界限</strong>的现象</li></ol><p><img src="/images/AssetMarkdown/image-20221113163739821.png" alt="image-20221113163739821" style="zoom:80%;" /></p><h3 id="奈氏准则奈奎斯特定理极限码元传输速率">2.4.3奈氏准则(奈奎斯特定理)：极限码元传输速率</h3><ol type="1"><li><p><strong>奈氏准则</strong>：在理想低通(无噪声，带宽受限)条件下，为了避免码间串扰，<strong>极限码元传输速率</strong>为<strong>2W</strong>(Baud)</p><ol type="1"><li>W：信道带宽，单位是<strong>Hz</strong></li></ol></li><li><p>理想低通信道下的<strong>极限数据传输率</strong>：<strong>2Wlog<sub>2</sub>V</strong> (b/s)</p><ol type="1"><li>W：信道带宽，单位是<strong>Hz</strong></li><li>V：几种码元/码元的离散电平数目</li></ol></li><li><p>结论：</p><ol type="1"><li>在任何信道中，<strong>码元传输的速率是有上限的</strong>。若传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别成为不可能</li><li>信道的<strong>频带越宽</strong>(即能通过的信号高频分量越多)，就可以用更高的速率进行码元的有效传输</li><li>奈氏准则给出了<strong>码元传输速率</strong>的限制，但并没有对信息传输速率给出限制</li><li>由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量，这就需要采用<strong>多元制的调制方法</strong></li></ol></li><li><p>例：</p><p><img src="/images/AssetMarkdown/image-20221113165306084.png" alt="image-20221113165306084" style="zoom:67%;" /></p></li></ol><h3 id="香农定理数据传输速率">2.4.4 香农定理：数据传输速率</h3><ol type="1"><li><p><strong>噪声</strong>存在于所有的电子设备和通信信道中。由于噪声随机产生，它的瞬时值有时会很大，因此噪声会使接收端对码元的判决产生错误。但是噪声的影响是相对的，若信号较强，那么噪声影响相对较小。因此，<strong>信噪比</strong>就很重要</p></li><li><p>信噪比=<spanclass="math inline">\(\frac{信号的平均功率}{噪声的平均功率}\)</span>，记为<strong>S/N</strong>，用分贝<strong>db</strong>作为度量单位</p><ol type="1"><li><strong>信噪比(dB) = 10 log<sub>10</sub>(S/N)</strong></li></ol></li><li><p>香农定理：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值</p><ol type="1"><li><strong>信道的极限数据传输速率 = W log<sub>2</sub>(1+S/N)(b/s)</strong></li><li>W：信道带宽，单位是<strong>Hz</strong></li><li>S/N：信噪比</li><li>S：信道所传信号的平均功率</li><li>N：信道内的高斯噪声功率</li></ol></li><li><p>结论：</p><ol type="1"><li>信道的<strong>带宽</strong>或信道中的<strong>信噪比</strong>越大，则信息的极限传输速率就<strong>越高</strong></li><li>对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了</li><li>只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现无差错的传输</li><li>香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少</li><li>从香农定理可以看出，若信道带宽w或信噪比S/N没有上限(不可能)，那么信道的极限信息传输速率也就没有上限</li></ol></li><li><p>例：</p><p><img src="/images/AssetMarkdown/image-20221113170048282.png" alt="image-20221113170048282" style="zoom:67%;" /></p></li></ol><h3 id="奈氏准则与香农定理">2.4.5 奈氏准则与香农定理</h3><p><img src="/images/AssetMarkdown/image-20221113170318805.png" alt="image-20221113170318805" style="zoom:80%;" /></p><p>例：</p><p><img src="/images/AssetMarkdown/image-20221113170400885.png" alt="image-20221113170400885" style="zoom:80%;" /></p><h3 id="采样定理">2.4.6 采样定理</h3><p><span class="math display">\[f_{采样频率} ≥ 2f_{信号最高频率}\]</span></p><ol type="1"><li>对于一个正弦波，我们只需要确定两个点，就可以确定其波形</li><li>因此只需要在一个正弦波周期中，取到两个点，就可以得到正弦波的波形</li><li>故：采样频率 ≥ 2信号最高频率</li></ol><h2 id="编码调制">2.5 编码&amp;调制</h2><h3 id="基带信号与宽带信号">2.5.1 基带信号与宽带信号</h3><ol type="1"><li>信道：信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道<ol type="1"><li>按传输信号分：模拟信道、数字信道</li><li>按传输介质分：无线信道、有线信道</li></ol></li><li>信道上传输的信号<ol type="1"><li><strong>基带信号Baseband</strong>：将数字信号1和0直接用两种不同的电压表示，再送到<strong>数字信道</strong>上去传输(<strong>基带传输</strong>)<ol type="1"><li><strong>来自信源</strong>的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号</li><li>基带信号就是发出的<strong>直接表达了要传输的信息的信号</strong>，比如我们说话的声波就是基带信号</li></ol></li><li><strong>宽带信号Passband</strong>：将基带信号进行调制后形成的频分复用模拟信号，再传送到<strong>模拟信道</strong>上去传输(<strong>宽带传输</strong>)<ol type="1"><li>把基带信号经过<strong>载波调制</strong>后，把信号的<strong>频率范围搬移</strong>到<strong>较高的频段</strong>以便在信道中传输(即仅在一段频率范围内能够通过信道)</li></ol></li><li>在传输距离较近时，计算机网络采用基带传输方式(近距离衰减小，从而信号内容不易发生变化)</li><li>在传输距离较远时，计算机网络采用宽带传输方式(远距离衰减大，即使信号变化大也能最后过滤出来基带信号)</li></ol></li></ol><h3 id="编码与调制">2.5.2 编码与调制</h3><p><img src="/images/AssetMarkdown/image-20221113171517993.png" alt="image-20221113171517993" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221113171553542.png" alt="image-20221113171553542" style="zoom:80%;" /></p><h3 id="数字数据-编码为-数字信号">2.5.3 数字数据 编码为 数字信号</h3><ol type="1"><li><p><strong>非归零编码【NRZ】</strong>：高1低0</p><ol type="1"><li>编码容易实现</li><li>但没有检错功能，且无法判断一个码元的开始和结束，以至于收发双方<strong>难以保持同步</strong></li></ol></li><li><p>归零编码【RZ】：信号电平在一个码元之内都要恢复到0</p></li><li><p>反向不归零编码【NRZI】：信号电平翻转表示0，不变表示1</p><ol type="1"><li>需要时钟信号</li></ol></li><li><p><strong>曼彻斯特编码</strong>：</p><ol type="1"><li>规则：将一个码元分成两个相等的间隔，前一个间隔为低电平后一个间隔为高电平表示码元1；码元0则正好相反。也可以采用相反的规定</li><li>该编码的特点是在每一个码元的中间出现电平跳变，位中间的跳变既作时钟信号(可用于同步)又作数据信号</li><li>但它所占的频带宽度是原始的基带宽度的两倍</li><li>每一个码元都被调成两个电平，所以<strong>数据传输速率只有调制速率的1/2</strong></li></ol></li><li><p><strong>差分曼彻斯特编码</strong>：同1异0</p><ol type="1"><li>规则：常用于局域网传输，其规则是:若码元为1，则前半个码元的电平，与上一个码元的后半个码元的电平相同，若为0，则相反</li><li>该编码的特点是，在每个码元的中间，都有一次电平的跳转，可以实现自同步，且抗干扰性强于曼彻斯特编码</li></ol><p><img src="/images/AssetMarkdown/image-20221113172748058.png" alt="image-20221113172748058" style="zoom:67%;" /></p><p><img src="/images/AssetMarkdown/image-20221113172758786.png" alt="image-20221113172758786" style="zoom:67%;" /></p><p><img src="/images/AssetMarkdown/image-20221113172219724.png" alt="image-20221113172219724" style="zoom:67%;" /></p></li><li><p>4B/5B编码</p><ol type="1"><li>比特流中插入额外的比特以打破连串的0或1，就是用5个比特来编码4个比特的数据，之后再传给接收方，因此称为4B/5B</li><li>编码效率为80%</li></ol><p><img src="/images/AssetMarkdown/image-20221113172937516.png" alt="image-20221113172937516" style="zoom:67%;" /></p></li></ol><h3 id="数字数据-调制为-模拟信号">2.5.4 数字数据 调制为 模拟信号</h3><ol type="1"><li>数字数据调制技术在发送端将数字信号转换为模拟信号，而在接收端将模拟信号还原为数字信号，分别对应于调制解调器的调制和解调过程</li><li>分为：调幅(ASK)、调频(FSK)、调相(PSK)、调幅+调相(QAM)</li></ol><p><img src="/images/AssetMarkdown/image-20221113173212187.png" alt="image-20221113173212187" style="zoom:67%;" /></p><h3 id="模拟数据-编码为-数字信号">2.5.5 模拟数据 编码为 数字信号</h3><ol type="1"><li>计算机内部处理的是二进制数据，处理的都是<strong>数字音频</strong>，所以需要将模拟音频通过采样、量化转换成有限个数字表示的离散序列(即实现<strong>音频数字化</strong>)</li><li>最典型的例子就是对音频信号进行编码的脉码调制(<strong>PCM</strong>)，在计算机应用中，能够达到<strong>最高保真水平</strong>的就是<strong>PCM编码</strong>，被广泛用于素材保存及音乐欣赏，CD、DVD以及我们常见的WAV文件中均有应用。它主要包括三步：<ol type="1"><li><strong>抽样</strong>：对模拟信号进行周期性扫描<ol type="1"><li>把时间上连续的信号变为时间上离散的信号</li><li>为了使所得的离散信号能够无失真的代表被抽样的模拟数据，要使用采样定理进行采样</li><li><strong>f<sub>采样频率</sub> ≥2f<sub>信号最高频率</sub></strong></li></ol></li><li><strong>量化</strong>：把抽样取得的电平幅值按照一定的分级标准转化为对应的数字值，并取整数。<ol type="1"><li>把连续的电平幅值转化为离散的数据量</li></ol></li><li><strong>编码</strong>：把量化的结果转化为与之对应的二进制编码</li></ol></li></ol><h3 id="模拟数据-调制为-模拟信号">2.5.6 模拟数据 调制为 模拟信号</h3><ol type="1"><li>为了实现传输的有效性，可能需要较高的频率</li><li>这种调制方式还可以使用频分复用技术，充分利用带宽资源</li><li>在电话机和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式；模拟的声音数据是加载到模拟的载波信号中传输的</li></ol><p><img src="/images/AssetMarkdown/image-20221113190432048.png" alt="image-20221113190432048" style="zoom:80%;" /></p><h3 id="总结-5">2.5.7 总结</h3><p><img src="/images/AssetMarkdown/image-20221113190415378.png" alt="image-20221113190415378" style="zoom:80%;" /></p><h2 id="复用multiplexing">2.6 复用Multiplexing</h2><h3 id="频分复用fdmafrequency-division-multiplexing">2.6.1频分复用FDMA：Frequency Division Multiplexing</h3><p><img src="/images/AssetMarkdown/image-20221231161448196.png" alt="image-20221231161448196" style="zoom:80%;" /></p><ol type="1"><li>一人一个频段，一起发送</li><li>缺点：相邻子信道之间需要有保护频段</li></ol><h3id="正交频分复用ofdmorthogonal-frequency-division-multiplexing">2.6.2正交频分复用OFDM：Orthogonal Frequency Division Multiplexing</h3><p><img src="/images/AssetMarkdown/image-20221231161609812.png" alt="image-20221231161609812" style="zoom:80%;" /></p><ol type="1"><li>相邻子信道之间叠在一起，不需要保护频段</li><li>使用示例：4G、5G、WIFI</li></ol><h3 id="时分复用tdmatime-division-multiplexing">2.6.3 时分复用TDMA：TimeDivision Multiplexing</h3><p><img src="/images/AssetMarkdown/image-20221231161719420.png" alt="image-20221231161719420" style="zoom:80%;" /></p><ol type="1"><li>一人一个字节，轮流发送</li></ol><h3 id="码分复用cdmacode-division-multiplexing">2.6.4 码分复用CDMA：CodeDivision Multiplexing</h3><p><img src="/images/AssetMarkdown/image-20221231161836274.png" alt="image-20221231161836274" style="zoom:80%;" /></p><ol type="1"><li>大家的时间、频率是重叠在一起的，同时发送，但是同一段数据对不同人表示的含义不一样</li><li>每个人使用的0/1的码型，两两之间是正交的<ol type="1"><li>正交：对应位相乘，然后相加，得到的和为0</li></ol></li><li>具体见<strong>3.5.1.3.5</strong></li></ol><h2 id="各种网络">2.7 各种网络</h2><h3 id="固定电话网">2.7.1 固定电话网</h3><h4 id="电话网">2.7.1.1 电话网</h4><p><img src="/images/AssetMarkdown/image-20221231162429588.png" alt="image-20221231162429588" style="zoom:80%;" /></p><ol type="1"><li>电话机和端局之间：<strong>本地环路Local loop</strong><ol type="1"><li>通信的两个方向是叠加在同一根线上的</li><li>通常为模拟电路</li></ol></li><li>交换机和交换机之间：<strong>中继线trunk</strong><ol type="1"><li>中继线都是四线制的，通信的两个方向是分开的</li><li>通常为数字电路</li></ol></li></ol><h4 id="调制解调器-modems">2.7.1.2 调制解调器 Modems</h4><p><img src="/images/AssetMarkdown/image-20221231162845030.png" alt="image-20221231162845030" style="zoom:80%;" /></p><ol type="1"><li>由于中继线是数字化的，因此分配给每个用户的通话频率是固定的，不能超过4kHz</li><li>需要将基带信号调制为4kHz以内的音频信号，在电话线上进行传输</li><li><strong>modems</strong>：调制解调器</li></ol><h4 id="adsl">2.7.1.3 ADSL</h4><p><img src="/images/AssetMarkdown/image-20221231163129059.png" alt="image-20221231163129059" style="zoom:80%;" /></p><ol type="1"><li><strong>ADSL</strong>：在本地环路上，低频部分用于打电话，高频部分用于上网<ol type="1"><li>高频部分通过频分复用，分为上传/下载部分</li></ol></li></ol><h4 id="ftth">2.7.1.4 FTTH</h4><p><img src="/images/AssetMarkdown/image-20221231163253090.png" alt="image-20221231163253090" style="zoom:80%;" /></p><ol type="1"><li><strong>FTTH</strong>：电信局通过一根光纤连接到分光器，由分光器将数据分发给家家户户<ol type="1"><li>家庭到电信局的数据：发给分光器，然后走共享光纤</li><li>电信局到家庭的数据：走共享光纤发给分光器，然后广播</li></ol></li><li>分光器：是无源设备</li></ol><h4 id="t1">2.7.1.5 T1</h4><p><img src="/images/AssetMarkdown/image-20221231163608997.png" alt="image-20221231163608997" style="zoom:80%;" /></p><h4 id="sonetsdh">2.7.1.6 SONET、SDH</h4><p><img src="/images/AssetMarkdown/image-20221231163802561.png" alt="image-20221231163802561" style="zoom:80%;" /></p><ol type="1"><li>将一个2M的电路，一步甩到几个G的电路上跑</li></ol><h3 id="移动通信网">2.7.2 移动通信网</h3><table><colgroup><col style="width: 3%" /><col style="width: 7%" /><col style="width: 13%" /><col style="width: 17%" /><col style="width: 57%" /></colgroup><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">采用技术</th><th style="text-align: center;">支持的通信</th><th style="text-align: center;">复用方法</th><th style="text-align: center;">标准</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1G</td><td style="text-align: center;">模拟技术</td><td style="text-align: center;">话音通信</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">2G</td><td style="text-align: center;">数字技术</td><td style="text-align: center;">话音通信</td><td style="text-align: center;">码分复用</td><td style="text-align: center;">GSM(欧洲)、CDMA(北美)</td></tr><tr class="odd"><td style="text-align: center;">3G</td><td style="text-align: center;">数字技术</td><td style="text-align: center;">话音、数据通信</td><td style="text-align: center;">CDMA标准的码分复用</td><td style="text-align: center;">WCDMA(欧洲, 中国联通)<br>CDMA-2000(北美, 中国电信) <br>TDSCDMA(中国移动)</td></tr><tr class="even"><td style="text-align: center;">4G</td><td style="text-align: center;">数字技术</td><td style="text-align: center;">数据通信</td><td style="text-align: center;">正交频分复用OFDM</td><td style="text-align: center;">TD-LTE、FDD-LTE</td></tr><tr class="odd"><td style="text-align: center;">5G</td><td style="text-align: center;">数字技术</td><td style="text-align: center;">数据通信</td><td style="text-align: center;">都会用到</td><td style="text-align: center;"></td></tr></tbody></table><h2 id="物理层的传输介质">2.8 物理层的传输介质</h2><h3 id="传输介质及分类">2.8.1 传输介质及分类</h3><ol type="1"><li>传输介质<ol type="1"><li>传输介质也称传输媒体/传输媒介，它就是数据传输系统中在发送设备和接收设备之间的物理通路</li><li>传输媒体并不是物理层</li><li>传输媒体在物理层的下面，因为物理层是体系结构的第一层，因此有时称传输媒体为0层</li><li>在传输媒体中传输的是信号，但传输媒体并不知道所传输的信号代表什么意思。但物理层规定了<strong>电气特性</strong>，因此能够识别所传送的比特流</li></ol></li><li>传输介质的分类<ol type="1"><li>导向性传输介质：<ol type="1"><li>电磁波被导向沿着固体媒介(铜线/光纤)传播</li></ol></li><li>非导向性传输介质：<ol type="1"><li>自由空间，介质可以是空气、真空、海水灯</li></ol></li></ol></li></ol><h3 id="导向性传输介质双绞线">2.8.2 导向性传输介质：双绞线</h3><p><img src="/images/AssetMarkdown/image-20221113190911864.png" alt="image-20221113190911864" style="zoom:80%;" /></p><ol type="1"><li>双绞线是古老、又最常用的传输介质</li><li>它由<strong>两根</strong>采用一定规则并排<strong>绞合</strong>的、相互绝缘的<strong>铜导线</strong>组成</li><li><strong>绞合可以减少对相邻导线的电磁干扰</strong></li><li>为了进一步提高抗电磁干扰能力，可在双绞线的外面再加上一个由<strong>金属丝</strong>编织成的屏蔽层，这就是<strong>屏蔽双绞线(STP)</strong>，无屏蔽层的双绞线就称为<strong>非屏蔽双绞线(UTP)</strong></li><li>特点：<ol type="1"><li>双绞线价格<strong>便宜</strong>，是最常用的传输介质之一，在局域网和传统电话网中普遍使用</li><li>模拟传输和数字传输都可以使用双绞线，其通信距离一般为几公里到数十公里</li><li>距离太远时，对于<strong>模拟传输</strong>，要用<strong>放大器</strong>放大衰减的信号；对于<strong>数字传输</strong>，要用<strong>中继器</strong>将失真的信号整形</li></ol></li></ol><h3 id="导向性传输介质同轴电缆">2.8.3 导向性传输介质：同轴电缆</h3><p><img src="/images/AssetMarkdown/image-20221113191213938.png" alt="image-20221113191213938" style="zoom:80%;" /></p><ol type="1"><li>同轴电缆由导体铜质芯线、绝缘层、网状编织屏蔽层和塑料外层构成</li><li>按特性阻抗数值的不同，通常将同轴电缆分为两类：50Ω同轴电缆和75Ω同轴电缆。<ol type="1"><li>50Ω同轴电缆主要用于传送基带数字信号，又称为<strong>基带同轴电缆</strong>，它在局域网中得到广泛应用</li><li>75Ω同轴电缆主要用于传送宽带信号，又称为<strong>宽带同轴电缆</strong>，它主要用于有线电视系统</li></ol></li><li>同轴电缆 vs 双绞线<ol type="1"><li>由于外导体屏蔽层的作用，同轴电缆<strong>抗干扰特性</strong>比双线好，被广泛用于传输较高，速率的数据，其传输距离更远</li><li>但价格较双绞线贵</li></ol></li></ol><h3 id="导向性传输介质光纤">2.8.4 导向性传输介质：光纤</h3><p><img src="/images/AssetMarkdown/image-20221113191544856.png" alt="image-20221113191544856" style="zoom:80%;" /></p><ol type="1"><li><p>光纤通信就是利用光导纤维(简称光纤)传递光脉冲来进行通信。有光脉冲表示1，无光脉冲表示0</p></li><li><p>而可见光的频率大约是10MHz，因此光纤通信系统的<strong>带宽远远大于</strong>目前其他各种传输媒体的带宽</p></li><li><p>光纤主要由<strong>纤芯(实心的!)</strong>和<strong>包层</strong>构成</p><ol type="1"><li>光波通过纤芯进行传导，包层较纤芯有较低的折射率</li><li>当光线从高折射率的介质射向低折射率的介质时，其折射角将大于入射角</li><li>因此，如果入射角足够大，就会出现全反射，即光线碰到包，层时候就会折射回纤芯、这个过程不断重复，光也就沿着光纤传输下去</li></ol></li><li><p>多模光纤与单模光纤</p><p><img src="/images/AssetMarkdown/image-20221113191723325.png" alt="image-20221113191723325" style="zoom:80%;" /></p></li><li><p>特点：</p><ol type="1"><li>传输<strong>损耗小</strong>，中继距离长，对远距离传输特别经济</li><li><strong>抗雷电</strong>和<strong>电磁干扰</strong>性能好</li><li>无串音干扰，保密性好，也<strong>不易被窃听或截取数据</strong></li><li><strong>体积小，重量轻</strong></li></ol></li></ol><h3 id="非导向性传输介质">2.8.5 非导向性传输介质</h3><ol type="1"><li>无线电波：<ol type="1"><li>信号向所有方向传播</li><li>较强<strong>穿透能力</strong>，可传远距离</li><li>广泛应用于通信领域</li></ol></li><li>微波：<ol type="1"><li>信号固定方向传播</li><li>微波通信频率较高、频段范围宽，因此数据率很高</li><li>应用于地面微波接力通信、卫星通信</li><li>卫星通信：<ol type="1"><li>优点：通信容量大、距离远、覆盖广、广播通信和多址通信</li><li>缺点：传播时延长(250~270ms)、受气候影响大、误码率高、成本高</li></ol></li></ol></li><li>红外线、激光：<ol type="1"><li>信号固定方向传播</li><li>把要传输的信号分别<strong>转换为各自的信号格式</strong>，即红外信号和激光信号，再向空间中传播</li></ol></li></ol><h3 id="总结-6">2.8.6 总结</h3><p><img src="/images/AssetMarkdown/image-20221113192314851.png" alt="image-20221113192314851" style="zoom:80%;" /></p><h2 id="物理层设备">2.9 物理层设备</h2><h3 id="中继器">2.9.1 中继器</h3><p><img src="/images/AssetMarkdown/image-20221113192538817.png" alt="image-20221113192538817" style="zoom:80%;" /></p><ol type="1"><li>诞生原因：由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一定程度时将造成信号失真，因此会导致接收错误</li><li>中继器的功能：对信号进行<strong>再生</strong>和<strong>还原</strong>，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度</li><li>中继器的两端：<ol type="1"><li>两端的网络部分是网段，而不是子网，适用于完全相同的<strong>两类</strong>网络的互连，且两个网段速率要相同</li><li>中继器只将任何电缆段上的数据发送到另一段电缆上，它仅作用于信号的电气部分，并不管数据中是否有错误数据或不适于网段的数据</li><li>两端可连相同媒体，也可连不同媒体</li><li>中继器两端的网段一定要是同一个协议。(中继器不会存储转发)</li></ol></li><li><strong>5-4-3规则</strong>：<ol type="1"><li>网络标准中都对信号的延迟范围作了具体的规定，因而中继器只能在规定的范围内进行，否则会网络故障</li><li>只能有最多不超过<strong>5</strong>个网段，最多有<strong>4</strong>个物理层的设备，只有<strong>3</strong>个段可以挂接计算机</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221113192930270.png" alt="image-20221113192930270" style="zoom:80%;" /></p><h3 id="集线器多口中继器">2.9.2 集线器(多口中继器)</h3><p><img src="/images/AssetMarkdown/image-20221113193026268.png" alt="image-20221113193026268" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221113193631458.png" alt="image-20221113193631458" style="zoom:80%;" /></p><ol type="1"><li>集线器的功能：对信号进行<strong>再生放大转发</strong>，对衰减的信号进行放大，接着转发到其他所有(除输入端口外)处于工作，状态的端口上，以增加信号传输的距离，延长网络的长度<ol type="1"><li>不具备信号的定向传送能力，是一个共享式设备【广播】</li></ol></li></ol><h2 id="物理层总结">2.10 物理层总结</h2><p><img src="/images/AssetMarkdown/image-20221113193707636.png" alt="image-20221113193707636" style="zoom:80%;" /></p><h1 id="chapter-3数据链路层">Chapter 3：数据链路层</h1><h2 id="数据链路层功能概述">3.1 数据链路层功能概述</h2><h3 id="数据链路层的相关概念">3.1.1 数据链路层的相关概念</h3><ol type="1"><li><strong>结点</strong>：主机、路由器</li><li><strong>链路</strong>：网络中两个结点之间的<strong>物理通道</strong><ol type="1"><li>链路的传输介质主要有双绞线、光纤和微波</li><li>链路分为有线链路、无线链路。</li></ol></li><li><strong>数据链路</strong>：网络中两个结点之间的<strong>逻辑通道</strong>，把实现控制数据传输协议的硬件和软件加到链路上就构成数据链路</li><li><strong>帧</strong>：链路层的协议数据单元，封装网络层数据报</li><li><strong>数据链路层</strong>负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报</li></ol><h3 id="数据链路层的功能">3.1.2 数据链路层的功能</h3><p>数据链路层在物理层提供服务的基础上<strong>向网络层提供服务</strong>，其最基本的服务是将源自网络层来的数据<strong>可靠</strong>地传输到相邻节点的目标机网络层。其主要作用是<strong>加强物理层传输原始比特流的功能</strong>，将物理层提供的可能出错的物理连接改造成为<strong>逻辑上无差错的数据链路</strong>，使之对网络层表现为一条无差错的链路</p><p><img src="/images/AssetMarkdown/image-20221115102409340.png" alt="image-20221115102409340" style="zoom:80%;" /></p><ol type="1"><li>为网络层提供服务：<ol type="1"><li>无确认无连接服务：通信质量好的有线通信</li><li>有确认无连接服务：无线通信</li><li>有确认面向连接服务：无线通信</li><li><strong>有连接一定有确认</strong></li></ol></li><li>链路管理：<ol type="1"><li>连接的建立、维持、释放</li><li>用于面向连接的服务</li></ol></li><li>组帧</li><li>流量控制<ol type="1"><li>限制发送方</li></ol></li><li>差错控制<ol type="1"><li>帧错</li><li>位错</li></ol></li></ol><h2 id="封装成帧-透明传输">3.2 封装成帧 &amp; 透明传输</h2><h3 id="封装成帧">3.2.1 封装成帧</h3><p><img src="/images/AssetMarkdown/image-20221115103117195.png" alt="image-20221115103117195" style="zoom:80%;" /></p><ol type="1"><li><strong>封装成帧</strong>：在一段数据的前后部分添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束</li><li>首部和尾部包含很多控制信息，其中一个重要的作用为：<strong>帧定界</strong>（确定帧的界限）</li><li><strong>帧同步</strong>：<strong>接收方</strong>应当能从接收到的二进制比特流中区分出帧的起始和终止</li></ol><h3 id="透明传输">3.2.2 透明传输</h3><ol type="1"><li><strong>透明传输</strong>：指不管所传的数据是什么样的比特组合，都应当能够在链路上传输。因此，链路层就“看不见”有什么妨碍数据传输的东西</li><li>当所传的数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使得接收方不会将这样的数据误认为时某种控制信息。这样才能保证数据链路层的传输是透明的</li></ol><h3 id="组帧的四种方法">3.2.3 组帧的四种方法</h3><h4 id="字符计数法">3.2.3.1 字符计数法</h4><p><img src="/images/AssetMarkdown/image-20221115103709113.png" alt="image-20221115103709113" style="zoom: 67%;" /></p><ol type="1"><li>帧首部使用一个计数字段(第一个<strong>字节</strong>，8位)来表明帧内字符(节)数</li><li>缺点：一旦第一个字节出错，后面所有的帧都会跟着出错</li></ol><h4 id="字符节填充法">3.2.3.2 字符(节)填充法</h4><p><img src="/images/AssetMarkdown/image-20221115103822523.png" alt="image-20221115103822523" style="zoom: 67%;" /></p><ol type="1"><li>SOH和EOT具体指什么，根据具体的协议而定</li><li>当传送的帧由ASCII码文本文件组成时，不管键盘上输入的是什么字符，都可以放在帧里传过去，即<strong>透明传输</strong></li><li>当传送的帧是由非ASCII码的文本文件组成时(二进制代码或图像等)，就要<strong>采用字符填充方法实现透明传输</strong></li><li>字符填充法：在数据中的EOT/SOH前方添加一个<strong>转义字符ESC</strong></li></ol><p><img src="/images/AssetMarkdown/image-20221115104254949.png" alt="image-20221115104254949" style="zoom:80%;" /></p><h4 id="零比特填充法重点">3.2.3.3零比特填充法(<strong>重点</strong>)</h4><p><img src="/images/AssetMarkdown/image-20221115104336747.png" alt="image-20221115104336747" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221115104456514.png" alt="image-20221115104456514" style="zoom:67%;" /></p><ol type="1"><li>发送端：扫描整个信息字段，只要连续5个1，就立即填入1个0</li><li>接收端：先找到标志字段确定边界，再对比特流进行扫描，发现连续5个1时，就把后面的0删除</li></ol><h4 id="违规编码法">3.2.3.4 违规编码法</h4><p><img src="/images/AssetMarkdown/image-20221115104613011.png" alt="image-20221115104613011" style="zoom:80%;" /></p><ol type="1"><li>用两个编码中不会用到的电平，表示帧的开始和结束</li><li>目前普遍使用的帧同步法是：<strong>比特填充</strong>和<strong>违规编码</strong></li></ol><h2 id="差错控制">3.3 差错控制</h2><h3 id="检错编码">3.3.1 检错编码</h3><h4 id="差错从何而来">3.3.1.1 差错从何而来</h4><ol type="1"><li>概括来说，传输中的差错都是由于噪声引起的</li><li>全局性差错：由于线路本身电气特性所产生的<strong>随机噪声</strong>(热噪声)，是信道固有的，随机存在的<ol type="1"><li>解决办法：提高信噪比来减少或避免干扰(对传感器下手)</li></ol></li><li>局部性：外界特定的短暂原因所造成的<strong>冲击噪声</strong>，是产生差错的主要原因。<ol type="1"><li>解决办法：通常利用编码技术来解决</li></ol></li><li>差错的分类<ol type="1"><li>位错：比特位出错，1变成0，0变成1</li><li>帧错：【#1】-【#2】-【#3】<ol type="1"><li>帧丢失：【#1】-【#3】</li><li>帧重复：【#1】-【#2】-【#2】-【#3】</li><li>帧失序：【#1】-【#3】-【#2】</li></ol></li></ol></li></ol><h4 id="数据链路层的差错控制比特错">3.3.1.2数据链路层的差错控制(比特错)</h4><ol type="1"><li>差错控制(比特错)<ol type="1"><li>检错编码：奇偶校验码、循环冗余码CRC</li><li>纠错编码：海明码</li></ol></li><li>数据链路层的编码 vs 物理层的编码<ol type="1"><li>数据链路层编码和物理层的数据编码与调制不同</li><li>物理层编码针对的是<strong>单个比特</strong>，解决传输过程中比特的同步等问题，如曼彻斯特编码</li><li>而数据链路层的编码针对的是<strong>一组比特</strong>，它通过冗余码的技术实现一组二进制比特串在传输过程是否出现了差错</li></ol></li><li>冗余编码<ol type="1"><li>在数据发送之前，先按某种关系<strong>附加</strong>上一定的<strong>冗余位</strong>，构成一个符合某一规则的码字后再发送</li><li>当要发送的有效数据变化时，相应的冗余位也随之变化，使码字遵从不变的规则</li><li>接收端根据收到码字是否仍符合原规则，从而判断是否出错。</li></ol></li></ol><h5 id="检错编码奇偶校验码">3.3.1.2.1 检错编码：奇偶校验码</h5><ol type="1"><li>奇偶校验码：<strong>n-1</strong>位信息元，1位校验元<ol type="1"><li>奇校验码：”1“的个数是奇数</li><li>偶校验码：”1“的个数是偶数</li><li>注意，这里的个数包含校验元本身</li></ol></li><li>特点：只能检查出<strong>奇数个比特</strong>错误，检错能力位50%</li></ol><p><img src="/images/AssetMarkdown/image-20221115110125756.png" alt="image-20221115110125756" style="zoom:67%;" /></p><h5 id="检错编码crc循环冗余码重点">3.3.1.2.2检错编码：CRC循环冗余码(<strong>重点</strong>)</h5><p><img src="/images/AssetMarkdown/image-20221115110614634.png" alt="image-20221115110614634" style="zoom:80%;" /></p><ol type="1"><li><p>最终发送的数据：要发送的数据 + 帧检验序列FCS</p></li><li><p>计算冗余码</p><ol type="1"><li>加0：若生成多项式的G(x)的阶为r，则加r个0</li><li>模2除法：数据加0后除以多项式，余数为冗余码/FCS/CRC校验码的比特序列</li></ol><p><img src="/images/AssetMarkdown/image-20221115111043531.png" alt="image-20221115111043531" style="zoom:80%;" /></p></li><li><p>接收端检测的过程：</p><ol type="1"><li>把收到的每一个帧都除以同样的除数，然后检查得到的余数R<ol type="1"><li>余数为0，判定这个帧没有差错，接受。</li><li>余数为不为0，判定这个帧有差错(无法确定到位)，丢弃</li></ol></li><li>FCS的生成以及接收端CRC检验都是由硬件实现，处理很迅速，因此不会延误数据的传输</li></ol></li><li><p>在数据链路层仅仅使用循环冗余检验CRC差错检测技术，只能做到对帧的无差错接收，即“<strong>凡是接收端数据链路层接受的帧，我们都能以非常接近于1的概率认为这些帧在传输过程中没有产生差错</strong>”。接收端丢弃的帧虽然曾收到了，但是最终还是因为有差错被丢弃。“凡是接收端数据链路层接收的帧均无差错”</p><ol type="1"><li><strong>可靠传输</strong>：数据链路层发送端发送什么，接收端就收到什么</li><li>链路层使用CRC检验，能够实现无比特差错的传输，但这还不是可靠传输</li></ol></li></ol><h3 id="纠错编码海明码重点">3.3.2纠错编码：海明码(<strong>重点</strong>)</h3><p>海明码：<strong>发现双</strong>比特错，<strong>纠正单</strong>比特错</p><p><img src="/images/AssetMarkdown/image-20221115111706921.png" alt="image-20221115111706921" style="zoom:80%;" /></p><ol type="1"><li><p>海明不等式：<span class="math inline">\(2^r \gek+r+1\)</span></p><ol type="1"><li><span class="math inline">\(r\)</span>：冗余信息位</li><li><span class="math inline">\(k\)</span>：信息位</li></ol><p><img src="/images/AssetMarkdown/image-20221115111801363.png" alt="image-20221115111801363" style="zoom: 67%;" /></p></li><li><p>确定校验码和数据的位置</p><p><img src="/images/AssetMarkdown/image-20221115111902445.png" alt="image-20221115111902445" style="zoom:80%;" /></p></li><li><p>求校验码的值</p><ol type="1"><li>要校验的位：<ol type="1"><li>如1的二进制表示为0001，则P<sub>1</sub>要校验的位为：P<sub>1</sub>、D<sub>1</sub>(0011)、D<sub>2</sub>(0101)、D<sub>4</sub>(0111)、D<sub>5</sub>(1001)</li><li>如2的二进制表示为0010，则P<sub>2</sub>要校验的位为：P<sub>2</sub>、D<sub>1</sub>(0011)、D<sub>3</sub>(0110)、D<sub>4</sub>(0111)、D<sub>6</sub>(1010)</li></ol></li><li>校验码的值<ol type="1"><li><strong>令所有要校验的位异或=0</strong></li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221115112532663.png" alt="image-20221115112532663" style="zoom:80%;" /></p></li><li><p>检错并纠错</p><ol type="1"><li><strong>令所有要校验的位异或运算</strong></li><li>异或出来的结果逆序排列，所得结果即为出错的位置</li></ol><p><img src="/images/AssetMarkdown/image-20221115112835685.png" alt="image-20221115112835685" style="zoom:80%;" /></p></li></ol><h3 id="总结-7">3.3.3 总结</h3><p><img src="/images/AssetMarkdown/image-20221115112859589.png" alt="image-20221115112859589" style="zoom:80%;" /></p><h2 id="流量控制与可靠传输">3.4 流量控制与可靠传输</h2><p><strong>较高的发送速度</strong>和<strong>较低的接收能力</strong>的不匹配，会造成传输出错，因此流量控制也是数据链路层的一项重要工作</p><h3 id="流量控制与可靠传输机制">3.4.1 流量控制与可靠传输机制</h3><h4 id="数据链路层的流量控制-与-传输层流量控制的区别">3.4.1.1数据链路层的流量控制 与 传输层流量控制的区别</h4><ol type="1"><li><strong>数据链路层</strong>的流量控制是：<strong>点对点</strong>的(两个相邻节点之间)</li><li><strong>传输层</strong>的流量控制是：<strong>端到端</strong>的(两个主机之间)</li><li><strong>数据链路层</strong>流量控制手段：接收方收不下就不回复确认</li><li><strong>传输层</strong>流量控制手段：接收端给发送端一个窗口公告</li></ol><h4 id="流量控制的方法">3.4.1.2 流量控制的方法</h4><ol type="1"><li><p>停止-等待协议：每发送完一个帧就停止发送，等待对方的确认，在收到确认后再发送下一个帧</p><p><img src="/images/AssetMarkdown/image-20221117211143333.png" alt="image-20221117211143333" style="zoom:67%;" /></p></li><li><p>滑动窗口协议：<strong>链路层中，窗口的大小在发送过程中为固定值</strong></p><ol type="1"><li>后退N帧协议：GBN</li><li>选择重传协议：SR</li></ol><p><img src="/images/AssetMarkdown/image-20221117211302482.png" alt="image-20221117211302482" style="zoom:67%;" /></p></li></ol><table><thead><tr class="header"><th style="text-align: center;">协议</th><th style="text-align: center;">发送窗口大小</th><th style="text-align: center;">接收窗口大小</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">停止-等待协议</td><td style="text-align: center;">=1</td><td style="text-align: center;">=1</td></tr><tr class="even"><td style="text-align: center;">后退N帧协议：GBN</td><td style="text-align: center;">&gt;1</td><td style="text-align: center;">=1</td></tr><tr class="odd"><td style="text-align: center;">选择重传协议：SR</td><td style="text-align: center;">&gt;1</td><td style="text-align: center;">&gt;1</td></tr></tbody></table><h4 id="可靠传输流量控制滑动窗口">3.4.1.3可靠传输、流量控制、滑动窗口</h4><ol type="1"><li>可靠传输：发送端发啥，接收端收啥</li><li>流量控制：控制发送速率，使接收方有足够的缓冲空间来接收每一个帧</li><li>滑动窗口解决：<ol type="1"><li>流量控制：收不下就不给确认，想发也发不了</li><li>可靠传输：发送方自动重传</li></ol></li></ol><h3 id="停止-等待协议">3.4.2 停止-等待协议</h3><ol type="1"><li>为什么要有停止-等待协议?<ol type="1"><li>除了比特出差错，底层信道还会出现丢包问题。</li><li>丢包：物理线路故障、设备故障、病毒攻击、路由信息错误等原因，会导致数据包的丢失</li></ol></li><li>研究停等协议的前提?<ol type="1"><li>虽然现在常用全双工通信方式，但为了讨论问题方便，仅考虑一方发送数据(发送方)，一方接收数据(接收方)</li><li>因为是在讨论可靠传输的原理，所以并不考虑数据是在哪一个层次上传送的</li><li>“停止-等待”就是每发送完一个分组就停止发送，等待对方确认，在收到确认后再发送下一个分组</li></ol></li><li>停等协议有几种应用情况?<ol type="1"><li>无差错情况&amp;有差错情况</li></ol></li></ol><h4 id="停止-等待协议无差错情况">3.4.2.1 停止-等待协议：无差错情况</h4><p><img src="/images/AssetMarkdown/image-20221117212318210.png" alt="image-20221117212318210" style="zoom:80%;" /></p><h4 id="停止-等待协议有差错情况">3.4.2.2 停止-等待协议：有差错情况</h4><ol type="1"><li><p>数据帧丢失 / 检测到帧出错</p><p><img src="/images/AssetMarkdown/image-20221117212602243.png" alt="image-20221117212602243" style="zoom: 67%;" /></p></li><li><p>ACK丢失</p><p><img src="/images/AssetMarkdown/image-20221117212647980.png" alt="image-20221117212647980" style="zoom:67%;" /></p></li><li><p>ACK迟到</p><p><img src="/images/AssetMarkdown/image-20221117212727252.png" alt="image-20221117212727252" style="zoom:67%;" /></p></li></ol><h4 id="停止-等待协议性能分析">3.4.2.3 停止-等待协议：性能分析</h4><p>优点：</p><ol type="1"><li>简单</li></ol><p>缺点：</p><ol type="1"><li>信道利用率太低</li></ol><p><img src="/images/AssetMarkdown/image-20221117212856763.png" alt="image-20221117212856763" style="zoom:80%;" /></p><h4 id="信道利用率">3.4.2.4 信道利用率</h4><p>信道利用率：发送方在一个发送周期内，有效地发送数据所需要的时间占整个发送周期的比率</p><ol type="1"><li>信道利用率 = <span class="math inline">\((L / C)/T\)</span></li><li><span class="math inline">\(L\)</span>：<spanclass="math inline">\(T\)</span>时间内发送<spanclass="math inline">\(L\)</span>比特数据</li><li><span class="math inline">\(C\)</span>：发送方数据传输率</li><li><spanclass="math inline">\(T\)</span>：发送周期，从开始发送数据，到收到第一个确认帧为止</li></ol><p>信道吞吐率 = 信道利用率 × 发送方的发送速率</p><p><img src="/images/AssetMarkdown/image-20221117213239451.png" alt="image-20221117213239451" style="zoom:80%;" /></p><h4 id="总结-8">3.4.2.5 总结</h4><p><img src="/images/AssetMarkdown/image-20221117213301011.png" alt="image-20221117213301011" style="zoom:80%;" /></p><h3 id="后退n帧协议-go-back-n">3.4.3 后退N帧协议 Go Back N</h3><h4 id="停止等待协议的弊端">3.4.3.1 停止等待协议的弊端</h4><ol type="1"><li>信道利用率过低</li></ol><p><img src="/images/AssetMarkdown/image-20221117220840158.png" alt="image-20221117220840158" style="zoom: 67%;" /></p><h4 id="后退n帧协议中的滑动窗口">3.4.3.2 后退N帧协议中的滑动窗口</h4><ol type="1"><li>发送窗口：发送方维持一组连续的允许发送的帧的序号</li><li>接收窗口：接收方维持一组连续的允许接收的帧的序号</li></ol><p><img src="/images/AssetMarkdown/image-20221117221239590.png" alt="image-20221117221239590" style="zoom:67%;" /></p><h4 id="gbn发送方">3.4.3.3 GBN发送方</h4><ol type="1"><li>上层的调用<ol type="1"><li>上层要发送数据时，发送方先检查发送窗口是否已满，如果<strong>未满</strong>，则产生一个帧并将其发送</li><li>如果窗口<strong>已满</strong>，发送方只需将数据返回给上层，暗示上层窗口已满。上层等一会再发送</li><li>实际实现中，发送方可以缓存这些数据，窗口不满时再发送帧</li></ol></li><li>收到了一个ACK<ol type="1"><li>GBN协议中，对n号帧的确认采用<strong>累积确认</strong>的方式，标明接收方已经收到n号帧和它之前的全部帧。</li></ol></li><li>超时事件<ol type="1"><li>协议的名字为后退N帧/回退N帧，来源于出现丢失和时延过长帧时发送方的行为</li><li>就像在停等协议中一样，定时器将再次用于恢复数据帧或确认帧的丢失</li><li>如果出现超时，发送方重传所有已发送但未被确认的帧</li></ol></li></ol><h4 id="gbn接收方">3.4.3.4 GBN接收方</h4><ol type="1"><li>如果正确收到n号帧，并且<strong>按序</strong>，那么接收方为n帧发送一个ACK，并将该帧中的数据部分交付给上层</li><li>其余情况都丢弃帧，并为最近按序接收的帧重新发送ACK<ol type="1"><li>接收方无需缓存任何失序帧，只需要维护一个信息：expectedseqnum(下一个按序接收的帧序号)</li></ol></li></ol><h4 id="运行中的gbn协议">3.4.3.5 运行中的GBN协议</h4><p><img src="/images/AssetMarkdown/image-20221117222217016.png" alt="image-20221117222217016" style="zoom:80%;" /></p><h4 id="滑动窗口长度发送窗口最大为2n-1接收窗口为1">3.4.3.6滑动窗口长度：发送窗口最大为<spanclass="math inline">\(2^{n}-1\)</span>，接收窗口为1</h4><p>窗口大小和序号大小相比，窗口大小过大时，可能导致</p><ol type="1"><li>接收方并不知道收到的0号帧是新的还是旧的</li></ol><h4 id="gbn协议重点总结">3.4.3.7 GBN协议重点总结</h4><ol type="1"><li>累计确认：ACK N表示0~N都已经正常收到</li><li>捎带确认：将确认帧放到接收方要发送的数据中</li><li>接收方只按顺序接收帧，不按序都丢弃</li><li>确认序列号最大的、按序到达的帧</li><li>发送窗口最大为<spanclass="math inline">\(2^{n}-1\)</span>，接收窗口大小为1</li></ol><p><img src="/images/AssetMarkdown/image-20221117223002240.png" alt="image-20221117223002240" style="zoom:80%;" /></p><h4 id="gbn协议性能分析">3.4.3.8 GBN协议性能分析</h4><p>优点：</p><ol type="1"><li>因连续发送数据帧而提高了信道利用率</li></ol><p>缺点：</p><ol type="1"><li>在重传时必须把原来已经正确传送的数据帧重传，是传送效率降低</li></ol><h4 id="总结-9">3.4.3.9 总结</h4><p><img src="/images/AssetMarkdown/image-20221117223109038.png" alt="image-20221117223109038" style="zoom:80%;" /></p><h3 id="选择重传协议-selective-repeat">3.4.4 选择重传协议 SelectiveRepeat</h3><h4 id="gbn协议的弊端">3.4.4.1 GBN协议的弊端</h4><ol type="1"><li>累计确认 ==&gt; 批量重传</li><li>解决方法：只重传出错的帧<ol type="1"><li>设置单个确认，同时加大接收窗口，设置接收缓存，缓存乱序到达的帧</li></ol></li></ol><h4 id="选择重传协议中的滑动窗口">3.4.4.2 选择重传协议中的滑动窗口</h4><p><img src="/images/AssetMarkdown/image-20221117214705045.png" alt="image-20221117214705045" style="zoom:80%;" /></p><h4 id="sr发送方">3.4.4.3 SR发送方</h4><ol type="1"><li><p>上层的调用</p><ol type="1"><li>从上层收到数据后，SR发送方检查下一个可用于该帧的序号，如果序号位于发送窗口内，则发送数据帧</li><li>否则就像GBN一样，要么将数据缓存，要么返回给上层之后再传输</li></ol></li><li><p>收到了一个ACK</p><ol type="1"><li>如果收到ACK，加入该帧序号在窗口内，则SR发送方将那个被确认的帧标记为已接收</li><li>如果该帧序号是窗口的下界(最左边第一个窗口对应的序号)，则窗口向前移动到具有最小序号的未确认帧处</li><li>如果窗口移动了并且有序号在窗口内的未发送帧，则发送这些帧</li></ol><p><img src="/images/AssetMarkdown/image-20221117215330140.png" alt="image-20221117215330140" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221117215306773.png" alt="image-20221117215306773" style="zoom:80%;" /></p></li><li><p>超时事件</p><ol type="1"><li>每个帧都有自己的定时器，一个超时事件发生后只重传一个帧</li></ol></li></ol><h4 id="sr接收方">3.4.4.4 SR接收方</h4><p>来者不拒(窗口内的帧)</p><ol type="1"><li>SR接收方将<strong>确认一个正确接收的帧</strong>而<strong>不管其是否按序</strong></li><li>失序的帧将被<strong>缓存</strong>，并返回给发送方一个该帧的确认帧【收谁确认谁】，直到所有帧(即序号更小的帧)皆被收到为止</li><li>这时才可以将一批帧按序交付给上层，然后向前移动滑动窗口</li></ol><p><img src="/images/AssetMarkdown/image-20221117215537537.png" alt="image-20221117215537537" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221117215630148.png" alt="image-20221117215630148" style="zoom:80%;" /></p><h4 id="运行中的sr">3.4.4.5 运行中的SR</h4><p><img src="/images/AssetMarkdown/image-20221117215928586.png" alt="image-20221117215928586" style="zoom:80%;" /></p><h4 id="滑动窗口长度发送窗口接收窗口最大为2n-1">3.4.4.6滑动窗口长度：发送窗口=接收窗口，最大为<spanclass="math inline">\(2^{n-1}\)</span></h4><p>窗口大小和序号大小相比，窗口大小过大时，可能导致</p><ol type="1"><li>接收方并不知道收到的0号帧是新的还是旧的</li></ol><p><img src="/images/AssetMarkdown/image-20221117220136622.png" alt="image-20221117220136622" style="zoom:80%;" /></p><p>滑动窗口大小的设置：</p><ol type="1"><li>发送窗口最好等于接收窗口<ol type="1"><li>大了会溢出，小了没意义</li></ol></li><li><span class="math inline">\(W_{Tmax}=W_{Rmax}=2^{n-1}\)</span><ol type="1"><li><span class="math inline">\(n\)</span>为编号的位数</li></ol></li></ol><h4 id="sr协议重点总结">3.4.4.7 SR协议重点总结</h4><ol type="1"><li>对数据逐一确认，收一个确认一个</li><li>只重传出错帧</li><li>接收方有缓存</li><li><span class="math inline">\(W_{Tmax}=W_{Rmax}=2^{n-1}\)</span></li></ol><p><img src="/images/AssetMarkdown/image-20221117220548869.png" alt="image-20221117220548869" style="zoom:80%;" /></p><h4 id="总结-10">3.4.4.8 总结</h4><p><img src="/images/AssetMarkdown/image-20221117220607511.png" alt="image-20221117220607511" style="zoom:80%;" /></p><h2 id="介质访问控制">3.5 介质访问控制</h2><p><img src="/images/AssetMarkdown/image-20221122113957794.png" alt="image-20221122113957794" style="zoom:80%;" /></p><h3 id="信道划分介质访问控制">3.5.1 信道划分介质访问控制</h3><h4 id="传输数据使用的两种链路">3.5.1.1 传输数据使用的两种链路</h4><ol type="1"><li>点对点链路<ol type="1"><li>两个相邻节点通过一个链路相连，没有第三者</li><li>应用：PPP协议，常用于<strong>广域网</strong></li></ol></li><li>广播式电路<ol type="1"><li>所有主机共享通信介质</li><li>应用：早期的总线以太网、无线局域网，常用于<strong>局域网</strong></li><li>典型拓扑结构：<ol type="1"><li>总线型</li><li>星型：逻辑总线型，中心一般是一个集线器，更加灵活</li></ol></li></ol></li></ol><h4 id="介质访问控制-1">3.5.1.2 介质访问控制</h4><p>介质访问控制：采取一定的措施，使得两对节点之间的通信不会发生互相干扰的情况</p><ol type="1"><li>静态划分信道：信道划分介质访问控制<ol type="1"><li>频分多路复用 FDM</li><li>时分多路复用 TDM</li><li>波分多路复用 WDM</li><li>码分多路复用 CDM</li></ol></li><li>动态划分信道<ol type="1"><li>轮询访问介质控制<ol type="1"><li>令牌传递协议</li></ol></li><li>随机访问介质访问控制<ol type="1"><li>ALOHA协议</li><li>CSMA协议</li><li>CSMA/CD协议</li><li>CSMA/CA协议</li></ol></li></ol></li></ol><h4 id="信道划分介质访问控制-1">3.5.1.3 信道划分介质访问控制</h4><ol type="1"><li>信道划分介质访问控制：将使用介质的每个设备与来自同一信道上的其他设备的<strong>通信隔离开</strong>，把<strong>时域和频域资源</strong>合理的分配给网络上的设备</li><li>多路复用技术：把多个信号组合在一条物理信道上进行传输，使得多个计算机或终端设备<strong>共享信道资源</strong>，提高信道利用率</li><li><strong>实际就是把广播信道转变为点对点信道</strong></li></ol><p><img src="/images/AssetMarkdown/image-20221122101917849.png" alt="image-20221122101917849" style="zoom:80%;" /></p><h5 id="频分多路复用-fdm">3.5.1.3.1 频分多路复用 FDM</h5><ol type="1"><li>所有用户在同样时间，占用不同的带宽(频率带宽)资源</li></ol><p><img src="/images/AssetMarkdown/image-20221122102140039.png" alt="image-20221122102140039" style="zoom:80%;" /></p><h5 id="时分多路复用-tdm">3.5.1.3.2 时分多路复用 TDM</h5><ol type="1"><li>将时间划分为一段段等长的时分复用帧(TDM帧)</li><li>每个用户在每一个TDM帧中占用固定序号的时隙，所有用户轮流占用信道</li><li>若一个TDM帧为8000b/s，则每个人最高2000b/s</li></ol><p><img src="/images/AssetMarkdown/image-20221122102417465.png" alt="image-20221122102417465" style="zoom:80%;" /></p><h5 id="改进的时分复用统计时分复用-stdm">3.5.1.3.3改进的时分复用：统计时分复用 STDM</h5><ol type="1"><li>若一个STDM帧为8000b/s，则每个人最高8000b/s</li></ol><p><img src="/images/AssetMarkdown/image-20221122102547421.png" alt="image-20221122102547421" style="zoom:80%;" /></p><h5 id="波分多路复用-wdm">3.5.1.3.4 波分多路复用 WDM</h5><ol type="1"><li>波分多路复用：就是<strong>光的频分多路复用</strong></li></ol><p><img src="/images/AssetMarkdown/image-20221122102939945.png" alt="image-20221122102939945" style="zoom:80%;" /></p><h5 id="码分多路复用-cdm重点">3.5.1.3.5 码分多路复用CDM(<strong>重点</strong>)</h5><ol type="1"><li><p><strong>码分多址CDMA</strong>：码分复用的一种方式</p></li><li><p>1个比特分为多个码片/芯片(chip)，每个站点指定一个唯一的m位的芯片序列</p></li><li><p>发送1时站点发送芯片序列，发送0时发送芯片序列的反码(通常把0写成-1)</p><table><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">A</th><th style="text-align: center;">B</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">芯片序列</td><td style="text-align: center;">+1 -1 -1 +1 +1 +1 +1 -1</td><td style="text-align: center;">-1 +1 -1 +1 -1 +1 +1 +1</td></tr><tr class="even"><td style="text-align: center;">反码</td><td style="text-align: center;">-1 +1 +1 -1 -1 -1 -1 +1</td><td style="text-align: center;">+1 -1 +1 -1 +1 -1 -1 -1</td></tr></tbody></table></li><li><p><strong>如何不打架</strong>：多个站点同时发送数据时，要求每个站点<strong>芯片序列相互正交</strong>(规格内积化为0)</p><ol type="1"><li>即A和B发送的数据，对应位相乘再相加，结果为0</li></ol></li><li><p><strong>如何合并</strong>：各路数据在信道中被<strong>线性相加</strong></p><ol type="1"><li>如A发送0，B发送1，则为(-2 +2 0 0 -2 0 0 +2)</li></ol></li><li><p><strong>如何分离</strong>：合并的数据与源站的芯片序列规格化内积</p><ol type="1"><li>A发送的数据：(+1 -1 -1 +1 +1 +1 +1 -1) · (-2 +2 0 0 -2 0 0 +2) / 8 =-1 ==&gt; 0</li><li>B发送的数据：(-1 +1 -1 +1 -1 +1 +1 +1) · (-2 +2 0 0 -2 0 0 +2) / 8 =1 ==&gt; 1</li></ol></li></ol><h4 id="cd还是cs">3.5.1.4 CD还是CS</h4><p><img src="/images/AssetMarkdown/image-20221122104208664.png" alt="image-20221122104208664" style="zoom:80%;" /></p><h3 id="aloha协议">3.5.2 ALOHA协议</h3><h4 id="纯aloha协议">3.5.2.1 纯ALOHA协议</h4><p>纯ALOHA协议思想：不监听信道，不按时间发送，随即重发。<strong>想发就发</strong></p><ol type="1"><li>冲突检测：如果发生冲突，接收方就会检测出差错，然后不予确认，发送方在一定时间内收不到ACK就判断发生冲突</li><li>冲突解决：超时后等一段随机的时间，然后重传</li></ol><p><img src="/images/AssetMarkdown/image-20221122104659713.png" alt="image-20221122104659713" style="zoom:80%;" /></p><h4 id="时隙aloha协议">3.5.2.2 时隙ALOHA协议</h4><p>时隙ALOHA协议思想：把时间分为若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，如果发生冲突，则必须等到下一个时间片开始时刻再发送。<strong>控制想发就发的随意性</strong></p><p><img src="/images/AssetMarkdown/image-20221122105526808.png" alt="image-20221122105526808" style="zoom:80%;" /></p><h4 id="关于aloha协议">3.5.2.3 关于ALOHA协议</h4><ol type="1"><li>纯ALOHA比时隙ALOHA吞吐量更低，效率更低</li><li>纯ALOHA想发就发，时隙ALOHA只有在时间片段开始时才能发</li></ol><h3 id="csma协议">3.5.3 CSMA协议</h3><p>CSMA：载波监听多路访问协议，carrier sense multiple access</p><ol type="1"><li><strong>CS</strong>：载波侦听/监听，每一个站在<strong>发送数据之前</strong>要检测一下总线上是否有其他计算机在发送数据<ol type="1"><li>检测方法：当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大(互相叠加)。当一个站检测到的信号电压摆动值超过一定门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞，即发生了冲突。</li></ol></li><li><strong>MA</strong>：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。</li><li><strong>协议思想</strong>：发送帧之前，<strong>监听</strong>信道</li><li>监听结果：<ol type="1"><li>信道空闲：发送完整帧<ol type="1"><li>1-坚持CSMA</li><li>非坚持CSMA</li><li>p-坚持CSMA</li></ol></li><li>信道忙：推迟发送</li></ol></li></ol><h4 id="坚持csma">3.5.3.1 1-坚持CSMA</h4><ol type="1"><li>坚持：指的是对于<strong>监听信道忙</strong>之后的坚持</li><li>1-坚持CSMA思想：<ol type="1"><li>如果一个主机要发送消息，那么它先监听信道</li><li><strong>空闲则直接传输，不必等待</strong></li><li><strong>忙则一直监听，直到空闲马上传输</strong></li><li>如果<strong>有冲突</strong>(一段时间内未收到肯定回复)，则等待一个随机长的时间再监听，重复上述过程</li></ol></li><li><strong>优点</strong>：只要媒体空闲，站点就马上发送，避免了媒体利用率的损失</li><li><strong>缺点</strong>：假如有两个或两个以上的站点有数据要发送，冲突就不可避免</li></ol><h4 id="非坚持csma">3.5.3.2 非坚持CSMA</h4><ol type="1"><li>非坚持：指的是对于<strong>监听信道忙</strong>之后就不继续监听</li><li>非坚持CSMA思想：<ol type="1"><li>如果一个主机要发送消息，那么它先监听信道</li><li><strong>空闲则直接传输，不必等待</strong></li><li><strong>忙则等待一个随机的时间，之后再进行监听</strong></li></ol></li><li>优点：采用随机的重发延迟时间可以减少冲突发生的可能性</li><li>缺点：可能存在大家都在延迟等待过程中，使得媒体仍可能处于空闲状态，媒体使用率降低</li></ol><h4 id="p-坚持csma">3.5.3.3 p-坚持CSMA</h4><ol type="1"><li>p-坚持指的是对于监听信道空闲的处理</li><li>p-坚持CSMA思想:<ol type="1"><li>如果一个主机要发送消息，那么它先监听信道</li><li><strong>空闲则以p概率直接传输，不必等待；概率1-p等待到下一个时间槽再传输</strong></li><li><strong>忙则等待一个随机的时间之后再进行监听</strong></li></ol></li><li>优点：既能像非坚持算法那样减少冲突，又能像1-坚持算法那样减少媒体空闲时间的这种方案</li><li>缺点：发生冲突后无法及时发现，仍会坚持把数据帧发完，造成浪费</li></ol><h4 id="三种csma对比总结">3.5.3.4 三种CSMA对比总结</h4><p><img src="/images/AssetMarkdown/image-20221122112151722.png" alt="image-20221122112151722" style="zoom: 80%;" /></p><h3 id="csmacd协议">3.5.4 CSMA/CD协议</h3><p>CSMA/CD：载波监听多点接入/碰撞检测，carrier sense multiple accesswith collision detection</p><ol type="1"><li><strong>CS</strong>：载波侦听/监听，每一个站在<strong>发送数据之前</strong>以及<strong>发送数据时</strong>要检测一下总线上是否有其他计算机在发送数据</li><li><strong>MA</strong>：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。<strong>总线型网络</strong></li><li><strong>CD</strong>：碰撞检测(冲突检测)，<strong>“边发送边监听”</strong>，适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据。<strong>半双工网络</strong></li></ol><p><img src="/images/AssetMarkdown/image-20221122114347472.png" alt="image-20221122114347472" style="zoom:80%;" /></p><h4 id="传播时延对载波监听的影响">3.5.4.1 传播时延对载波监听的影响</h4><ol type="1"><li><span class="math inline">\(\tau\)</span>：端到端传播时延</li><li><spanclass="math inline">\(2\tau\)</span>：总线的端到端往返传播时延/争用期/冲突窗口/碰撞窗口</li><li>只要经过<spanclass="math inline">\(2\tau\)</span>时间还没有检测到碰撞，就能肯定这次发送不会发生碰撞</li></ol><p><img src="/images/AssetMarkdown/image-20221122121634471.png" alt="image-20221122121634471" style="zoom:80%;" /></p><h4 id="如何确定碰撞后的重传时机">3.5.4.2 如何确定碰撞后的重传时机</h4><p><strong>阶段二进制指数规避算法</strong>：</p><ol type="1"><li>确定<strong>基本退避(推迟)时间</strong>为：争用期<spanclass="math inline">\(2\tau\)</span></li><li>定义参数k，它等于<strong>重传次数</strong>，但k不超过10，即<strong>k=min[重传次数，10]</strong><ol type="1"><li>当重传次数不超过10时，k等于重传次数</li><li>当重传次数大于10时，k就不再增大而一直等于10</li></ol></li><li>从离散的整数集合<strong>[0， 1， …，2<sup>k</sup>-1]</strong>中随机取出一个数r，重传所需要退避的时间就是<strong>r倍的基本退避时间</strong>，即<spanclass="math inline">\(2r\ \tau\)</span></li><li>当重传达<strong>16次</strong>仍不能成功时，说明网络太拥挤，认为此帧永远无法正确发出，抛弃此帧并向高层报告出错</li></ol><p><img src="/images/AssetMarkdown/image-20221122122233091.png" alt="image-20221122122233091" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221122122321761.png" alt="image-20221122122321761" style="zoom: 67%;" /></p><h4 id="最小帧长-2tau-数据传输速率">3.5.4.3 最小帧长 = <spanclass="math inline">\(2\tau\)</span> × 数据传输速率</h4><ol type="1"><li>帧的传输时延至少要两倍于信号在总线中的传播时延</li><li><strong>最小帧长 = <span class="math inline">\(2\tau\)</span> ×数据传输速率</strong></li></ol><p><img src="/images/AssetMarkdown/image-20221122122456786.png" alt="image-20221122122456786" style="zoom:80%;" /></p><h4 id="总结-11">3.5.4.4 总结</h4><p><img src="/images/AssetMarkdown/image-20221122122600976.png" alt="image-20221122122600976" style="zoom:80%;" /></p><h3 id="csmaca协议">3.5.5 CSMA/CA协议</h3><p>CSMA/CA：载波监听多点接入/碰撞避免，carrier sense multiple accesswith collision avoidance</p><ol type="1"><li>应用：无线局域网<ol type="1"><li>无法做到360°全面检测碰撞</li><li>隐蔽站：当A和C都检测不到信号，认为信道空闲时，同时向B发送数据帧，就会导致冲突</li></ol></li></ol><h4 id="csmaca协议工作原理">3.5.5.1 CSMA/CA协议工作原理</h4><ol type="1"><li>发送数据前，先检测信道是否空闲<ol type="1"><li>信道空闲：发出<strong>RTS (request to send)</strong>，RTS包括发射端的地址、接收端的地址、下一份数据将持续发送的时间等信息</li><li>信道忙：等待</li></ol></li><li>接收端收到RTS后，将响应<strong>CTS (clear to send)</strong></li><li>发送端收到CTS后，开始发送数据帧(同时<strong>预约信道</strong>：发送方告知其他站点自己要传多久数据)</li><li>接收端收到数据帧后，将用CRC来检验数据是否正确，正确则响应<strong>ACK帧</strong></li><li>发送方收到ACK就可以进行下一个数据帧的发送，若没有则一直重传至规定重发次数为止(采用<strong>二进制指数退避算法</strong>来确定随机的推迟时间)</li></ol><h4 id="csmaca协议避免冲突的方法">3.5.5.2 CSMA/CA协议避免冲突的方法</h4><ol type="1"><li>预约信道</li><li>ACK帧</li><li>RTS/CTS帧：解决隐蔽站的问题，可以不使用</li></ol><h4 id="csmacd与csmaca">3.5.5.3 CSMA/CD与CSMA/CA</h4><p>相同点:</p><ol type="1"><li>CSMA/CD与CSMA/CA机制都从属于CSMA的思路，其核心是<strong>先听再说</strong></li><li>换言之，两个在接入信道之前都须要进行监听。当发现信道空闲后，才能进行接入</li></ol><p>不同点:</p><ol type="1"><li><strong>传输介质不同</strong>：CSMA/CD用于总线式以太网【有线】，而CSMA/CA用于无线局域网【无线】</li><li><strong>载波检测方式不同</strong>：因传输介质不同，CSMA/CD与CSMA/CA的检测方式也不同。<ol type="1"><li>CSMA/CD：通过电缆中电压的变化来检测，当数据发生碰撞时，电缆中的电压就会随着发生变化</li><li>CSMA/CA：采用能量检测(ED)、载波检测(CS)和能量载波混合检测三种检测信道空闲的方式</li></ol></li><li><strong>CSMA/CD检测冲突，CSMA/CA避免冲突</strong>，二者出现冲突后都会进行<strong>有上限的重传</strong></li></ol><h3 id="轮询访问介质访问控制">3.5.6 轮询访问介质访问控制</h3><ol type="1"><li>信道划分介质访问控制(<strong>MAC，Multiple AccessControl</strong>)协议：<strong>无冲突</strong><ol type="1"><li>基于<strong>多路复用技术</strong>划分资源</li><li>网络负载重：共享信道效率高，且公平</li><li>网络负载轻：共享信道效率低</li></ol></li><li>随机访问MAC协议：<strong>会发生冲突</strong><ol type="1"><li>用户根据意愿<strong>随机</strong>发送信息，发送信息时可独占信道带宽。</li><li>网络负载重：产生冲突开销</li><li>网络负载轻：共享信道效率高，单个结点可利用信道全部带宽</li></ol></li><li>轮询访问MAC协议/轮流协议/轮转访问MAC协议：<strong>无冲突</strong><ol type="1"><li>既要<strong>不产生冲突</strong>，又要发送时<strong>占全部带宽</strong></li><li>分为：轮询协议、令牌传递协议</li></ol></li></ol><h4 id="轮询协议">3.5.6.1 轮询协议</h4><p><strong>主节点轮流要求从属节点发送数据</strong></p><p><img src="/images/AssetMarkdown/image-20221122112756494.png" alt="image-20221122112756494" style="zoom:80%;" /></p><p>缺点：</p><ol type="1"><li>轮询开销</li><li>等待延迟</li><li>单点故障：主节点宕机后，所有节点都无法发送数据</li></ol><h4 id="令牌传递协议">3.5.6.2 令牌传递协议</h4><p><img src="/images/AssetMarkdown/image-20221122113100341.png" alt="image-20221122113100341" style="zoom:80%;" /></p><ol type="1"><li>令牌：一个特殊格式的MAC控制帧，不含任何信息<ol type="1"><li>控制信道的使用，确保同一时刻只有一个结点独占信道</li></ol></li><li>令牌环网无碰撞</li><li>发送过程：<ol type="1"><li>空闲时，令牌会在令牌环网中循环传递</li><li>当主机D要发送数据时，会修改令牌的标志位，同时将数据A附加到令牌上</li><li>令牌会按照令牌环的顺序，在令牌环网上循环一周</li><li>接收方收到包含数据的令牌时，会将数据拷贝一份，并且将自己得到的数据重新附加到令牌上</li><li>发送方再次接收到令牌时，查看令牌上的数据与自己发送的数据是否相同，判断是否发送成功</li></ol></li><li>每个节点都可以在一定时间(令牌持有时间)内获得发送数据的权力，并不是无限制的持有令牌</li><li>缺点：<ol type="1"><li>令牌开销</li><li>等待延迟</li><li>单点故障：一个节点故障，所有节点都无法发送数据</li></ol></li><li>应用于令牌环网<ol type="1"><li>物理：星型拓扑结构</li><li>逻辑：环形拓扑结构</li></ol></li><li>常用于<strong>负载较重、通信量较大</strong>的网络中</li></ol><h3 id="mac协议总结">3.5.7 MAC协议总结</h3><p><img src="/images/AssetMarkdown/image-20221122113644706.png" alt="image-20221122113644706" style="zoom:80%;" /></p><h2 id="局域网以太网无线局域网">3.6 局域网、以太网、无线局域网</h2><h3 id="局域网的基本概念和体系结构">3.6.1局域网的基本概念和体系结构</h3><h4 id="局域网">3.6.1.1 局域网</h4><p>局域网(Local AreaNetwork)：简称<strong>LAN</strong>，是指在<strong>某一区域</strong>内由多台计算机互联成的计算机组，使用<strong>广播信道</strong></p><p>特点</p><ol type="1"><li>覆盖的地理范围较小，只在一个相对独立的局部范围内联，如一座或集中的建筑群内</li><li>使用专门铺设的传输介质(双绞线、同轴电缆)进行联网，数据传输速率高(10Mb/s~10Gb/s)</li><li>通信延迟时间短，误码率低，可靠性较高</li><li>各站为平等关系，共享传输信道</li><li>多采用分布式控制和广播式通信，能进行广播和组播</li></ol><p>决定局域网的主要要素：</p><ol type="1"><li>网络拓扑</li><li>传输介质</li><li>介质访问控制方法</li></ol><h4 id="局域网拓扑结构">3.6.1.2 局域网拓扑结构</h4><p><img src="/images/AssetMarkdown/image-20221122193904955.png" alt="image-20221122193904955" style="zoom:80%;" /></p><h4 id="局域网传输介质">3.6.1.3 局域网传输介质</h4><ol type="1"><li>有线局域网：双绞线、同轴电缆、光纤</li><li>无线局域网：电磁波</li></ol><h4 id="局域网介质访问控制方法">3.6.1.4 局域网介质访问控制方法</h4><ol type="1"><li>CSMA/CD：常用于<strong>总线型局域网</strong>，也用于树型网络</li><li>令牌总线：常用于<strong>总线型局域网</strong>，也用于树型网络<ol type="1"><li>它是把总线型或树型网络中的各个工作站按一定顺序如按接口地址大小排列形成一个逻辑环</li><li>只有令牌持有者才能控制总线，才有发送信息的权力</li></ol></li><li>令牌环：常用于<strong>环形局域网</strong>，如令牌环网</li></ol><h4 id="局域网的分类">3.6.1.5 局域网的分类</h4><ol type="1"><li><strong>以太网</strong><ol type="1"><li>以太网是应用最为广泛的局域网，包括标准以太网(10Mbps)、快速以太网(100Mbps)千兆以太网(1000Mbps)和10G以太网</li><li>它们都符合<strong>IEEE802.3</strong>系列标准规范</li><li>逻辑拓扑总线型，物理拓扑是星型或拓展星型</li><li>使用CSMA/CD.</li></ol></li><li><strong>令牌环网</strong><ol type="1"><li>物理上采用了星形拓扑结构，逻辑上是环形拓扑结构</li><li>已是“明日黄花”</li></ol></li><li>FDDI网(Fiber Distributed Data Interface)<ol type="1"><li>物理上采用了双环拓扑结构，逻辑上是环形拓扑结构</li></ol></li><li>ATM网(Asynchronous Transfer Mode)<ol type="1"><li>较新型的单元交换技术，使用53字节固定长度的单元进行交换</li></ol></li><li><strong>无线局域网</strong>(Wireless Local Area Network;<strong>WLAN</strong>)<ol type="1"><li>采用<strong>IEEE 802.11</strong>标准。</li></ol></li></ol><h4 id="ieee-802标准">3.6.1.6 IEEE 802标准</h4><ol type="1"><li>IEEE 802系列标准：是IEEE 802 LAN/MAN标准委员会制定的局域网、城域网技术标准(1980年2月成立)</li><li>其中最广泛使用的有以太网、令牌环、无线局域网等</li><li>这一系列标准中的每一个子标准都由委员会中的一个专门工作组负责</li></ol><table><thead><tr class="header"><th style="text-align: center;">标准名</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">IEEE 802.3</td><tdstyle="text-align: center;"><strong>以太网</strong>的介质访问控制协议(CSMA/CD)、物理层技术规范</td></tr><tr class="even"><td style="text-align: center;">IEEE 802.5</td><tdstyle="text-align: center;"><strong>令牌环网</strong>的介质访问控制协议、物理层技术规范</td></tr><tr class="odd"><td style="text-align: center;">IEEE 802.8</td><td style="text-align: center;"><strong>光纤</strong>技术咨询组</td></tr><tr class="even"><td style="text-align: center;">IEEE 802.11</td><tdstyle="text-align: center;"><strong>无线局域网</strong>(WLAN)的介质访问控制协议、物理层技术规范</td></tr></tbody></table><h4 id="mac子层和llc子层">3.6.1.7 MAC子层和LLC子层</h4><ol type="1"><li><strong>LLC子层</strong>：逻辑链路控制子层，为<strong>网络层</strong>提供服务<ol type="1"><li>识别网络层协议，并进行封装</li><li>LLC报头告诉数据链路层一旦帧被接收到时，应当对数据包做如何处理</li><li>为网络层提供服务：无确认无连接、面向连接、带确认无连接、高速传送</li></ol></li><li><strong>MAC子层</strong>：介质访问控制子层，与<strong>物理层</strong>相关<ol type="1"><li>数据帧的封装/卸装</li><li>帧的寻址和识别</li><li>帧的接收与发送</li><li>链路的管理</li><li>帧的差错控制</li><li>屏蔽了不同物理链路种类的差异性</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221122194906726.png" alt="image-20221122194906726" style="zoom:80%;" /></p><h4 id="总结-12">3.6.1.8 总结</h4><p><img src="/images/AssetMarkdown/image-20221122194932952.png" alt="image-20221122194932952" style="zoom:80%;" /></p><h3 id="以太网-ethernet">3.6.2 以太网 Ethernet</h3><h4 id="以太网概述">3.6.2.1 以太网概述</h4><ol type="1"><li>以太网(<strong>Ethernet</strong>)指的是：由Xerox公司创建并由Xerox、Intel和DEC公司联合开发的<strong>基带总线局域网规范</strong>，是当今现有局域网采用的最通用的通信协议标准</li><li>以太网络使用<strong>CSMA/CD</strong>(载波监听多路访问及冲突检测)技术</li><li>以太网在局域网各种技术中占统治性地位:<ol type="1"><li>造价低廉(以太网网卡不到100块)</li><li>是应用最广泛的局域网技术</li><li>比令牌环网、ATM网便宜，简单</li><li><strong>满足网络速率要求: 10Mb/s~10Gb/s</strong></li></ol></li><li>以太网两个标准<ol type="1"><li><strong>DIX Ethernet V2</strong>：第一个局域网产品(以太网)规约</li><li><strong>IEEE 802.3</strong>：IEEE802委员会802.3工作组制定的第一个IEEE的以太网标准，格式有一丢丢改动</li></ol></li><li>以太网，也叫802.3局域网</li></ol><h4 id="以太网提供无连接不可靠的服务">3.6.2.2以太网提供无连接、不可靠的服务</h4><ol type="1"><li><strong>无连接</strong>：发送方和接收方之间无“握手过程”</li><li><strong>不可靠</strong>：不对发送方的数据顿编号，接收方不向发送方进行确认，差错帧直接丢弃，差错纠正由高层负责</li><li><strong>以太网只实现无差错接收，不实现可靠传输</strong><ol type="1"><li>无差错接收：保证接收到的帧均正确，不正确的帧直接丢弃</li><li>可靠传输：保证所有帧都正确接收</li></ol></li></ol><h4 id="以太网传输介质与拓扑结构的发展">3.6.2.3以太网传输介质与拓扑结构的发展</h4><p><img src="/images/AssetMarkdown/image-20221122195826747.png" alt="image-20221122195826747" style="zoom:80%;" /></p><h4 id="base-t以太网">3.6.2.4 10BASE-T以太网</h4><p>10BASE-T是传送<strong>基带信号</strong>的双绞线以太网，T表示采用<strong>双绞线</strong>，现10BASE-T采用的是<strong>无屏蔽双绞线(UTP)</strong>，传输速率是<strong>10Mb/s</strong></p><ol type="1"><li><strong>物理上采用星型拓扑，逻辑上总线型</strong>，每段双绞线最长为<strong>100m</strong></li><li>采用<strong>曼彻斯特编码</strong></li><li>采用<strong>CSMA/CD</strong>介质访问控制</li></ol><h4 id="适配器与mac地址">3.6.2.5 适配器与MAC地址</h4><ol type="1"><li>计算机与外界有局域网的连接是通过<strong>通信适配器</strong>的<ol type="1"><li>网络接口板</li><li>网络接口卡NIC (network interface card)</li><li>NOW，不再使用单独网卡</li><li>适配器上装有处理器和存储器(包括RAM和ROM)</li><li>ROM上有计算机硬件地址<strong>MAC地址</strong></li></ol></li><li>在局域网中，<strong>硬件地址</strong>又称为<strong>物理地址</strong>，或<strong>MAC地址</strong>【实际上是标识符】</li><li><strong>MAC地址</strong>：每个适配器有一个<strong>全球唯一</strong>的<strong>48位二进制地址</strong>，前24位代表厂家(由IEEE规定)，后24位厂家自己指定。常用6个十六进制数表示，如02-60-8c-e4-b1-21<ol type="1"><li>换网卡之后，MAC地址也会变化</li><li>带电脑出差，MAC地址不会变化</li></ol></li></ol><h4 id="以太网mac帧">3.6.2.6 以太网MAC帧</h4><p>最常用的MAC帧是<strong>以太网V2</strong>的格式</p><p><img src="/images/AssetMarkdown/image-20221122201120733.png" alt="image-20221122201120733" style="zoom:80%;" /></p><ol type="1"><li>前导码：<ol type="1"><li>前同步码：由101010组成，用于接收方同步时钟</li><li>帧开始定界符：结尾是11，表示MAC帧的开始</li></ol></li><li>目的地址：<ol type="1"><li>单播地址：即专有网卡地址</li><li>广播地址：每一位均为1，即FFFFFFFFFFFF</li><li>多播地址</li></ol></li><li>类型：<ol type="1"><li>表示上面网络层使用的协议</li></ol></li><li>数据：<ol type="1"><li>长度可变</li><li>最多为1500，即MTU</li><li>最小为46，要满足以太网的最短帧长64B</li></ol></li><li>FCS：<ol type="1"><li>帧检验序列</li></ol></li><li>没有帧结束定界符：<ol type="1"><li>采用曼彻斯特编码，当不发送数据时，没有电压变化</li><li>两个帧之间会有最小间隔</li></ol></li></ol><p>与IEEE 802.3的区别：</p><ol type="1"><li>第三个字段是长度/类型</li><li>当长度/类型字段小于0x0600时，数据字段必须装入LLC子层</li></ol><h4 id="高速以太网">3.6.2.7 高速以太网</h4><p>速率<spanclass="math inline">\(\ge\)</span><strong>100Mb/s</strong>的以太网，称为高速以太网</p><p><img src="/images/AssetMarkdown/image-20221122201306224.png" alt="image-20221122201306224" style="zoom:80%;" /></p><h4 id="总结-13">3.6.2.8 总结</h4><p><img src="/images/AssetMarkdown/image-20221122201323708.png" alt="image-20221122201323708" style="zoom:80%;" /></p><h3 id="无线局域网">3.6.3 无线局域网</h3><h4 id="ieee-802.11">3.6.3.1 IEEE 802.11</h4><p><strong>IEEE802.11</strong>是<strong>无线局域网</strong>通用的标准，它是由IEEE所定义的无线网络通信的标准。</p><p><img src="/images/AssetMarkdown/image-20221122201506771.png" alt="image-20221122201506771" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221231171825181.png" alt="image-20221231171825181" style="zoom:80%;" /></p><h4 id="的mac帧头格式">3.6.3.2 802.11的MAC帧头格式</h4><p><img src="/images/AssetMarkdown/image-20221122201541222.png" alt="image-20221122201541222" style="zoom:80%;" /></p><p><strong>AP</strong>：无线接入点，也叫基站</p><p>例：若设备A向设备B发送消息，距离A近的基站为AP1，距离B近的基站为AP2，则</p><ol type="1"><li>A会将数据通过电磁波发送给AP1</li><li>AP1将数据发送给AP2</li><li>AP2通过电磁波将数据发送给B</li><li>在此过程中，MAC帧头为<ol type="1"><li><strong>DA</strong>目的地址：mac(B)</li><li><strong>SA</strong>源地址：mac(A)</li><li><strong>RA</strong>接收端：mac(AP2)</li><li><strong>TA</strong>发送端：mac(AP1)</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221122202022344.png" alt="image-20221122202022344" style="zoom:80%;" /></p><h4 id="无线局域网的分类">3.6.3.3 无线局域网的分类</h4><ol type="1"><li><p>有固定基础设施的无线局域网</p><ol type="1"><li>BSS：基本服务集</li><li>ESS：扩展服务集</li></ol><p><img src="/images/AssetMarkdown/image-20221122202351956.png" alt="image-20221122202351956" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221122202413035.png" alt="image-20221122202413035" style="zoom:80%;" /></p></li><li><p>无固定基础设施的无线局域网的自组织网络</p><p><img src="/images/AssetMarkdown/image-20221122202439934.png" alt="image-20221122202439934" style="zoom:80%;" /></p></li></ol><h2 id="广域网">3.7 广域网</h2><h3 id="广域网概述">3.7.1 广域网概述</h3><ol type="1"><li>广域网(WAN， Wide Area Network)，通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个城市或国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络</li><li>广域网的通信子网主要使用<strong>分组交换</strong>技术。广域网的通信子网可以利用公用分组交换网、卫星通信网和无线分组交换网，它将分布在不同地区的<strong>局域网或计算机系统</strong>互连起来，达到<strong>资源共享</strong>的目的。如因特网(Internet)是世界范围内最大的广域网</li><li>广域网与局域网的区别<ol type="1"><li>广域网覆盖的网络体系结构层次：物理层、链路层、网络层</li><li>局域网覆盖的网络体系结构层次：物理层、链路层</li><li>广域网普遍采用点对点，通过一个链路相连，全双工或者半双工</li><li>局域网普遍采用多点接入技术</li><li>广域网强调资源共享</li><li>局域网强调数据传输</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221122202816704.png" alt="image-20221122202816704" style="zoom:80%;" /></p><h3 id="ppp协议面向字节">3.7.2 PPP协议：面向字节</h3><h4 id="ppp协议的特点">3.7.2.1 PPP协议的特点</h4><p>点对点协议PPP(Point-to-PointProtocol)：是目前使用最广泛的数据链路层协议</p><ol type="1"><li>用户使用拨号电话接入因特网时，一般都使用PPP协议</li><li><strong>只支持全双工链路</strong></li></ol><h4 id="ppp协议应满足的要求">3.7.2.2 PPP协议应满足的要求</h4><ol type="1"><li><strong>简单</strong>：对于链路层的帧，无需纠错，无需序号，无需流量控制。</li><li><strong>封装成帧</strong>：帧定界符</li><li><strong>透明传输</strong>：与帧定界符一样比特组合的数据应该如何处理异步线路用字节填充，同步线路用比特填充</li><li><strong>多种网络层协议</strong>：封装的IP数据报可以采用多种协议。</li><li><strong>多种类型链路</strong>：串行/并行，同步/异步，电/光</li><li><strong>差错检测</strong>：错就丢弃</li><li><strong>检测连接状态</strong>：链路是否正常工作</li><li><strong>最大传送单元</strong>：数据部分最大长度MTU，一般不超过1500B</li><li><strong>网络层地址协商</strong>：知道通信双方的网络层地址</li><li><strong>数据压缩协商</strong></li></ol><h4 id="ppp协议无需满足的要求">3.7.2.3 PPP协议无需满足的要求</h4><ol type="1"><li><strong>纠错</strong></li><li><strong>流量控制</strong></li><li><strong>序号</strong></li><li><strong>不支持多点线路</strong></li></ol><h4 id="ppp协议的三个组成部分">3.7.2.4 PPP协议的三个组成部分</h4><ol type="1"><li>一个将IP数据报封装到串行链路(同步串行/异步串行)的方法</li><li>链路控制协议<strong>LCP</strong>：建立并维护数据链路连接。<strong>身份验证</strong></li><li>网络控制协议<strong>NCP</strong>：PPP可支持多种网络层协议，每个不同的网络层协议都要一个相应的NCP来配置，为网络层协议建立和配置逻辑连接</li></ol><h4 id="ppp协议的状态图">3.7.2.5 PPP协议的状态图</h4><p><img src="/images/AssetMarkdown/image-20221122203858835.png" alt="image-20221122203858835" style="zoom:80%;" /></p><h4 id="ppp协议的帧格式">3.7.2.6 PPP协议的帧格式</h4><p><img src="/images/AssetMarkdown/image-20221122204013649.png" alt="image-20221122204013649" style="zoom:80%;" /></p><h3 id="hdlc协议面向比特">3.7.3 HDLC协议：面向比特</h3><h4 id="hdlc协议简介">3.7.3.1 HDLC协议简介</h4><ol type="1"><li><strong>高级数据链路控制(High-Level Data LinkControl或简称HDLC)</strong>：是一个在同步网上传输数据、<strong>面向比特</strong>的数据链路层协议<ol type="1"><li>由国际标准化组织(<strong>ISO</strong>)根据IBM公司的SDLC(SynchronousDataLink Control)协议扩展开发而成的</li></ol></li><li>数据报文可透明传输，用于实现透明传输的"<strong>0比特插入法</strong>”易于硬件实现</li><li><strong>采用全双工通信</strong></li><li>所有帧采用<strong>CRC检验</strong>，对信息帧进行顺序<strong>编号</strong>，可防止漏收或重份，传输可靠性高</li></ol><h4 id="hdlc的站">3.7.3.2 HDLC的站</h4><ol type="1"><li><strong>主站</strong>：主要功能是发送命令(包括数据信息)帧、接收响应帧，并负责对整个链路的控制系统的初启、流程的控制、差错检测或恢复等。</li><li><strong>从站</strong>：主要功能是接收由主站发来的命令帧，向主站发送响应帧，并且配合主站参与差错恢复等链路控制。</li><li><strong>复合站</strong>：主要功能是既能发送，又能接收命令帧和响应顿，并且负责整个链路的控制。</li></ol><p>三种数据操作方式</p><ol type="1"><li>正常响应方式：从站发送数据，要先经过主站的同意</li><li>异步平衡方式：每个复合站均可以进行数据传输，每个站地位平等</li><li>异步响应方式：从站可以不经过主站的同意，就发送数据</li></ol><h4 id="hdlc的帧格式">3.7.3.3 HDLC的帧格式</h4><p><img src="/images/AssetMarkdown/image-20221122204727226.png" alt="image-20221122204727226" style="zoom:80%;" /></p><h3 id="ppp协议-hdlc协议">3.7.4 PPP协议 &amp; HDLC协议</h3><p>相同点：</p><ol type="1"><li>均只支持<strong>全双工</strong>链路</li><li>都可以实现透明传输</li><li>都可以实现差错检测，但不纠正差错</li></ol><p>不同点：</p><p><img src="/images/AssetMarkdown/image-20221122204853951.png" alt="image-20221122204853951" style="zoom:80%;" /></p><h3 id="总结-14">3.7.5 总结</h3><p><img src="/images/AssetMarkdown/image-20221122204947587.png" alt="image-20221122204947587" style="zoom:80%;" /></p><h2 id="链路层设备">3.8 链路层设备</h2><h3 id="物理层扩展以太网">3.8.1 物理层扩展以太网</h3><p><img src="/images/AssetMarkdown/image-20221122205436676.png" alt="image-20221122205436676" style="zoom:80%;" /></p><h3 id="链路层扩展以太网网桥">3.8.2 链路层扩展以太网：网桥</h3><p>链路层扩展以太网的设备：网桥&amp;交换机</p><p><img src="/images/AssetMarkdown/image-20221122205855504.png" alt="image-20221122205855504" style="zoom:80%;" /></p><ol type="1"><li><strong>网桥</strong>：根据<strong>MAC帧的目的地址</strong>对帧进行<strong>转发</strong>和<strong>过滤</strong><ol type="1"><li>当网桥收到一个帧时，并不向所有接口转发此帧，而是先检查此帧的目的MAC地址，然后再确定将该顿转发到哪一个接口，或者是把它丢弃(即过滤)</li></ol></li><li><strong>网段</strong>：一般指一个计算机网络中使用同一物理层设备(传输介质，中继器，集线器等)能够直接通讯的那一部分</li><li>网桥的优点：<ol type="1"><li>过滤通信量，增大吞吐量</li><li>扩大了物理传输范围</li><li>提高了可靠性：一个主机故障，通常只影响一个网段</li><li>可互连不同物理层、不同MAC子层和不同速率的以太网</li></ol></li></ol><h4 id="网桥分类透明网桥">3.8.2.1 网桥分类：透明网桥</h4><p><strong>透明网桥</strong>：“透明”指以太网上的站点并不知道所发送的帧将经过哪几个网桥，是一种即插即用设备--<strong>自学习</strong></p><ol type="1"><li>每过一段时间，就会将转发表情况，然后更新最新的转发表</li></ol><p><img src="/images/AssetMarkdown/image-20221122210837783.png" alt="image-20221122210837783" style="zoom:80%;" /></p><blockquote><ol type="1"><li>若A向B发送一个数据：<ol type="1"><li>A广播式发送数据，当前网段内所有主机均收到该数据，但只有B会处理这个数据</li><li>该数据包到达网桥1的1接口时<ol type="1"><li>A为发送方，因此将（地址A， 接口1）填入转发表</li><li>B为接收方，转发表中没有，因此网桥1会将这个数据包发送到除接口1外的所有接口</li></ol></li><li>该数据包到达CD网段，CD均丢弃该数据包</li><li>该数据包到达网桥2的1接口时<ol type="1"><li>A为发送方，因此将（地址A， 接口1）填入转发表</li><li>B为接收方，转发表中没有，因此网桥2会将这个数据包发送到除接口1外的所有接口</li></ol></li><li>该数据包到达EF网段，EF均丢弃该数据包</li></ol></li><li>然后F向C发送一个数据：<ol type="1"><li>F广播式发送数据，当前网段内所有主机均收到该数据，均丢弃</li><li>该数据包到达网桥2的2接口时<ol type="1"><li>F为发送方，因此将（地址F， 接口2）填入转发表</li><li>C为接收方，转发表中没有，因此网桥2会将这个数据包发送到除接口2外的所有接口</li></ol></li><li>该数据包到达CD网段，C收到数据，D丢弃数据</li><li>该数据包到达网桥1的2号接口时<ol type="1"><li>F为发送方，因此将（地址F， 接口2）填入转发表</li><li>C为接收方，转发表中没有，因此网桥1会将这个数据包发送到除接口2外的所有接口</li></ol></li><li>该数据包到达AB段，AB均丢弃该数据包</li></ol></li><li>然后B向A发送一个数据<ol type="1"><li>B广播式发送数据，当前网段内所有主机均收到该数据，但只有A会处理这个数据</li><li>该数据包到达网桥1的1接口时<ol type="1"><li>B为发送方，因此将（地址B， 接口1）填入转发表</li><li>A为接收方，转发表中存在，且为接口1，因此网桥1不会再转发</li></ol></li></ol></li></ol></blockquote><h4 id="网桥分类源路由网桥">3.8.2.2 网桥分类：源路由网桥</h4><ol type="1"><li><strong>源路由网桥</strong>：在发送帧时，把详细的<strong>最佳路由信息</strong>(路由最少/时间最短)放在<strong>帧的首部</strong>中</li><li><strong>方法</strong>：源站以广播方式向欲通信的目的站发送一个<strong>发现帧</strong><ol type="1"><li>发现帧会原路返回</li><li>发现帧中会存储经过路由数量/时间，由发送方进行比较选择</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221122211055595.png" alt="image-20221122211055595" style="zoom:80%;" /></p><h3 id="多接口网桥以太网交换机">3.8.3 多接口网桥：以太网交换机</h3><h4 id="以太网交换机的简介">3.8.3.1 以太网交换机的简介</h4><p>独占传输媒体带宽：</p><ol type="1"><li>若使用集线器<ol type="1"><li>假设一个冲突域的带宽为10Mb/s，则每个主机的带宽为2.5Mb/s</li></ol></li><li>若使用集线器以太网交换机<ol type="1"><li>假设以太网交换机的带宽为10Mb/s，则每个冲突域的带宽均为10Mb/s</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221122211448383.png" alt="image-20221122211448383" style="zoom:80%;" /></p><h4 id="以太网交换机的两种交换方式">3.8.3.2以太网交换机的两种交换方式</h4><ol type="1"><li>直通式交换机<ol type="1"><li>查完<strong>目的地址(6B)</strong>就<strong>立刻转发</strong></li><li><strong>延迟小</strong>，可靠性低，无法支持具有不同速率的端口的交换</li></ol></li><li>存储转发式交换机<ol type="1"><li>将帧放入<strong>高速缓存</strong>，并检查否正确，正确则转发，错误则丢弃</li><li><strong>延迟大</strong>，可靠性高，可以支持具有不同速率的端口的交换</li></ol></li></ol><h3 id="冲突域和广播域">3.8.4 冲突域和广播域</h3><ol type="1"><li><strong>冲突域</strong>：在同一个冲突域中的每一个节点都能收到所有被发送的帧<ol type="1"><li>简单的说，就是同一时间内只能有一台设备发送信息的范围</li></ol></li><li><strong>广播域</strong>：网络中能接收任一设备发出的广播帧的所有设备的集合<ol type="1"><li>简单的说，如果站点发出一个广播信号，所有能接收收到这个信号的设备范围称为一个广播域</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221122211925798.png" alt="image-20221122211925798" style="zoom:80%;" /></p><blockquote><ol type="1"><li>广播域的个数：看有几个路由器</li><li>冲突域的个数：看以太网交换机的端口，一个端口对应一个冲突域</li></ol></blockquote><p><img src="/images/AssetMarkdown/image-20221122212044265.png" alt="image-20221122212044265" style="zoom:80%;" /></p><h3 id="生成树网桥">3.8.5 生成树网桥</h3><p><img src="/images/AssetMarkdown/image-20221231172045308.png" alt="image-20221231172045308" style="zoom:80%;" /></p><ol type="1"><li>为了防止广播风暴，会使用生成树的算法，保证没有回路</li></ol><h3 id="总结-15">3.8.6 总结</h3><p><img src="/images/AssetMarkdown/image-20221122212056169.png" alt="image-20221122212056169" style="zoom:80%;" /></p><h2 id="virtual-lans-虚拟网">3.9 Virtual LANs 虚拟网</h2><p><img src="/images/AssetMarkdown/image-20221231172156368.png" alt="image-20221231172156368" style="zoom:80%;" /></p><ol type="1"><li>逻辑的局域网和多个交换机构成的物理局域网，相互之间有多对多的映射关系</li><li>这些交换机的端口被分为两大类：<ol type="1"><li>接入端口：隶属于某一个指定的虚拟网，跑的是标准的以太网协议</li><li>中继端口trunk：用于传输交换机之间的数据，这里的数据会属于不同的虚拟网，需要识别出当前帧到底是归属于哪个虚拟网的，因此出现了<strong>IEEE802.1Q</strong>协议</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221231172604512.png" alt="image-20221231172604512" style="zoom:80%;" /></p><h2 id="第三章总结">3.9 第三章总结</h2><p><img src="/images/AssetMarkdown/image-20221122212157715.png" alt="image-20221122212157715"  /></p><h1 id="chapter-4网络层">Chapter 4：网络层</h1><p>互联网是无中心、有层次的</p><h2 id="网络层概述">4.1 网络层概述</h2><h3 id="网络层功能概述">4.1.1 网络层功能概述</h3><ol type="1"><li>主要任务是把<strong>分组</strong>从源端传到目的端，为分组交换网上的不同主机提供通信服务</li><li>网络层传输单位是<strong>数据报</strong></li><li>功能：<ol type="1"><li><strong>路由选择与分组转发</strong>：最佳路径</li><li><strong>异构网络互联</strong></li><li><strong>拥塞控制</strong>：若<strong>所有结点</strong>都来不及接受分组，而要丢弃大量分组的话，网络就处于<strong>拥塞</strong>状态。因此要采取一定措施，缓解这种拥塞<ol type="1"><li>开环控制：静态控制</li><li>闭环控制：动态调整</li></ol></li></ol></li></ol><h3 id="数据交换方式">4.1.2 数据交换方式</h3><h4 id="网络的核心路由器">4.1.2.1 网络的核心：路由器</h4><p><img src="/images/AssetMarkdown/image-20221122214424641.png" alt="image-20221122214424641" style="zoom:80%;" /></p><h4 id="为什么需要数据交换">4.1.2.2 为什么需要数据交换</h4><p><img src="/images/AssetMarkdown/image-20221122214358680.png" alt="image-20221122214358680" style="zoom:80%;" /></p><h4 id="电路交换">4.1.2.3 电路交换</h4><p><img src="/images/AssetMarkdown/image-20221122214748051.png" alt="image-20221122214748051" style="zoom:80%;" /></p><p>电路交换的阶段：</p><ol type="1"><li>建立连接</li><li>通信</li><li>释放连接</li></ol><p>特点：<strong>独占资源</strong></p><ol type="1"><li>当A和B建立连接后，即使不说话，也不能有第三方抢占电路</li></ol><p>优点：</p><ol type="1"><li>通信时延小</li><li>有序传输</li><li>没有冲突</li><li>实时性强</li></ol><p>缺点：</p><ol type="1"><li>建立连接时间长</li><li>线路独占，使用效率低</li><li>灵活性差</li><li>无差错控制能力</li></ol><h4 id="报文交换">4.1.2.4 报文交换</h4><p>报文：源应用发送的信息整体</p><p><img src="/images/AssetMarkdown/image-20221123214912638.png" alt="image-20221123214912638" style="zoom:80%;" /></p><p>优点：</p><ol type="1"><li>无需建立连接</li><li>存储转发，动态分配线路</li><li>线路可靠性较高</li><li>线路利用率较高：一段一段的占用线路</li><li>多目标服务</li></ol><p>缺点：</p><ol type="1"><li>有存储转发时延</li><li>报文大小不定，需要网络节点有较大的缓存空间</li></ol><h4 id="分组交换">4.1.2.5 分组交换</h4><p>分组：把大的数据块分割成小的数据块</p><p><img src="/images/AssetMarkdown/image-20221123215116919.png" alt="image-20221123215116919" style="zoom:80%;" /></p><p>优点：</p><ol type="1"><li>无需建立连接</li><li>存储转发，动态分配线路</li><li>线路可靠性较高：数据变小之后，出错的概率也变小了</li><li>线路利用率较高：一段一段的占用线路</li><li>相对于报文交换，存储管理更容易</li></ol><p>缺点：</p><ol type="1"><li>有存储转发时延</li><li>需要传输额外的信息量：源地址、目的地址、分组编号等</li><li>乱序到达目的主机时，需要对分组排序重组</li></ol><h4 id="报文交换分组交换例题">4.1.2.6 报文交换&amp;分组交换例题</h4><p><img src="/images/AssetMarkdown/image-20221123221031383.png" alt="image-20221123221031383" style="zoom:80%;" /></p><p>报文交换：</p><ol type="1"><li>发送时延/传输时延为：<span class="math inline">\(\frac{10000\bit}{1000\ bps}=10s\)</span></li><li>传输时延和接收时延均忽略不计</li><li>因此总传输时间为：<span class="math inline">\(10\ s × 3=30\s\)</span></li></ol><p>分组交换：</p><ol type="1"><li>每一个分组的发送时延/传输时延为：<spanclass="math inline">\(\frac{10\ bit}{1000\ bps}=0.01s\)</span></li><li>传输时延和接收时延均忽略不计</li><li>由于每个分组连续发送，因此只需要考虑第1个分组开始发送，到最后1个分组到达所需的时间即可<ol type="1"><li>第1个分组开始发送~最后1个分组开始发送：<spanclass="math inline">\(\frac{10000\ bit}{1000\ bps}=10s\)</span></li><li>最后1个分组开始发送~最后1个分组到达：<spanclass="math inline">\(2×0.01\ s=0.02\ s\)</span></li></ol></li><li>因此总传输时间为：<span class="math inline">\(10\ s + 0.02\ s=10.02\s\)</span></li></ol><h4 id="三种数据交换方式比较总结">4.1.2.7 三种数据交换方式比较总结</h4><p><img src="/images/AssetMarkdown/image-20221123221146496.png" alt="image-20221123221146496" style="zoom:80%;" /></p><h3 id="数据报与虚电路">4.1.3 数据报与虚电路</h3><ol type="1"><li><strong>数据报</strong>：为网络层提供<strong>无连接服务</strong><ol type="1"><li>无连接服务：不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组传输路径可能不同</li></ol></li><li><strong>虚电路</strong>：为网络层提供<strong>连接服务</strong><ol type="1"><li>连接服务：首先为分组的传输确定传输路径(建立连接)，然后沿该路径(连接)传输系列分组，系列分组传输路径相同，传输结束后拆除连接</li></ol></li></ol><h4 id="几种传输单元的名词解析">4.1.3.1 几种传输单元的名词解析</h4><table><thead><tr class="header"><th style="text-align: center;">层次</th><th style="text-align: center;">传输单元</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">应用层</td><td style="text-align: center;">报文</td></tr><tr class="even"><td style="text-align: center;">传输层</td><td style="text-align: center;">报文段</td></tr><tr class="odd"><td style="text-align: center;">网络层</td><td style="text-align: center;">IP数据报，分组</td></tr><tr class="even"><td style="text-align: center;">数据链路层</td><td style="text-align: center;">帧</td></tr><tr class="odd"><td style="text-align: center;">物理层</td><td style="text-align: center;">比特流</td></tr></tbody></table><h4 id="数据报因特网使用">4.1.3.2 数据报（因特网使用）</h4><ol type="1"><li><strong>无连接服务</strong>：不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组传输路径可能不同</li><li><strong>每个分组携带源和目的地址</strong></li><li><strong>路由器根据分组的目的地址转发分组</strong>：<ol type="1"><li>基于路由协议/算法构建转发表</li><li>检索转发表</li><li>每个分组独立性选路</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221129165604477.png" alt="image-20221129165604477" style="zoom:80%;" /></p><h4 id="虚电路">4.1.3.3 虚电路</h4><ol type="1"><li>虚电路将数据报方式和电路交换方式结合，以发挥两者优点</li><li><strong>虚电路</strong>：一条源主机到目的主机类似于电路的路径(逻辑链接)，路径上所有节点都要维持这条虚电路的建立，都维持一张虚电路表，每一项记录了一个打开的虚电路的信息</li><li>通信过程：</li></ol><p><img src="/images/AssetMarkdown/image-20221129182313654.png" alt="image-20221129182313654" style="zoom:80%;" /></p><h4 id="数据报虚电路">4.1.3.4 数据报&amp;虚电路</h4><p><img src="/images/AssetMarkdown/image-20221129182340378.png" alt="image-20221129182340378" style="zoom:80%;" /></p><h2 id="ip协议">4.2 IP协议</h2><h3 id="ip数据报格式">4.2.1 IP数据报格式</h3><h4 id="tcpip协议栈">4.2.1.1 TCP/IP协议栈</h4><p><img src="/images/AssetMarkdown/image-20221129183834673.png" alt="image-20221129183834673" style="zoom:80%;" /></p><h4 id="ip数据报格式-1">4.2.1.2 IP数据报格式</h4><p><img src="/images/AssetMarkdown/image-20221129183918389.png" alt="image-20221129183918389" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221129183929489.png" alt="image-20221129183929489" style="zoom:80%;" /></p><table><colgroup><col style="width: 14%" /><col style="width: 5%" /><col style="width: 15%" /><col style="width: 63%" /></colgroup><thead><tr class="header"><th style="text-align: center;">位置</th><th style="text-align: center;">长度</th><th style="text-align: center;">名称</th><th style="text-align: center;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">第1个4B：00~03</td><td style="text-align: center;">4bit</td><td style="text-align: center;">版本</td><td style="text-align: center;">4位数据，表示IPv4/IPv6</td></tr><tr class="even"><td style="text-align: center;">第1个4B：04~07</td><td style="text-align: center;">4bit</td><td style="text-align: center;">首部长度</td><tdstyle="text-align: center;">单位为<strong>4B</strong>，最小为5(此时首部长度为5*4B=20B)</td></tr><tr class="odd"><td style="text-align: center;">第1个4B：08~15</td><td style="text-align: center;">8bit</td><td style="text-align: center;">区分服务</td><tdstyle="text-align: center;">表示期望获得<strong>哪种类型的服务</strong></td></tr><tr class="even"><td style="text-align: center;">第1个4B：16~31</td><td style="text-align: center;">16bit</td><td style="text-align: center;">总长度</td><tdstyle="text-align: center;">首部+数据部分的大小，单位为<strong>1B</strong></td></tr><tr class="odd"><td style="text-align: center;">第2个4B：00~15</td><td style="text-align: center;">16bit</td><td style="text-align: center;">标识</td><tdstyle="text-align: center;">同一数据报的分片使用同一标识，表示为<strong>同一个IP数据报</strong></td></tr><tr class="even"><td style="text-align: center;">第2个4B：16~18</td><td style="text-align: center;">3bit</td><td style="text-align: center;">标志</td><td style="text-align: center;">只有2位有意义，<strong>× DFMF</strong></td></tr><tr class="odd"><td style="text-align: center;">第2个4B：19~31</td><td style="text-align: center;">13bit</td><td style="text-align: center;">片偏移</td><tdstyle="text-align: center;">当前分片在原分组中的相对位置，单位为<strong>8B</strong></td></tr><tr class="even"><td style="text-align: center;">第3个4B：00~07</td><td style="text-align: center;">8bit</td><td style="text-align: center;">生存时间<strong>TTL</strong></td><tdstyle="text-align: center;">IP分组的保质期，经过一个路由器-1，变成0则丢弃，防止无法交付的数据报在链路中无限传递</td></tr><tr class="odd"><td style="text-align: center;">第3个4B：08~15</td><td style="text-align: center;">8bit</td><td style="text-align: center;">协议</td><tdstyle="text-align: center;">数据部分的协议，如<strong>TCP(6)</strong>、<strong>UDP(17)</strong></td></tr><tr class="even"><td style="text-align: center;">第3个4B：16~31</td><td style="text-align: center;">16bit</td><td style="text-align: center;">首部检验和</td><tdstyle="text-align: center;">二进制求和，只检验首部，不检验数据部分</td></tr><tr class="odd"><td style="text-align: center;">第4个4B：00~31</td><td style="text-align: center;">32bit</td><td style="text-align: center;">源地址</td><td style="text-align: center;">IPv4的地址长度：32位</td></tr><tr class="even"><td style="text-align: center;">第5个4B：00~31</td><td style="text-align: center;">32bit</td><td style="text-align: center;">目的地址</td><td style="text-align: center;">IPv4的地址长度：32位</td></tr><tr class="odd"><td style="text-align: center;">可变部分</td><td style="text-align: center;">0~40B</td><td style="text-align: center;">可选字段</td><td style="text-align: center;">用来支持排错、测量、安全等措施</td></tr><tr class="even"><td style="text-align: center;">可变部分</td><td style="text-align: center;"></td><td style="text-align: center;">填充</td><td style="text-align: center;">全0，把首部补成4B的整数倍</td></tr></tbody></table><p>协议：</p><p><img src="/images/AssetMarkdown/image-20221129184949335.png" alt="image-20221129184949335"  /></p><p>三个长度：</p><ol type="1"><li><strong>总</strong>长度：单位为<strong>1B</strong></li><li><strong>片</strong>偏移：单位为<strong>8B</strong></li><li><strong>首</strong>部长度：单位为<strong>4B</strong></li></ol><blockquote><p><strong>1总8片的首4</strong></p></blockquote><h3 id="ip数据报分片">4.2.2 IP数据报分片</h3><h4 id="最大传送单元mtu">4.2.2.1 最大传送单元MTU</h4><ol type="1"><li><strong>MTU</strong>：链路层数据帧可封装数据的上限<ol type="1"><li>以太网的MTU位1500字节</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221129185458558.png" alt="image-20221129185458558" style="zoom:80%;" /></p><h4 id="ip数据报分片-1">4.2.2.2 IP数据报分片</h4><ol type="1"><li>标志：× _ _<ol type="1"><li>中间位<strong>DF</strong>(Don’t Fragment)<ol type="1"><li>DF=1：禁止分片</li><li>DF=0：允许分片</li></ol></li><li>最低位<strong>MF</strong>(More Fragment)<ol type="1"><li>MF=1：后面还有分片</li><li>MF=0：当前分片为最后一片</li></ol></li></ol></li><li>片偏移：<ol type="1"><li>当前分片在原分组中的相对位置，以<strong>8B</strong>为单位</li><li>除最后一个分片外，每个分片的大小均为8B的整数倍</li></ol></li></ol><h4 id="ip数据报分片例题">4.2.2.3 IP数据报分片例题</h4><p><img src="/images/AssetMarkdown/image-20221129190407709.png" alt="image-20221129190407709" style="zoom:80%;" /></p><h3 id="ipv4地址">4.2.3 IPv4地址</h3><h4 id="ip编址的历史阶段">4.2.3.1 IP编址的历史阶段</h4><ol type="1"><li>分类的IP地址</li><li>子网的划分</li><li>构成超网：无分类编址方法</li></ol><h4 id="分类的ip地址">4.2.3.2 分类的IP地址</h4><ol type="1"><li><p>IP地址：全世界唯一的<strong>32位/4字节</strong>标识符，标识路由器主机的接口</p></li><li><p>IP地址：{<网络号> <主机号>}<strong>点分十进制表示方法</strong></p><p><img src="/images/AssetMarkdown/image-20221129191038841.png" alt="image-20221129191038841" style="zoom:80%;" /></p></li></ol><h4 id="互联网中的ip地址">4.2.3.3 互联网中的IP地址</h4><p><img src="/images/AssetMarkdown/image-20221129191227138.png" alt="image-20221129191227138" style="zoom:80%;" /></p><ol type="1"><li>同一个局域网中，网络号相同</li><li>网桥不分割广播域：因此通过网桥连接起来的设备仍是一个局域网</li><li>路由器分割广播域：路由器的每一个接口都会有一个不同的IP地址</li><li>绿色的部分：无编号(无名)网络，是逻辑上的网络</li><li>整个图中共有6个逻辑上的网络<ol type="1"><li>橙色部分：3个</li><li>绿色部分：3个</li></ol></li></ol><h4 id="分类的ip地址-1">4.2.3.4 分类的IP地址</h4><p><img src="/images/AssetMarkdown/image-20221129192446002.png" alt="image-20221129192446002" style="zoom:80%;" /></p><h4 id="特殊的ip地址">4.2.3.5 特殊的IP地址</h4><p><img src="/images/AssetMarkdown/image-20221129191949926.png" alt="image-20221129191949926" style="zoom:80%;" /></p><h4 id="私有ip地址">4.2.3.6 私有IP地址</h4><p><img src="/images/AssetMarkdown/image-20221129192023872.png" alt="image-20221129192023872" style="zoom:80%;" /></p><ol type="1"><li>路由器对目的地址是私有IP地址的数据报一律不进行转发</li></ol><h3 id="网络地址转换nat">4.2.4 网络地址转换NAT</h3><p>网络地址转换NAT(Network Address Translation)：</p><ol type="1"><li>在<strong>专用网</strong>连接到<strong>因特网</strong>的路由器上安装NAT软件</li><li>安装了NAT软件的路由器称为<strong>NAT路由器</strong>，它至少有一个有效的<strong>外部全球IP地址</strong></li></ol><p><img src="/images/AssetMarkdown/image-20221129193233306.png" alt="image-20221129193233306" style="zoom:80%;" /></p><h3 id="子网划分与子网验码">4.2.5 子网划分与子网验码</h3><h4 id="子网划分">4.2.5.1 子网划分</h4><p>分类IP地址的缺点：</p><ol type="1"><li>IP地址空间的利用率有时很低</li><li>两级IP地址不够灵活</li></ol><p><img src="/images/AssetMarkdown/image-20221129193445186.png" alt="image-20221129193445186" style="zoom:80%;" /></p><ol type="1"><li>划分子网后，对外仍<strong>表现为一个网络</strong>，即外单位的网络看不到本单位内的子网划分</li><li>主机号至少要有2位</li><li>主机号不能全0/全1：这两种分别表示当前网络/广播地址</li><li><strong>子网号能否全0/1要看情况</strong></li></ol><h4 id="子网划分的示例">4.2.5.2 子网划分的示例</h4><p><img src="/images/AssetMarkdown/image-20221129193712879.png" alt="image-20221129193712879" style="zoom:80%;" /></p><h4 id="子网掩码">4.2.5.3 子网掩码</h4><p><img src="/images/AssetMarkdown/image-20221129194026929.png" alt="image-20221129194026929" style="zoom:80%;" /></p><ol type="1"><li>网络号/子网号对应位置：填1</li><li>主机号对应位置：填0</li><li>子网掩码与IP地址逐位相与，就得到了子网网络的地址</li></ol><h4 id="子网掩码的示例">4.2.5.4 子网掩码的示例</h4><p><img src="/images/AssetMarkdown/image-20221129194211056.png" alt="image-20221129194211056" style="zoom:80%;" /></p><ol type="1"><li>同一个IP地址，不同子网掩码，求出的网络地址可以是相同的</li><li>但是含义不同，表示子网可划分的主机数不同</li></ol><p><img src="/images/AssetMarkdown/image-20221129194517726.png" alt="image-20221129194517726" style="zoom:80%;" /></p><h4 id="使用子网时分组的转发">4.2.5.5 使用子网时分组的转发</h4><p><img src="/images/AssetMarkdown/image-20221129194827532.png" alt="image-20221129194827532" style="zoom:80%;" /></p><h3 id="无分类编址cidr">4.2.6 无分类编址CIDR</h3><h4 id="cidr的特点及使用方法">4.2.6.1 CIDR的特点及使用方法</h4><p>无分类域间路由选择CIDR：</p><ol type="1"><li>消除了传统的A类，B类和C类地址以及划分子网的概念</li><li>融合了子网地址和子网掩码，方便子网划分</li></ol><p>CIDR的使用方法：</p><ol type="1"><li><p>CIDR记法：IP地址后加上”/”，然后写上网络前缀的位数，如128.14.22.0<strong>/20</strong></p><p><img src="/images/AssetMarkdown/image-20221129195328293.png" alt="image-20221129195328293" style="zoom:80%;" /></p></li><li><p>CIDR地址块：<strong>网络前缀都相同</strong>的连续的IP地址</p></li><li><p><strong>CIDR技术中，子网号可以是全0/1的</strong></p><p><img src="/images/AssetMarkdown/image-20221129195541159.png" alt="image-20221129195541159" style="zoom:80%;" /></p></li></ol><h4 id="构成超网">4.2.6.2 构成超网</h4><ol type="1"><li><strong>构成超网</strong>：将多个子网聚合成一个较大的子网，叫做构成超网，或路由聚合</li><li>方法：将网络前缀缩短</li></ol><p><img src="/images/AssetMarkdown/image-20221129200027765.png" alt="image-20221129200027765" style="zoom:80%;" /></p><h4 id="最长前缀匹配">4.2.6.3 最长前缀匹配</h4><ol type="1"><li>使用CIDR时，查找路由表可能得到几个匹配的结果，应该选择具有最长网络前缀的路由</li><li>前缀越长，地址块越小，路由越具体</li></ol><p><img src="/images/AssetMarkdown/image-20221129200432306.png" alt="image-20221129200432306" style="zoom:80%;" /></p><h4 id="习题">4.2.6.4 习题</h4><p><img src="/images/AssetMarkdown/image-20221129200628326.png" alt="image-20221129200628326" style="zoom:80%;" /></p><h3 id="arp协议">4.2.7 ARP协议</h3><h4 id="发送数据的过程">4.2.7.1 发送数据的过程</h4><p>同一局域网内，不知道接收方的MAC地址：</p><ol type="1"><li>发送方：发送广播ARP请求分组，广播查询接收方IP3的MAC地址</li><li>接收方：IP3返回单波ARP相应分组</li><li>发送方接收到接收方的回应后，将接收方的MAC地址MAC3填入帧中</li></ol><p><img src="/images/AssetMarkdown/image-20221129201246544.png" alt="image-20221129201246544" style="zoom:80%;" /></p><p>不在同一局域网内，不知道接收方的MAC地址：</p><ol type="1"><li>发送方：发送广播ARP请求分组，广播查询默认网关IP6的MAC地址</li><li>接收方：IP6返回单波ARP相应分组</li><li>发送方接收到接收方的回应后，将接收方的MAC地址MAC6填入帧中</li></ol><p><img src="/images/AssetMarkdown/image-20221129201841358.png" alt="image-20221129201841358" style="zoom: 80%;" /></p><p><img src="/images/AssetMarkdown/image-20221129201908628.png" alt="image-20221129201908628" style="zoom:80%;" /></p><h4 id="arp协议-1">4.2.7.2 ARP协议</h4><ol type="1"><li>产生原因：在实际网络的链路上传送数据顿时，最终必须使用MAC地址</li><li><strong>ARP协议</strong>：完成主机或路由器IP地址到MAC地址的映射。解决下一跳走哪的问题</li><li>ARP协议使用过程：<ol type="1"><li>检查<strong>ARP高速缓存</strong>，有对应表项则写入MAC帧，没有则用目的MAC地址为FF-FF-FF-FF-FF-FF的帧封装并<strong>广播ARP请求分组</strong></li><li><strong>同一局域网中</strong>所有主机都能收到该请求</li><li>目的主机收到请求后就会向源主机<strong>单播一个ARP响应分组</strong></li><li>源主机收到后将此映射<strong>写入ARP缓存</strong>(10-20min更新一次)</li></ol></li><li>ARP协议4种典型情况：<ol type="1"><li><strong>主机</strong>A发给<strong>本网络</strong>上的主机B：用ARP找到<strong>主机B</strong>的硬件地址</li><li><strong>主机</strong>A发给<strong>另一网络</strong>上的主机B：用ARP找到本网络上一个<strong>路由器(网关)</strong>的硬件地址</li><li><strong>路由器</strong>发给<strong>本网络</strong>的主机A：用ARP找到<strong>主机A</strong>的硬件地址</li><li><strong>路由器</strong>发给<strong>另一网络</strong>的主机B：用ARP找到本网络上的一个<strong>路由器</strong>的硬件地址</li></ol></li><li>ARP协议自动进行</li></ol><h4 id="习题-1">4.2.7.3 习题</h4><p><img src="/images/AssetMarkdown/image-20221129202543897.png" alt="image-20221129202543897" style="zoom:80%;" /></p><h3 id="dhcp协议">4.2.8 DHCP协议</h3><h4 id="主机如何获得ip地址">4.2.8.1 主机如何获得IP地址</h4><ol type="1"><li>静态配置：IP地址、子网掩码、默认网关</li><li>动态配置：</li></ol><p><img src="/images/AssetMarkdown/image-20221129203124440.png" alt="image-20221129203124440" style="zoom:80%;" /></p><h4 id="dhcp协议-1">4.2.8.2 DHCP协议</h4><p>动态主机配置协议DHCP：</p><ol type="1"><li>是<strong>应用层</strong>协议，使用<strong>客户/服务器</strong>方式，客户端和服务端通过<strong>广播</strong>方式进行交互，基于<strong>UDP</strong></li><li>DHCP提供<strong>即插即用</strong>联网的机制，主机可以从服务器动态获取IP地址、子网掩码、默认网关、DNS服务器名称与IP地址</li><li>允许<strong>地址重用</strong>，支持<strong>移动用户加入网络</strong>，支持<strong>在用地址续租</strong></li></ol><p>DHCP协议的过程：</p><ol type="1"><li><strong>主机</strong>广播<strong>DHCP发现报文</strong>：试图找到网络中的服务器，服务器获得一个IP地址</li><li><strong>DHCP服务器</strong>广播<strong>DHCP提供报文</strong>：服务器拟分配给主机一个IP地址及相关配置，先到先得</li><li><strong>主机</strong>广播<strong>DHCP请求报文</strong>：主机向服务器请求提供IP地址</li><li><strong>DHCP服务器</strong>广播<strong>DHCP确认报文</strong>：正式将IP地址分配给主机</li></ol><h3 id="icmp协议">4.2.9 ICMP协议</h3><h4 id="网际控制报文协议icmp">4.2.9.1 网际控制报文协议ICMP</h4><p><img src="/images/AssetMarkdown/image-20221129203735584.png" alt="image-20221129203735584" style="zoom:80%;" /></p><h4 id="icmp差错报告报文5种">4.2.9.2 ICMP差错报告报文(5种)</h4><ol type="1"><li><strong>终点不可达</strong>：当路由器或主机不能交付数据报时就向源点发送终点不可达报文。<strong>无法交付</strong></li><li><strong>源点抑制</strong>：当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。<strong>拥塞丢数据(不再使用)</strong></li><li><strong>时间超过</strong>：当路由器收到生存时间TTL=0的数据报时，除丢弃该数据报外，还要向源点发送时间超过报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就<strong>把已收到的数据报片都丢弃</strong>，并向源点发送时间超过报文。<strong>TTL=0</strong></li><li><strong>参数问题</strong>：当路由器或目的主机收到的数据报的首部中有的字段的值不正确时，就丢弃该数据报，并向源点发送参数问题报文。<strong>首部字段有问题</strong></li><li><strong>改变路由(重定向)</strong>：路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器(可通过更好的路由)。<strong>值得更好的路由</strong></li></ol><h4 id="icmp差错报告报文数据字段">4.2.9.3 ICMP差错报告报文数据字段</h4><p><img src="/images/AssetMarkdown/image-20221129204209685.png" alt="image-20221129204209685" style="zoom:80%;" /></p><h4 id="不应发送icmp差错报文的情况">4.2.9.4不应发送ICMP差错报文的情况</h4><ol type="1"><li>对<strong>ICMP差错报告报文</strong>不再发送ICMP差错报告报文</li><li>对第一个分片的数据报片的所有<strong>后续数据报片</strong>都不发送ICMP差错报告报文</li><li>对具有<strong>组播地址</strong>的数据报都不发送ICMP差错报告报文<ol type="1"><li>组播：一点到多点</li><li>广播：一点到所有点</li></ol></li><li>对具有<strong>特殊地址(如127.0.0.0或0.0.0.0)</strong>的数据报不发送ICMP差错报告报文</li></ol><h4 id="icmp询问报文">4.2.9.5 ICMP询问报文</h4><ol type="1"><li><strong>回送请求和回答报文</strong>：主机或路由器向特定目的主机发出的询问，收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文。<strong>测试目的站是否可达以及了解其相关状态</strong></li><li><strong>时间截请求和回答报文</strong>：请某个主机或路由器回答当前的日期和时间。<strong>用来进行时钟同步和测量时间</strong></li><li>掩码地址请求和回答报文</li><li>路由器询问和通告报文</li></ol><h4 id="icmp的应用">4.2.9.6 ICMP的应用</h4><ol type="1"><li><strong>PING</strong>：测试两个主机之间的连通性，使用了<strong>ICMP回送请求和回答报文</strong></li><li><strong>Traceroute</strong>：跟踪一个分组从源点到终点的路径，使用了<strong>ICMP时间超过差错报告报文</strong></li></ol><h2 id="ipv6">4.3 IPv6</h2><h3 id="为什么有ipv6">4.3.1 为什么有IPv6</h3><p><img src="/images/AssetMarkdown/image-20221129204933309.png" alt="image-20221129204933309" style="zoom:80%;" /></p><h3 id="ipv6数据报格式">4.3.2 IPv6数据报格式</h3><p><img src="/images/AssetMarkdown/image-20221129205002582.png" alt="image-20221129205002582" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221129205023299.png" alt="image-20221129205023299" style="zoom:80%;" /></p><table><colgroup><col style="width: 19%" /><col style="width: 8%" /><col style="width: 16%" /><col style="width: 54%" /></colgroup><thead><tr class="header"><th style="text-align: center;">位置</th><th style="text-align: center;">长度</th><th style="text-align: center;">名称</th><th style="text-align: center;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">第1个4B：00~03</td><td style="text-align: center;">4bit</td><td style="text-align: center;">版本</td><td style="text-align: center;">协议版本，总是6</td></tr><tr class="even"><td style="text-align: center;">第1个4B：04~11</td><td style="text-align: center;">8bit</td><td style="text-align: center;">优先级</td><td style="text-align: center;">区分数据报的类别、优先级</td></tr><tr class="odd"><td style="text-align: center;">第1个4B：12~31</td><td style="text-align: center;">20bit</td><td style="text-align: center;">流标签</td><td style="text-align: center;">表面当前数据报属于哪个“流”</td></tr><tr class="even"><td style="text-align: center;">第2个4B：00~15</td><td style="text-align: center;">16bit</td><td style="text-align: center;">有效载荷长度</td><tdstyle="text-align: center;">有效载荷部分(<strong>扩展首部+数据</strong>)的长度</td></tr><tr class="odd"><td style="text-align: center;">第2个4B：16~23</td><td style="text-align: center;">8bit</td><td style="text-align: center;">下一个首部</td><tdstyle="text-align: center;">标识<strong>下一个扩展首部</strong>/<strong>上层协议首部</strong></td></tr><tr class="even"><td style="text-align: center;">第2个4B：24~31</td><td style="text-align: center;">8bit</td><td style="text-align: center;">跳数限制</td><td style="text-align: center;">相当于IPv4的TTL</td></tr><tr class="odd"><td style="text-align: center;"></td><td style="text-align: center;">128bit</td><td style="text-align: center;">源地址</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;"></td><td style="text-align: center;">128bit</td><td style="text-align: center;">目的地址</td><td style="text-align: center;"></td></tr></tbody></table><p>流：</p><ol type="1"><li>互联网上从特定源点到特定终点的一系列数据报</li><li>所有属于同一个流的数据报都具有相同的流标签</li></ol><h3 id="ipv6和ipv4">4.3.2 IPv6和IPv4</h3><ol type="1"><li>IPv6将地址从32位(4B)扩大到<strong>128位(16B)</strong>，更大的地址空间</li><li>IPv6将IPv4的<strong>校验和字段彻底移除</strong>，以减少每跳的处理时间</li><li>IPv6将IPv4的可选字段移出首部，变成了<strong>扩展首部</strong>，成为灵活的首部格式，路由器通常不对扩展首部进行检查，大大提高了路由器的处理效率</li><li>IPv6支持<strong>即插即用</strong>(即自动配置) ，不需要DHCP协议</li><li>IPv6首部长度必须是<strong>8B的整数倍</strong>，IPv4首部是4B的整数倍</li><li>IPv6<strong>只能在主机处分片</strong>，IPv4可以在路由器和主机处分片</li><li>ICMPv6：附加报文类型“分组过大”。</li><li>IPv6支持资源的预分配，支持实时视像等要求，保证一定的带宽和时延的应用</li><li>IPv6取消了协议字段，改成下一个首部字段</li><li>IPv6取消了总长度字段，改用有效载荷长度字段</li><li>IPv6取消了服务类型字段</li></ol><h3 id="ipv6地址表示形式">4.3.4 IPv6地址表示形式</h3><ol type="1"><li><strong>一般形式</strong>：<strong>冒号十六进制记法</strong></li><li><strong>压缩形式</strong>：</li><li><strong>零压缩</strong>：一连串连续的0可以被一对冒号取代，双冒号只能在一个地址中出现一次</li></ol><p><img src="/images/AssetMarkdown/image-20221129210458220.png" alt="image-20221129210458220" style="zoom:80%;" /></p><h3 id="ipv6基本地址类型">4.3.5 IPv6基本地址类型</h3><ol type="1"><li><strong>单播</strong>：一对一通信，可以做源地址+目的地址</li><li><strong>多播</strong>：一对多通信，可以做目的地址</li><li><strong>任播</strong>：一对多中的一个通信，可以做目的地址</li></ol><p><img src="/images/AssetMarkdown/image-20221129210629760.png" alt="image-20221129210629760" style="zoom:80%;" /></p><h3 id="ipv6向ipv4过渡的策略">4.3.6 IPv6向IPv4过渡的策略</h3><ol type="1"><li>双栈协议<ol type="1"><li>双协议栈技术就是指在一台设备上<strong>同时启用IPv4协议栈和IPv6协议栈</strong></li><li>这样的话，这台设备既能和IPv4网络通信，又能和IPv6网络通信</li><li>如果这台设备是一个<strong>路由器</strong>：那么这台路由器的不同接口上，分别配置了IPv4地址和IPv6地址，并很可能分别连接了IPv4网络和IPv6网络</li><li>如果这台设备是一个<strong>计算机</strong>：那么它将同时拥有IPv4地址和IPv6地址，并具备同时处理这两个协议地址的功能</li></ol></li><li>隧道技术<ol type="1"><li>通过使用互联网络的基础设施在网络之间传递数据的方式</li><li>使用隧道传递的数据(或负载)可以是不同协议的数据帧或包。隧道协议将其它协议的数据帧或包<strong>重新封装</strong>然后通过隧道发送</li></ol></li></ol><h3 id="总结-16">4.3.7 总结</h3><p><img src="/images/AssetMarkdown/image-20221129210938055.png" alt="image-20221129210938055" style="zoom:80%;" /></p><h2 id="路由算法与路由协议概述">4.4 路由算法与路由协议概述</h2><h3 id="路由算法">4.4.1 路由算法</h3><p>最佳路由：某一种特定要求下得出的较为合理的选择</p><p><img src="/images/AssetMarkdown/image-20221129182835879.png" alt="image-20221129182835879" style="zoom:80%;" /></p><h3 id="路由算法的分类">4.4.2 路由算法的分类</h3><ol type="1"><li><strong>静态路由算法</strong>(非自适应路由算法)：管理员手工配置路由信息<ol type="1"><li>优点：<ol type="1"><li>简便、可靠</li><li>在负荷稳定、拓扑变化不大的网络中运行效果很好</li><li>广泛用于高度安全性的军事网络和较小的商业网络</li></ol></li><li>缺点：<ol type="1"><li>路由更新慢，不适用于大型网络</li></ol></li></ol></li><li><strong>动态路由算法</strong>(自适应路由算法)：路由器间彼此交换信息，按照路由算法优化出路由表项<ol type="1"><li>优点：<ol type="1"><li>路由更新快</li><li>适用大型网络</li><li>及时响应链路费用或网络拓扑变化</li></ol></li><li>缺点：<ol type="1"><li>算法复杂，增加网络负担</li></ol></li></ol></li></ol><p>动态路由算法的分类：</p><ol type="1"><li>全局性：链路状态路由算法<strong>OSPF</strong><ol type="1"><li>所有路由器掌握完整的网络拓扑和链路费用信息</li></ol></li><li>分散性：距离向量路由算法<strong>RIP</strong><ol type="1"><li>路由器只掌握物理相连的邻居及链路费用</li></ol></li></ol><h3 id="分层次的路由选择协议">4.4.3 分层次的路由选择协议</h3><p>原因：</p><ol type="1"><li>因特网规模很大</li><li>许多单位不想让外界知道自己的路由选择协议，但还想连入因特网</li></ol><p><strong>自治系统AS</strong>：</p><ol type="1"><li>在单一的技术管理下的一组路由器，而这些路由器使用一种AS内部的路由选择协议和共同的度量以确定分组在该AS内的路由，同时还使用一种AS之间的路由协议以确定在AS之间的路由</li><li>一个AS内的所有网络都属于一个行政单位来管辖，一个自治系统的所有路由器在本自治系统内都必须连通</li></ol><p>路由选择协议：</p><ol type="1"><li>内部网关协议IGP：一个AS内使用的，如<strong>RIP、OSPF</strong></li><li>外部网关协议EGP：AS之间使用的，如<strong>BGP</strong></li></ol><h2 id="路由选择协议">4.5 路由选择协议</h2><p><img src="/images/AssetMarkdown/image-20221129211300849.png" alt="image-20221129211300849" style="zoom:80%;" /></p><h3 id="rip协议及距离向量算法">4.5.1 RIP协议及距离向量算法</h3><h4 id="rip协议">4.5.1.1 RIP协议</h4><ol type="1"><li>RIP是一种分布式的基于<strong>距离向量</strong>的路由选择协议，是因特网的协议标准，最大优点是简单</li><li>RIP协议要求网络中每一个路由器都维护<strong>从它自己到其他每一个目的网络的唯一最佳距离记录</strong>(即一组距离)</li><li>距离：通常为“跳数”，即从源端口到目的端口所经过的路由器个数，经过一个路由器跳数+1。特别的，从一路由器到直接连接的网络距离为1。RIP允许一条路由最多只能包含15个路由器，因此<strong>距离为16表示网络不可达</strong></li><li>RIP协议只适用于<strong>小互联网</strong></li></ol><p><img src="/images/AssetMarkdown/image-20221129212207355.png" alt="image-20221129212207355" style="zoom:80%;" /></p><h4 id="rip协议和谁交换多久交换一次交换什么">4.5.1.2RIP协议和谁交换？多久交换一次？交换什么？</h4><ol type="1"><li>仅和<strong>相邻路由器</strong>交换信息</li><li>路由器交换的信息是<strong>自己的路由表</strong></li><li><strong>每30秒</strong>交换一次路由信息，然后路由器根据新信息更新路由表。若超过180s没收到邻居路由器的通告，则判定邻居没了，并更新自己路由表</li><li>路由器刚开始工作时，只知道直接连接的网络的距离(距离为1)，接着每一个路由器也只和数目非常有限的相邻路由器交换并更新路由信息</li><li>经过若干次更新后，所有路由器最终都会知道到达本自治系统任何一个网络的最短距离和下一跳路由器的地址，即“<strong>收敛</strong>”</li></ol><h4 id="距离向量算法">4.5.1.3 距离向量算法</h4><p><img src="/images/AssetMarkdown/image-20221129212928474.png" alt="image-20221129212928474" style="zoom:80%;" /></p><ol type="1"><li>修改相邻路由器发来的RIP报文中<strong>所有表项</strong><ol type="1"><li>对地址为x的相邻路由器发来的RIP报文，修改此报文中的所有项目：</li><li>把“下一跳”字段中的地址改为X，并把<strong>所有的“距离”字段+1</strong></li></ol></li><li>对修改后的RIP报文中的每一个项目，进行以下步骤:<ol type="1"><li>R1路由表中若没有Net3，则把该项目填入R1路由表</li><li>R1路由表中若有Net3，则查看下一跳路由器地址<ol type="1"><li>若下一跳是X，则用收到的项目替换源路由表中的项目</li><li>若下一跳不是X，原来距离比从X走的距离远则更新，否则不作处理</li></ol></li></ol></li><li>若<strong>180s</strong>还没收到相邻路由器X的更新路由表，则把x记为不可达的路由器，即把距离设置为16</li><li>返回</li></ol><h4 id="例题">4.5.1.4 例题</h4><p><img src="/images/AssetMarkdown/image-20221129213125318.png" alt="image-20221129213125318" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221129213401526.png" alt="image-20221129213401526" style="zoom:80%;" /></p><h4 id="rip协议的报文格式">4.5.1.5 RIP协议的报文格式</h4><p><img src="/images/AssetMarkdown/image-20221129213537077.png" alt="image-20221129213537077" style="zoom:80%;" /></p><ol type="1"><li>RIP是<strong>应用层协议</strong>，使用<strong>UDP</strong>传送数据</li><li>一个RIP报文最多可以包括25个路由，如果超过，则不许再用一个RIP报文传送</li></ol><h4 id="rip协议好消息传得快坏消息传得慢">4.5.1.6RIP协议：好消息传得快，坏消息传得慢</h4><p>RIP的特点：当网络出现故障时，要经过比较长的事件才能将此消息传送到所有的路由器，<strong>慢收敛</strong></p><p><img src="/images/AssetMarkdown/image-20221129213606257.png" alt="image-20221129213606257" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221129213808530.png" alt="image-20221129213808530" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221129213832003.png" alt="image-20221129213832003" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221129213838273.png" alt="image-20221129213838273" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221129213849121.png" alt="image-20221129213849121" style="zoom:80%;" /></p><h4 id="总结-17">4.5.1.7 总结</h4><p><img src="/images/AssetMarkdown/image-20221129213933023.png" alt="image-20221129213933023" style="zoom:80%;" /></p><h3 id="ospf协议与链路状态算法">4.5.2 OSPF协议与链路状态算法</h3><h4 id="ospf协议">4.5.2.1 OSPF协议</h4><p><strong>开放最短路径优先OSPF协议</strong>:</p><ol type="1"><li>“开放”标明OSPF协议不是受某一家厂商控制，而是公开发表的</li><li>“最短路径优先”·是因为使用了Dijkstra提出的最短路径算法SPF</li></ol><p>OSPF最主要的特征：</p><ol type="1"><li>使用分布式的<strong>链路状态协议</strong></li></ol><p>OSPF的特点：</p><ol type="1"><li><strong>和谁交换</strong>：使用<strong>洪泛法</strong>向自治系统内<strong>所有路由器</strong>发送信息，即路由器通过输出端口向所有相邻的路由器发送信息，而每一个相邻路由器又再次将此信息发往其所有的相邻路由器。<strong>广播</strong><ol type="1"><li>最终整个区域内所有路由器都得到了这个信息的一个副本</li></ol></li><li><strong>交换什么</strong>：发送的信息就是与本路由器<strong>相邻的所有路由器的链路状态</strong>(本路由器和哪些路由器相邻，以及该链路的度量/代价：费用、距离、时延、带宽等)</li><li><strong>多久交换</strong>：只有当<strong>链路状态发生变化</strong>时，路由器才向所有路由器洪泛发送此信息</li><li>最后，所有路由器都能建立一个<strong>链路状态数据库</strong>，即<strong>全网拓扑图</strong></li></ol><h4 id="链路状态算法">4.5.2.2 链路状态算法</h4><ol type="1"><li>每个路由器发现它的邻居结点【<strong>HELLO问候分组</strong>】，并了解邻居节点的网络地址</li><li>设置到它的每个邻居的<strong>成本度量metric</strong></li><li>构造【<strong>DD数据库描述分组</strong>】，向邻站给出自己的链路状态数据库中的所有链路状态项目的摘要信息</li><li>如果DD分组中的摘要自己都有，则邻站不做处理；如果有没有的或者是更新的，则发送【<strong>LSR链路状态请求分组</strong>】请求自己没有的和比自己更新的信息</li><li>收到邻站的LSR分组后，发送【<strong>LSU链路状态更新分组</strong>】进行更新</li><li>更新完毕后，邻站返回一个【<strong>LSAck链路状态确认分组</strong>】进行确认</li></ol><p>只要一个路由器的链路状态发生变化:</p><ol start="5" type="1"><li>泛洪发送【<strong>LSU链路状态更新分组</strong>】进行更新</li><li>更新完毕后，其他站返回一个【<strong>LSAck链路状态确认分组</strong>】进行确认</li><li>使用Dijkstra根据自己的链路状态数据库<strong>构造到其他节点间的最短路径</strong></li></ol><h4 id="ospf的区域">4.5.2.3 OSPF的区域</h4><p><img src="/images/AssetMarkdown/image-20221129214835703.png" alt="image-20221129214835703" style="zoom:80%;" /></p><h4 id="ospf分组">4.5.2.4 OSPF分组</h4><ol type="1"><li>OSPF直接使用<strong>IP数据报</strong>传送</li></ol><p><img src="/images/AssetMarkdown/image-20221129214958641.png" alt="image-20221129214958641" style="zoom:80%;" /></p><h4 id="ospf其他特点">4.5.2.5 OSPF其他特点</h4><ol type="1"><li>每隔30min，要刷新一次数据库中的链路状态</li><li>由于一个路由器的链路状态只涉及到与相邻路由器的连通状态，因而与整个互联网的规模并无直接关系。因此当互联网规模很大时，OSPF协议要比距离向量协议RIP好得多</li><li>OSPF不存在坏消息传的慢的问题，它的收敛速度很快</li></ol><h3 id="bgp协议">4.5.3 BGP协议</h3><h4 id="bgp协议和谁交换多久交换一次交换什么">4.5.3.1BGP协议和谁交换？多久交换一次？交换什么？</h4><ol type="1"><li><strong>和谁交换</strong>：与其它AS的邻站BGP发言人交换信息</li><li><strong>交换什么</strong>：交换网络可达性的信息，即要到达某个网络所要经过的一系列AS</li><li><strong>多久交换</strong>：发生变化时<strong>更新有变化</strong>的部分</li></ol><p><img src="/images/AssetMarkdown/image-20221206155545414.png" alt="image-20221206155545414" style="zoom:80%;" /></p><h4 id="bgp协议交换信息的过程">4.5.3.2 BGP协议交换信息的过程</h4><ol type="1"><li><p>BGP所交换的网络可达性的信息：<strong>要到达某个网络所要经过的一系列AS</strong></p></li><li><p>当BGP发言人互相交换了网络可达性的信息后，各BGP发言人就根据所采用的策略从收到的路由信息中找出到达各AS的<strong>较好路由</strong></p><p><img src="/images/AssetMarkdown/image-20221206155653004.png" alt="image-20221206155653004" style="zoom:80%;" /></p></li><li><p>BGP发言人交换<strong>路径向量</strong>：</p><ol type="1"><li><p>自治系统AS<sub>2</sub>的BGP发言人通知主干网AS<sub>1</sub>的BGP发言人:“要到达网络N1、 N2、N3、N4可经过AS<sub>2</sub>。”</p><p><img src="/images/AssetMarkdown/image-20221206155919276.png" alt="image-20221206155919276" style="zoom:80%;" /></p></li><li><p>主干网还可发出通知：“要到达网络N5、N6和N7可沿路径(AS<sub>1</sub>，AS<sub>3</sub>)。”</p><p><img src="/images/AssetMarkdown/image-20221206160217081.png" alt="image-20221206160217081" style="zoom:80%;" /></p></li></ol></li></ol><h4 id="bgp协议报文格式">4.5.3.3 BGP协议报文格式</h4><ol type="1"><li>一个BGP发言人与其他自治系统中的BGP发言人要交换路由信息，就要<strong>先建立TCP连接</strong>，即通过TCP传送，然后在此连接上交换BGP报文以建立BGP会话(session)，利用BGP会话交换路由信息</li></ol><p><img src="/images/AssetMarkdown/image-20221206160353750.png" alt="image-20221206160353750" style="zoom:80%;" /></p><h4 id="bgp协议特点">4.5.3.4 BGP协议特点</h4><ol type="1"><li>BGP支持<strong>CIDR</strong>，因此BGP的路由表也就应当包括目的网络前缀、下一跳路由器，以及到达该目的网络所要经过的各个自治系统序列。</li><li>在BGP刚刚运行时，BGP的邻站是交换整个的BGP路由表。但以后只需要在<strong>发生变化时更新有变化的部分</strong>。这样做对节省网络带宽和减少路由器的处理开销都有好处。</li></ol><h4 id="bgp-4的四种报文">4.5.3.5 BGP-4的四种报文</h4><ol type="1"><li><strong>OPEN(打开)报文</strong>：用来与相邻的另一个BGP发言人建立关系，并认证发送方</li><li><strong>UPDATE(更新)报文</strong>：通告新路径或撤销原路径</li><li><strong>KEEPALIVE(保活)报文</strong>：在无UPDATE时，周期性证实邻站的连通性;也作为OPEN的确认</li><li><strong>NOTIFICATION(通知)报文</strong>：报告先前报文的差错;也被用于关闭连接</li></ol><h3 id="三种路由协议的比较">4.5.4 三种路由协议的比较</h3><table><colgroup><col style="width: 6%" /><col style="width: 33%" /><col style="width: 29%" /><col style="width: 30%" /></colgroup><thead><tr class="header"><th style="text-align: center;">协议</th><th style="text-align: center;">RIP</th><th style="text-align: center;">OSPF</th><th style="text-align: center;">BGP</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">类型</td><td style="text-align: center;">内部</td><td style="text-align: center;">内部</td><td style="text-align: center;">外部</td></tr><tr class="even"><td style="text-align: center;">路由算法</td><td style="text-align: center;">距离-向量</td><td style="text-align: center;">链路状态</td><td style="text-align: center;">路径-向量</td></tr><tr class="odd"><td style="text-align: center;">传递协议</td><td style="text-align: center;">UDP</td><td style="text-align: center;">IP</td><td style="text-align: center;">TCP</td></tr><tr class="even"><td style="text-align: center;">路径选择</td><td style="text-align: center;">跳数最少</td><td style="text-align: center;">代价最低</td><td style="text-align: center;">较好，非最佳</td></tr><tr class="odd"><td style="text-align: center;">交换节点</td><td style="text-align: center;">和本结点相邻的路由器</td><td style="text-align: center;">网络中的所有路由器</td><td style="text-align: center;">和本结点相邻的路由器</td></tr><tr class="even"><td style="text-align: center;">交换内容</td><tdstyle="text-align: center;">当前本路由器知道的全部信息，即自己的路由表</td><tdstyle="text-align: center;">与本路由器相邻的所有路由器的链路状态</td><tdstyle="text-align: center;">首次：整个路由表；非首次：有变化的部分</td></tr></tbody></table><h2 id="ip组播">4.6 IP组播</h2><h3 id="ip数据报的三种传输方式">4.6.1 IP数据报的三种传输方式</h3><ol type="1"><li><p><strong>单播</strong>：单播用于发送数据包到单个目的地，且每发送一份单播报文都使用一个单播IP地址作为目的地址。是一种<strong>点对点</strong>传输方式</p><p><img src="/images/AssetMarkdown/image-20221206192249707.png" alt="image-20221206192249707" style="zoom: 67%;" /></p></li><li><p><strong>广播</strong>：广播是指发送数据包到同一广播域或子网内的所有设备的一种数据传输方式，是一种<strong>点对多点</strong>传输方式</p></li><li><p><strong>组播(多播)</strong>：当网络中的某些用户需要特定数据时，组播数据发送者仅发送一次数据，借助组播路由协议为组播数据包建立组播分发树，被传递的数据<strong>到达距离用户端尽可能近的节点后才开始复制和分发</strong>，是一种<strong>点对多点</strong>传输方式</p><p><img src="/images/AssetMarkdown/image-20221206192330579.png" alt="image-20221206192330579" style="zoom: 67%;" /></p></li></ol><h3 id="ip组播地址">4.6.2 IP组播地址</h3><ol type="1"><li>IP组播地址让源设备能够将分组发送给一组设备。属于多播组的设备将被分配<strong>一个组播组IP地址</strong>(<strong>一群共同需求主机的相同标识</strong>)</li><li>组播地址范围为224.0.0.0~239.255.255.255(D类地址)，一个D类地址表示一个组播组。只能用作分组的<strong>目标地址</strong>。<strong>源地址总是为单播地址</strong></li></ol><p>组播的特点：</p><ol type="1"><li>组播数据报也是“尽最大努力交付”，不提供可靠交付，应用于<strong>UDP</strong></li><li>对组播数据报不产生ICMP差错报文</li><li>并非所有D类地址都可以作为组播地址，有的地址被定义为永久组播地址</li></ol><p><img src="/images/AssetMarkdown/image-20221206192712826.png" alt="image-20221206192712826" style="zoom:80%;" /></p><h3 id="硬件组播">4.6.3 硬件组播</h3><ol type="1"><li>同单播地址一样，组播IP地址也需要相应的组播MAC地址在本地网络中实际传送顿。</li><li><strong>地址的转换</strong>：组播MAC地址以十六进制值<strong>01-00-5E</strong>打头，余下的6个十六进制位是IP组播组地址的<strong>最后23位</strong></li><li>TCP/IP协议使用的以太网多播地址的范围是：<strong>01-00-5E-00-00-00</strong>到<strong>01-00-5E-7F-FF-FF</strong></li><li></li></ol><p><img src="/images/AssetMarkdown/image-20221206193244101.png" alt="image-20221206193244101" style="zoom:80%;" /></p><h3 id="igmp协议与组播路由选择协议">4.6.4IGMP协议与组播路由选择协议</h3><ol type="1"><li><strong>IGMP协议</strong>：判断一个路由器所连的局域网中，是否有主机参加/退出某个组播组</li><li><strong>组播路由选择协议</strong>：路由器之间进行路径选择</li></ol><h4 id="网际组管理协议-igmp">4.6.4.1 网际组管理协议 IGMP</h4><p><img src="/images/AssetMarkdown/image-20221206193546317.png" alt="image-20221206193546317" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221206193641440.png" alt="image-20221206193641440" style="zoom:80%;" /></p><p>IGMP工作的两个阶段：</p><ol type="1"><li>ROUND 1<ol type="1"><li>某主机要加入组播组时，该主机向组播组的<strong>组播地址</strong>发送一个IGMP报文，声明自己要称为该组的成员</li><li>本地组播路由器收到IGMP报文后，要利用组播路由选择协议把这组成员关系发给因特网上的其他组播路由器</li></ol></li><li>ROUND 2<ol type="1"><li>本地组播路由器<strong>周期性探询</strong>本地局域网上的主机，以便知道这些主机是否还是组播组的成员</li><li><strong>只要有一个主机</strong>对某个组响应，那么组播路由器就认为这个组是活跃的;如果经过几次探询后没有一个主机响应，组播路由器就认为本网络上的没有此组播组的主机，因此就不再把这组的成员关系发给其他的组播路由器</li></ol></li><li><strong>组播路由器知道的成员关系只是所连接的局域网中有无组播组的成员</strong>，并不会反应该组播组成员有多少个，因为路由器页不知道</li></ol><h4 id="组播路由选择协议">4.6.4.2 组播路由选择协议</h4><ol type="1"><li><p>目的：找出以源主机为根节点的组播转发树</p></li><li><p>构造树可以避免在路由器之间兜圈子</p></li><li><p>对不同的多播组对应于不同的多播转发树；同一个多播组，对不同的源点也会有不同的多播转发树</p><p><img src="/images/AssetMarkdown/image-20221206195118352.png" alt="image-20221206195118352" style="zoom:80%;" /></p></li><li><p>三种算法：</p><ol type="1"><li>基于链路状态的路由选择</li><li>基于距离-向量的路由选择</li><li>协议无关的组播(稀疏/密集)</li></ol></li></ol><h3 id="总结-18">4.6.5 总结</h3><p><img src="/images/AssetMarkdown/image-20221206195344098.png" alt="image-20221206195344098" style="zoom:80%;" /></p><h2 id="移动ip">4.7 移动IP</h2><ol type="1"><li>动态IP：通过使用DHCP协议，在一个局域网内部的主机可以动态的获得一个IP地址</li><li>移动IP：物理位置改变，但IP地址不变</li></ol><h3 id="移动ip相关术语">4.7.1 移动IP相关术语</h3><ol type="1"><li>移动IP技术：是移动结点(计算机/服务器等)以<strong>固定的网络IP地址</strong>，实现跨越不同网段的<strong>漫游</strong>功能，并保证了基于网络IP的网络权限在漫游过程中不发生任何改变</li><li><strong>移动节点</strong>：具有永久IP地址的移动设备</li><li><strong>归属代理(本地代理)</strong>：一个移动结点拥有的就“居所”称为<strong>归属网络</strong>，在归属网络中代表移动节点执行移动管理功能的实体叫做归属代理</li><li><strong>外部代理(外地代理)</strong>：在<strong>外部网络</strong>中帮助移动节点完成移动管理功能的实体称为外部代理</li><li><strong>永久地址(归属地址/主地址)</strong>：移动站点在归属网络中的原始地址</li><li><strong>转交地址(辅地址)</strong>：移动站点在外部网络使用的临时地址</li></ol><h3 id="移动ip通信过程">4.7.2 移动IP通信过程</h3><p><img src="/images/AssetMarkdown/image-20221212185925655.png" alt="image-20221212185925655" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221212190018543.png" alt="image-20221212190018543" style="zoom:80%;" /></p><h2 id="网络层设备">4.8 网络层设备</h2><h3 id="路由器">4.8.1 路由器</h3><ol type="1"><li>路由器：是一种具有多个输入端口和多个输出端口的专用计算机<ol type="1"><li>任务：转发分组</li></ol></li><li>路由选择：根据所选定的路由选择协议<strong>构造路由表</strong>，同时经常或定期和相邻路由器交换路由信息而不断地<strong>更新和维护路由表</strong></li><li>交换结构：根据<strong>转发表(由路由表得来)</strong>对分组进行转发</li><li>转发 vs 路由选择：<ol type="1"><li>转发：是一个路由器内部，确定数据应该被发向哪个端口</li><li>路由选择：是路由器决定数据下一个应当去往哪个路由器</li></ol></li><li>如果收到RIP/OSPF分组，则把分组送往路由选择处理机；若收到数据分组，则查找转发表并输出</li></ol><p><img src="/images/AssetMarkdown/image-20221212190813832.png" alt="image-20221212190813832" style="zoom:80%;" /></p><h4 id="输入端口对线路上收到的分组的处理">4.8.1.1输入端口对线路上收到的分组的处理</h4><p>输入端口中，查找和转发功能在路由器的交换功能中是最重要的</p><p><img src="/images/AssetMarkdown/image-20221212190838959.png" alt="image-20221212190838959" style="zoom:80%;" /></p><h4 id="输出端口将交换结构传送来的分组发送到线路">4.8.1.2输出端口将交换结构传送来的分组发送到线路</h4><ol type="1"><li>若路由器处理分组的速率赶不上分组进入队列的速率，则队列的存储空间最终必定减少到零，这就使后面再进入队列的分组由于没有存储空间而只能被丢弃</li><li><strong>路由器中的输入或输出队列产生溢出是造成分组丢失的重要原因</strong></li></ol><p><img src="/images/AssetMarkdown/image-20221212191008504.png" alt="image-20221212191008504" style="zoom:80%;" /></p><h3 id="三层设备的区别">4.8.2 三层设备的区别</h3><ol type="1"><li><strong>路由器</strong>：可以互联两个不同网络层协议的网段</li><li><strong>网桥</strong>：可以互联两个物理层和链路层不同的网段</li><li><strong>集线器</strong>：不能互联两个物理层不同的网段</li><li><strong>任何层次的设备都能互联它所在的层次以及以下层次不同协议的网段(×，集线器不可以)</strong></li></ol><table><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">能否隔离冲突域</th><th style="text-align: center;">能否隔离广播域</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">物理层设备(中继器、集线器)</td><td style="text-align: center;">×</td><td style="text-align: center;">×</td></tr><tr class="even"><td style="text-align: center;">链路层设备(网桥、交换机)</td><td style="text-align: center;">√</td><td style="text-align: center;">×</td></tr><tr class="odd"><td style="text-align: center;">网络层设备(路由器)</td><td style="text-align: center;">√</td><td style="text-align: center;">√</td></tr></tbody></table><h3 id="路由表与路由转发">4.8.3 路由表与路由转发</h3><ol type="1"><li><strong>路由表</strong>：根据<strong>路由选择算法</strong>得出，主要用于路由选择，总用软件实现</li><li><strong>转发表</strong>：根据<strong>路由表</strong>得出，可以用软件实现，也可以用特殊的硬件来实现。转发表必须包含完成转发功能所必需的信息，在转发表的每一行必须包含从要到达的目的网络到输出端口和某些MAC地址信息的映射</li></ol><p><img src="/images/AssetMarkdown/image-20221212191556123.png" alt="image-20221212191556123" style="zoom:80%;" /></p><h2 id="补充">4.9 补充</h2><h3 id="网络互联隧道-tunneling">4.9.1 网络互联：隧道 Tunneling</h3><p><img src="/images/AssetMarkdown/image-20221231174433620.png" alt="image-20221231174433620" style="zoom:80%;" /></p><ol type="1"><li>多个相同类型的网络，通过不同类型的网络进行互联</li></ol><h3 id="包的切割">4.9.2 包的切割</h3><p><img src="/images/AssetMarkdown/image-20221231174618356.png" alt="image-20221231174618356" style="zoom:80%;" /></p><ol type="1"><li>允许切割<ol type="1"><li>不透明：切完以后不还原，到目的地还原</li><li>透明：切完以后还原</li></ol></li><li>不允许切割<ol type="1"><li>IPv6选择不允许切割，如果包太大，就直接踢回去，让源主机切割</li></ol></li></ol><h3 id="软件定义网络sdnsoftware-defined-networking">4.9.3软件定义网络SDN：Software-Defined Networking</h3><p><img src="/images/AssetMarkdown/image-20221231174855353.png" alt="image-20221231174855353" style="zoom:80%;" /></p><ol type="1"><li>数据平面：通常是分布式的</li><li>管理平面：通常是集中式的</li><li>SDN：管理平面集中在一个软件控制器中，软件控制器为每个路由计算其路由表，路由从软件控制器中下载路由表使用</li></ol><h3 id="标记交换-label-switching">4.9.4 标记交换 Label Switching</h3><p><img src="/images/AssetMarkdown/image-20221231175606687.png" alt="image-20221231175606687" style="zoom:80%;" /></p><h1 id="chapter-5传输层-transport-layer">Chapter 5：传输层 TransportLayer</h1><h2 id="传输层概述">5.1 传输层概述</h2><ol type="1"><li>只有主机才有</li><li>为应用层提供通信服务，使用网络层的服务</li><li>传输层的功能：<ol type="1"><li>提供<strong>进程与进程之间</strong>的逻辑通信(网络层提供的是主机之间的逻辑通信)</li><li>复用与分用<ol type="1"><li>复用：不同进程使用同一传输层协议进行传输</li><li>分用：将传来的报文段送交给某个进程</li></ol></li><li>对收到的<strong>报文</strong>进行<strong>差错检测</strong></li></ol></li></ol><h3 id="传输层的两种协议tcpudp">5.1.1 传输层的两种协议：TCP、UDP</h3><p><img src="/images/AssetMarkdown/image-20221212193149384.png" alt="image-20221212193149384" style="zoom:80%;" /></p><h3 id="传输层的寻址与端口">5.1.2 传输层的寻址与端口</h3><ol type="1"><li><p><strong>复用</strong>：应用层所有的应用进程，都能够通过传输层在传输到网络层</p></li><li><p><strong>分用</strong>：传输层从网络层收到数据后，交付给指明的应用程序</p></li><li><p><strong>端口/逻辑端口/软件端口</strong>：是传输层的SAP，标识主机中的应用进程</p><ol type="1"><li>端口号只有本地意义，在因特网中不同计算机的相同端口是没有联系的</li><li>端口号长度为16bit，能表示65536个不同的端口号</li></ol></li><li><p>端口号按范围分：</p><p><img src="/images/AssetMarkdown/image-20221212193708560.png" alt="image-20221212193708560" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221212193745221.png" alt="image-20221212193745221" style="zoom:80%;" /></p></li><li><p><strong>套接字Socket = (主机IP地址，端口号)</strong></p><ol type="1"><li>在网络中采用发送方和接收方的套接字组合来识别端点</li><li>套接字唯一标识了网络中的一个主机和它上面的一个进程</li></ol></li></ol><h2 id="udp协议">5.2 UDP协议</h2><ol type="1"><li>UDP在IP数据报服务之上，仅添加了复用分用、差错检测功能</li><li>UDP的主要特点：<ol type="1"><li><strong>无连接</strong>，减小开销和发送数据之前的时延</li><li><strong>不保证可靠交付</strong></li><li><strong>面向报文</strong>，适合一次性传输少量数据，如果太大需要网络层分片</li><li><strong>无拥塞控制</strong>，适合很多实时应用</li><li><strong>首部开销小</strong>，只有8B(TCP为20B)</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221212194133114.png" alt="image-20221212194133114" style="zoom:80%;" /></p><h3 id="udp首部格式">5.2.1 UDP首部格式</h3><p><img src="/images/AssetMarkdown/image-20221212194537991.png" alt="image-20221212194537991" style="zoom:80%;" /></p><ol type="1"><li><strong>源端口号</strong>：可有可无，想要回复则填上</li><li><strong>UDP长度</strong>：整个UDP用户数据报的长度</li><li><strong>UDP检验和</strong>：检测整个UDP</li><li>丢弃情况：<ol type="1"><li>UDP检验和错误，则丢弃报文</li><li>分用时，找不到目的端口号，则丢弃报文，并发送给发送方ICMP”端口不可达”差错报告报文</li></ol></li></ol><h3 id="udp检验">5.2.2 UDP检验</h3><h4 id="伪首部">5.2.2.1 伪首部</h4><p><img src="/images/AssetMarkdown/image-20221212194907694.png" alt="image-20221212194907694" style="zoom:80%;" /></p><ol type="1"><li>伪IP首部</li><li>只有在计算校验和的时候出现，不向下传送也不向上递交</li><li>17：封装UDP报文的IP数据报首部协议字段是17</li><li>UDP长度：UDP首部8B + 数据部分的长度，不包括伪首部</li></ol><h4 id="校验方式">5.2.2.2 校验方式</h4><p><img src="/images/AssetMarkdown/image-20221212195051240.png" alt="image-20221212195051240" style="zoom:80%;" /></p><ol type="1"><li>发送端：<ol type="1"><li>填上伪首部</li><li>检验和：填充为全0</li><li>数据部分：不足4B的用0补齐</li><li>伪首部 + 首部 + 数据部分 用二进制反码求和(此时校验和全0)</li><li>检验和：将求和结果的反码填入</li><li>删除伪首部，然后发送</li></ol></li><li>接收端：<ol type="1"><li>填上伪首部</li><li>伪首部 + 首部 + 数据部分 用二进制反码求和(此时校验和是有数的)</li><li>结果全为1则无差错，否则丢弃数据报 / 交给应用层并附上差错的警告</li></ol></li></ol><h2 id="tcp协议">5.3 TCP协议</h2><h3 id="tcp协议特点">5.3.1 TCP协议特点</h3><ol type="1"><li>TCP是<strong>面向连接</strong>(虚连接)的传输层协议</li><li>每一条TCP连接只能有2个端点，每一条TCP连接只能是点对点的</li><li>TCP提供可靠交付的服务，无差错、不丢失、不重复、按序抵达：<strong>可靠有序，不丢不重</strong></li><li>TCP提供<strong>全双工通信</strong>：两端均有发送缓存、接收缓存<ol type="1"><li>发送缓存：准备发送的数据 &amp; 已经发送但尚未收到确认的数据</li><li>接收缓存：不按序到达的数据 &amp;按序到达但尚未被应用程序读取的数据</li></ol></li><li>TCP面向<strong>字节流</strong><ol type="1"><li>流：流入到进程 / 从进程流出的数据</li><li>TCP把应用层交下来的数据看成仅仅是一连串的<strong>无结构的字节流</strong></li></ol></li></ol><h3 id="tcp报文段首部格式重点">5.3.2TCP报文段首部格式(<strong>重点</strong>)</h3><p><img src="/images/AssetMarkdown/image-20221212200021591.png" alt="image-20221212200021591"  /></p><ol type="1"><li><strong>序号seq</strong> 4B：<ol type="1"><li>在一个TCP连接中，传送的字节流中的每一个字节都按顺序编号，本字段表示<strong>本报文段</strong>所发送数据的<strong>第一个字节的序号</strong></li><li>如当前TCP报文发送的是文件的第4、5、6字节，则此处的序号填4</li></ol></li><li><strong>确认号ack</strong> 4B：<ol type="1"><li><strong>期望</strong>收到对方下一个报文段的第一个数据字节的序号。若确认号为N，则证明0~N-1的所有数据均已正确收到</li></ol></li><li><strong>数据偏移(首部长度) </strong> 4bit：<ol type="1"><li>TCP报文段的数据起始处距离TCP报文段的起始处有多远，<strong>单位为4B</strong></li></ol></li><li><strong>控制位</strong> 6bit：<ol type="1"><li><strong>紧急位URG</strong>：URG=1时，表明此报文段中有紧急数据，是高优先级的数据，应尽快传送，不用再缓存里排队。配合紧急指针字段使用（发送端的优先处理）</li><li><strong>确认位ACK</strong>：ACK=1时，确认号有效，在连接建立后，所有传送的报文段都必须把ACK置为1</li><li>推送位PSH：PSH=1时，接收方应尽快交付接收应用进程，不再等到缓存填充满再向上交付（接收端的优先处理）</li><li>复位RST：RST=1时，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立传输连接</li><li><strong>同步位SYN</strong>：SYN=1时，表明是一个<strong>连接请求/连接接受报文</strong></li><li><strong>终止位FIN</strong>：FIN=1时，表明此报文段发送方数据已发完，要求释放连接</li></ol></li><li><strong>窗口</strong> 2B：<ol type="1"><li>发送方的接收窗口，即现在允许对方发送的数据量</li><li>窗口大小最高为65536</li><li>如果确认号为701，窗口为1000，则发送方的接收窗口的缓存队列应为701~1700</li></ol></li><li><strong>检验和</strong> 2B：<ol type="1"><li>检验首部 +数据，检验时要加上12B的伪首部，伪首部的第四个字段为<strong>6</strong></li></ol></li><li><strong>紧急指针</strong> 2B：<ol type="1"><li>URG=1时才有意义</li><li>指出本报文段中紧急数据的字节数（紧急数据的末尾在报文段中的位置）</li><li>如果紧急指针为50，则0~50均为紧急数据</li></ol></li><li><strong>选项</strong>：<ol type="1"><li>最大报文段长度MSS：每个TCP报文段中数据字段的最大长度</li><li>窗口扩大、时间戳、选择确认</li></ol></li><li><strong>填充</strong>：<ol type="1"><li>TCP首部长度为<strong>4B的整数倍</strong>，一般填充全0</li></ol></li></ol><h3 id="tcp连接管理">5.3.3 TCP连接管理</h3><p>TCP连接传输的三个阶段：</p><ol type="1"><li>连接建立</li><li>数据传输</li><li>连接释放</li></ol><p>TCP连接的建立采用的是<strong>客户服务器方式</strong>：</p><ol type="1"><li>客户：主动发起连接建立的应用进程</li><li>服务器：被动等待连接建立的应用进程</li></ol><h4 id="tcp的连接建立三次握手">5.3.3.1TCP的连接建立(<strong>三次握手</strong>)</h4><blockquote><p><img src="/images/AssetMarkdown/image-20221212221059360.png" alt="image-20221212221059360" style="zoom:80%;" /></p></blockquote><p>假设运行在一台主机(客户)上的一个进程想与另一台主机(服务器)上的一个进程建立一条连接，客户应用进程首先通知客户TCP，他想建立一个与服务器上某个进程之间的连接，客户中的TCP会用以下步骤与服务器中的TCP建立一条TCP连接：</p><ol type="1"><li>客户端发送<strong>连接请求报文段</strong>，无应用层数据<ol type="1"><li><strong>SYN=1，seq=x(随机数)，ACK=0</strong></li></ol></li><li>服务器端为该TCP连接<strong>分配缓存和变量</strong>，并向服务器端返回<strong>确认报文段</strong>，允许连接，无应用层数据<ol type="1"><li><strong>SYN=1，ACK=1，seq=y(随机数)，ack=x+1</strong></li></ol></li><li>客户端为该TCP连接<strong>分配缓存和变量</strong>，并向服务器端返回确认的确认，可以携带数据<ol type="1"><li><strong>SYN=0，ACK=1，seq=x+1，ack=y+1</strong></li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221212220257670.png" alt="image-20221212220257670" style="zoom:80%;" /></p><p>SYN洪泛攻击</p><ol type="1"><li>SYN洪泛攻击发生在<strong>OSI第四层</strong>，这种方式利用<strong>TCP协议</strong>的特性，就是<strong>三次握手</strong></li><li>攻击者发送TCP SYN，SYN是TCP三次握手中的第一个数据包，而当服务器返回ACK后，该攻击者就不对其进行再确认，那这个TCP连接就处于挂起状态，也就是所谓的半连接状态，服务器收不到再确认的话，还会重复发送ACK给攻击者，这样更加会浪费服务器的资源</li><li>攻击者就对服务器发送非常大量的这种TCP连接，由于每一个都没法完成三次握手，所以在服务器上，这些TCP连接会因为挂起状态而消耗CPU和内存，最后服务器可能死机，就无法为正常用户提供服务了</li></ol><p>解决方法：SYN cookie</p><h4 id="tcp的连接释放四次握手">5.3.3.2TCP的连接释放(<strong>四次握手</strong>)</h4><blockquote><p><img src="/images/AssetMarkdown/image-20221212221038391.png" alt="image-20221212221038391" style="zoom:80%;" /></p></blockquote><p>参与一条TCP连接的两个进程中的任何一个都能终止该连接，连接结束后，主机中的“资源”(缓存和变量)将被释放：</p><ol type="1"><li>客户端发送<strong>连接释放报文段</strong>，停止发送数据，主动关闭TCP连接<ol type="1"><li><strong>FIN=1，seq=u(客户端发送到的地方)</strong></li></ol></li><li>服务端回送一个<strong>确认报文段</strong>，<strong>客户到服务端</strong>这个方向的连接就释放了：<strong>半关闭</strong>状态<ol type="1"><li><strong>ACK=1，seq=v(服务器发送到的地方)，ack=u+1</strong></li></ol></li><li>服务器端发完数据，就发出<strong>连接释放报文段</strong>，主动关闭TCP连接<ol type="1"><li><strong>FIN=1，ACK=1，seq=w，ack=u+1</strong></li></ol></li><li>客户端回送一个<strong>确认报文段</strong>，再等到<strong>时间等待计时器</strong>设置的<strong>2MSL(最长报文段寿命)</strong>后，连接彻底关闭<ol type="1"><li><strong>ACK=1，seq=u+1，ack=w+1</strong></li><li>如果服务器无法收到客户端回送的确认报文段，客户端会在2MSL之内收到重传的报文段，客户端然后重传确认，并且重新启动2MSL的计时器</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221212220312555.png" alt="image-20221212220312555" style="zoom:80%;" /></p><h3 id="tcp可靠传输">5.3.4 TCP可靠传输</h3><ol type="1"><li>网络层：尽最大努力交付，不可靠传输</li><li>传输层：使用TCP实现可靠传输</li><li><strong>可靠</strong>：保证接收方进程从缓存区中读出的字节流与发送方发出的字节流是完全一样的</li><li>TCP实现可靠传输的机制：<ol type="1"><li>校验：与UDP校验一样，<strong>添加伪首部</strong></li><li>序号</li><li>确认</li><li>重传</li></ol></li></ol><h4 id="序号">5.3.4.1 序号</h4><ol type="1"><li>TCP面向字节流，因此会将字节编号，发送时将多个字节拼在一起形成一个报文段</li><li>一个字节占一个序号</li><li><strong>序号字段</strong>：一个报文段第一个字节的序号</li></ol><p><img src="/images/AssetMarkdown/image-20221212221544009.png" alt="image-20221212221544009" style="zoom:80%;" /></p><h4 id="确认">5.3.4.2 确认</h4><ol type="1"><li>接收方发送确认报文段，告诉发送方已经正确接收</li><li>TCP使用累计确认：<ol type="1"><li>正常接收78，但确认报文段表示接收方期待4</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221212222154032.png" alt="image-20221212222154032" style="zoom:80%;" /></p><h4 id="重传">5.3.4.3 重传</h4><ol type="1"><li>TCP的发送方在<strong>规定的时间</strong>内没有收到确认，就要重传已发送的报文段：<strong>超时重传</strong>，该时间称为<strong>重传时间</strong></li><li>TCP采用自适应算法，动态改变重传时间<strong>RTTs(加权平均往返时间)</strong></li></ol><p><img src="/images/AssetMarkdown/image-20221212222443344.png" alt="image-20221212222443344" style="zoom:80%;" /></p><p><strong>冗余ACK(冗余确认)</strong></p><ol type="1"><li>每当比期望序号大的失序报文段到达时，发送一个<strong>冗余ACK</strong>，指明下一个期待字节的序号<ol type="1"><li>发送方已发送1，2，3，4，5报文段</li><li>接收方收到1，返回给1的确认(确认号为2的第一个字节)</li><li>接收方收到3，返回给1的确认(确认号为2的第一个字节)</li><li>接收方收到4，返回给1的确认(确认号为2的第一个字节)</li><li>接收方收到5，返回给1的确认(确认号为2的第一个字节)</li><li>发送方收到<strong>3个对于报文段1的冗余ACK</strong> →认为报文段2丢失，重传2号报文段</li></ol></li><li>称为<strong>快速重传</strong>机制</li></ol><h3 id="tcp流量控制重点">5.3.5 TCP流量控制(<strong>重点</strong>)</h3><ol type="1"><li>流量控制：让<strong>发送方慢点</strong>，要让接收方来得及接收</li><li>TCP使用<strong>滑动窗口</strong>机制实现流量控制<ol type="1"><li>在通信过程中，接收方根据自己<strong>接收缓存的大小</strong>，动态地调整发送方的发送窗口大小，即<strong>接收窗口rwnd</strong>(接收方设置确认报文段的<strong>窗口字段</strong>来将rwnd通知给发送方)</li><li>发送方的<strong>发送窗口</strong>为：<strong>min{接收窗口rwnd，拥塞窗口cwnd}</strong></li><li>建立连接时，接收方返回的确认报文段中包含自己的接收窗口大小，发送方根据上述公式确定发送窗口</li><li>发送窗口的大小可以动态变化</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221212223450799.png" alt="image-20221212223450799" style="zoom:80%;" /></p><blockquote><p>A向B发送数据，连接建立时，B告诉A：“我的rwnd=400B”</p><p>设每一个报文段为100B，报文段序号初始值为1</p></blockquote><figure><img src="/images/AssetMarkdown/image-20221212224030365.png"alt="image-20221212224030365" /><figcaption aria-hidden="true">image-20221212224030365</figcaption></figure><p>解决零窗口通知后，新的窗口大小的报文段丢失，导致两个主机相互等待的问题：</p><ol type="1"><li>TCP为每一个连接设有一个<strong>持续计时器</strong>，只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器</li><li>若持续计时器设置的时间到期，就发送一个零窗口<strong>探测报文段</strong>。接收方收到探测报文段时给出现在的窗口值</li><li>若窗口仍然是0，那么发送方就重新设置持续计时器</li></ol><h3 id="tcp拥塞控制重点">5.3.6 TCP拥塞控制(<strong>重点</strong>)</h3><ol type="1"><li>出现拥塞的条件：对资源需求的总和 &gt; 可用资源</li><li>网络中有许多资源同时呈现供应不足 → 网络性能变坏 →网络吞吐量将随输入负荷的增大而下降</li><li>拥塞控制：防止过多数据注入网络中<ol type="1"><li><strong>全局性问题</strong></li><li>协调使用资源的所有主机</li><li>发送方发送的数据无法到达接收端</li></ol></li><li>流量控制：<ol type="1"><li><strong>点对点问题</strong></li><li>接收端接收到的数据太多，无法处理</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221212224630161.png" alt="image-20221212224630161" style="zoom:80%;" /></p><p>假定：</p><ol type="1"><li>数据单方向传送，另一个方向只传送确认</li><li>接收方总有足够大的缓存空间，因而发送窗口大小取决于拥塞程度<ol type="1"><li><strong>接收窗口</strong>：<strong>接收方</strong>根据接受缓存设置的值，并告知给发送方，反映<strong>接收方容量</strong></li><li><strong>拥塞窗口</strong>：<strong>发送方</strong>根据自己估算的网络拥塞程度而设置的窗口值，反映<strong>网络当前容量</strong></li></ol></li></ol><h4 id="拥塞控制的四种算法慢开始-拥塞避免-tcp-tahoe">5.3.6.1拥塞控制的四种算法：慢开始 &amp; 拥塞避免 (TCP Tahoe)</h4><ol type="1"><li>一个<strong>传输轮次</strong>：<ol type="1"><li>发送了<strong>一批</strong>报文段，并收到它们的确认时间</li><li>一个往返时延<strong>RTT</strong></li><li>开始发送一批拥塞窗口内的报文段，到开始发送下一批拥塞窗口内的报文段的时间</li></ol></li><li><strong>慢开始</strong>：<ol type="1"><li>每经过一个传输轮次，拥塞窗口翻倍，<strong>指数增长</strong></li><li>翻倍的时间：收到报文段的确认之后立即翻倍</li></ol></li><li><strong>拥塞避免</strong>：<ol type="1"><li>当拥塞窗口的大小达到<strong>ssthresh(拥塞窗口门限值)</strong>时，每经过一个传输轮次，拥塞窗口加1，<strong>加法增长</strong></li></ol></li><li>当出现网络拥塞时<ol type="1"><li>将拥塞窗口设置为1</li><li>修改<strong>ssthresh(拥塞窗口门限值)</strong>，新的<code>ssthresh</code>变为原来的一半</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221212230102426.png" alt="image-20221212230102426" style="zoom:80%;" /></p><h4 id="拥塞控制的四种算法快重传-快恢复-tcp-reno">5.3.6.2拥塞控制的四种算法：快重传 &amp; 快恢复 (TCP Reno)</h4><ol type="1"><li><strong>快重传</strong>：<ol type="1"><li>收到同一个报文段的4个ACK报文后，立即重传，不用等待计时器</li></ol></li><li><strong>快恢复</strong>：<ol type="1"><li>快重传后，将拥塞窗口的大小降到新的<strong>ssthresh(拥塞窗口门限值)</strong>即可</li><li>新的<strong>ssthresh(拥塞窗口门限值)</strong>：出现快重传时，将当时的拥塞窗口门限值减半</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221212230427800.png" alt="image-20221212230427800" style="zoom:80%;" /></p><h4 id="tcp-cubic">5.3.6.3 TCP CUBIC</h4><p><img src="/images/AssetMarkdown/image-20221231183050251.png" alt="image-20221231183050251" style="zoom:80%;" /></p><h4 id="bbr">5.3.6.4 BBR</h4><ol type="1"><li>测出整个路径上的瓶颈带宽、往返时延</li><li>窗口大小 = 往返时延 * 瓶颈带宽</li></ol><h1 id="chapter-6应用层">Chapter 6：应用层</h1><h2 id="网络应用模型">6.1 网络应用模型</h2><h3 id="应用层概述">6.1.1 应用层概述</h3><ol type="1"><li>应用层对应用程序的通信提供服务</li><li>应用层协议定义：<ol type="1"><li>应用进程交换的报文类型，请求还是响应?</li><li>各种报文类型的语法，如报文中的各个字段及其详细描述</li><li>字段的语义，即包含在字段中的信息的含义</li><li>进程何时、如何发送报文，以及对报文进行响应的规则</li></ol></li><li>应用层功能：<ol type="1"><li>文件传输、访问、管理</li><li>电子邮件</li><li>虚拟终端</li><li>查询服务和远程作业登录</li></ol></li><li>应用层的重要协议<ol type="1"><li>FTP</li><li>SMTP、POP3</li><li>HTTP</li><li>DNS</li></ol></li></ol><h3 id="网络应用模型-1">6.1.2 网络应用模型</h3><ol type="1"><li>客户/服务器模型：Client/Server</li><li>P2P模型：Peer-to-Peer</li></ol><h4 id="客户服务器模型">6.1.2.1 客户/服务器模型</h4><p><img src="/images/AssetMarkdown/image-20221213112452536.png" alt="image-20221213112452536" style="zoom:80%;" /></p><ol type="1"><li>服务器：<strong>提供计算服务</strong>的设备<ol type="1"><li>永久提供服务</li><li>永久性访问地址/域名</li></ol></li><li>客户机：<strong>请求计算服务</strong>的主机<ol type="1"><li>与服务器通信，使用服务器提供的服务</li><li>间歇性接入网络</li><li>可能使用动态IP地址</li><li>不与其它客户机直接通信</li></ol></li><li>应用：Web、FTP、远程登录、电子邮件</li></ol><h4 id="p2p模型">6.1.2.2 P2P模型</h4><p><img src="/images/AssetMarkdown/image-20221213112651763.png" alt="image-20221213112651763" style="zoom:80%;" /></p><ol type="1"><li>不存在永远在线的服务器</li><li>每个主机既可以<strong>提供服务</strong>，也可以<strong>请求服务</strong></li><li>任意端系统/节点之间可以<strong>直接通讯</strong></li><li>节点间歇性接入网络</li><li>节点可能改变IP地址</li><li>可拓展性好：主机多了，提供服务的也多了，不会受到服务器带宽的限制</li><li>网络健壮性强：一台主机坏了，对于其它主机影响不大，而C/S模型中服务器坏了就都无法使用服务了</li></ol><h2 id="dns系统">6.2 DNS系统</h2><p><img src="/images/AssetMarkdown/image-20221213113331407.png" alt="image-20221213113331407" style="zoom:80%;" /></p><h3 id="域名">6.2.1 域名</h3><blockquote><ol type="1"><li>通过<strong>.</strong>区分标号，每个标号不能超过63个字符(通常不超过12个字符)</li><li>每一个标号的字符不区分大小写，只能包括字母、数字、-</li><li>越靠右，级别越高</li></ol></blockquote><p><img src="/images/AssetMarkdown/image-20221213124047973.png" alt="image-20221213124047973"  /></p><ol type="1"><li><strong>根</strong>：在顶级域名之后的一个<strong>.</strong></li><li><strong>顶级域名</strong>：<ol type="1"><li>国家顶级域名：<code>cn</code>，<code>us</code>，<code>uk</code></li><li>通用顶级域名：<code>com</code>(公司/企业)，<code>net</code>(提供信息服务)，<code>org</code>(非盈利性组织)，<code>gov</code>(政府)，<code>int</code>(国际组织)，<code>aero</code>(航空)，<code>museum</code>(博物馆)，<code>travel</code>(旅游业)</li><li>基础结构域名/反向域名：<code>arpa</code>(反向域名解析--IP地址解析为域名)</li></ol></li><li><strong>二级域名</strong>：<ol type="1"><li>类别域名：<code>ac</code>(科研机构)，<code>com</code>(公司/企业)，<code>edu</code>(教育)，<code>gov</code>(政府)，<code>mil</code>(中国国防机构)，<code>net</code>(提供信息服务)，<code>org</code>(非盈利性组织)</li><li>行政区域名：用于我国各省、自治区、直辖市，<code>bj</code>、<code>js</code></li><li>自己注册的域名：<code>cctv</code>、<code>cskaoyan</code></li></ol></li><li><strong>三级域名</strong>：</li><li><strong>四级域名</strong>：</li></ol><p><img src="/images/AssetMarkdown/image-20221213125200402.png" alt="image-20221213125200402" style="zoom:80%;" /></p><h3 id="域名服务器">6.2.2 域名服务器</h3><p><img src="/images/AssetMarkdown/image-20221213185014293.png" alt="image-20221213185014293" style="zoom:80%;" /></p><ol type="1"><li>根域名服务器：知道顶级域名服务器所对应的IP地址<ol type="1"><li>因特网一共有13个根域名服务器域名，分别为<code>a.rootservers.net</code>~<code>m.rootservers.net</code></li></ol></li><li>顶级域名服务器：管理该顶级域名服务器注册的所有二级域名</li><li>权限域名服务器：负责一个<strong>区</strong>的域名服务器<ol type="1"><li>区：一台域名服务器所管辖的实际范围</li><li>图中<code>abc.org</code>和<code>y.abc.org</code>是两个平等的区，由两个权限域名服务器控制</li></ol></li><li>本地域名服务器：当一个主机发出DNS查询请求时，这个查询请求报文就发给本地域名服务器</li></ol><h3 id="域名解析过程">6.2.3 域名解析过程</h3><p><img src="/images/AssetMarkdown/image-20221213185458020.png" alt="image-20221213185458020" style="zoom:80%;" /></p><ol type="1"><li>递归查询：<strong>靠别人</strong><ol type="1"><li>查询顺序：主机 =&gt; 本地域名服务器 =&gt; 根域名服务器 =&gt;顶级域名服务器 =&gt; 权限域名服务器</li><li>返回顺序：权限域名服务器 =&gt; 顶级域名服务器 =&gt; 根域名服务器=&gt; 本地域名服务器 =&gt; 主机</li></ol></li><li>迭代查询：<strong>靠自己</strong><ol type="1"><li>查询顺序：主机 =&gt; 本地域名服务器 =&gt; 根域名服务器 =&gt;本地域名服务器 =&gt; 顶级域名服务器 =&gt; 本地域名服务器 =&gt;权限域名服务器</li><li>返回顺序：本地域名服务器 =&gt; 主机</li></ol></li><li><strong>高速缓存</strong>：<ol type="1"><li>本机域名服务器/主机中的高速缓存</li><li>存放最近查询到的域名，以及从何处得到的该域名信息的记录</li><li>会定期更新</li></ol></li></ol><h2 id="文件传输协议ftp">6.3 文件传输协议FTP</h2><ol type="1"><li>文件传输协议FTP：File Transfer Protocol<ol type="1"><li>提供不同种类主机系统之间的文件传输能力</li><li>硬件、软件体系等都可以不同</li><li>是一种拷贝：上传 &amp; 下载</li></ol></li><li>简单文件传输协议TFTP：Trivial File Transfer Protocol</li></ol><h3 id="ftp服务器和用户端">6.3.1 FTP服务器和用户端</h3><ol type="1"><li>FTP是基于客户/服务器(C/S)的协议</li><li>用户通过一个客户机程序连接到在远程计算机上运行的服务器端程序</li><li><strong>FTP服务器</strong>：依照FTP协议提供服务，进行文件传输的计算机</li><li><strong>FTP客户端</strong>：连接FTP服务器，遵循FTP协议与服务器传送文件的电脑</li></ol><h3 id="ftp工作原理">6.3.2 FTP工作原理</h3><ol type="1"><li>登陆：<ol type="1"><li>ftp地址<ol type="1"><li>用户名 &amp; 密码</li><li>匿名登陆<ol type="1"><li>互连网中有很大一部分FTP服务器被称为“匿名” (Anonymous) FTP服务器</li><li>这类服务器的目的是向公众提供文件拷贝服务，不要求用户事先在该服务器进行登记注册，也不用取得FTP服务器的授权</li><li><code>Anonymous</code>(匿名文件传输)能够使用户与远程主机建立连接并以匿名身份从远程主机上拷贝文件，而不必是该远程主机的注册用户</li><li>用户使用特殊的用户名“<code>anonymous</code>"登陆FTP服务，就可访问远程主机上公开的文件</li></ol></li></ol></li></ol></li><li><strong>FTP</strong>使用<strong>TCP</strong>实现可靠传输</li><li>FTP服务器进程<ol type="1"><li>1个主进程：负责接收新的请求<ol type="1"><li>打开服务器的熟知端口<code>21</code></li><li>等待客户程序进行连接请求</li></ol></li><li>n个从属进程：负责与客户程序进行文件传输</li></ol></li><li>控制进程、数据传送进程 均为 从属进程<ol type="1"><li><strong>控制</strong>连接<strong>始终</strong>保持</li><li><strong>数据</strong>连接只保持一会</li><li>是否使用<code>TCP 20</code>端口建立<strong>数据连接</strong>，与<strong>传输模式</strong>有关<ol type="1"><li><strong>主动</strong>方式，使用<code>TCP 20</code>端口</li><li><strong>被动</strong>方式，由服务器与客户端自行协商决定(端口&gt;1024)</li></ol></li></ol></li><li>FTP传输模式<ol type="1"><li>文本模式：ASCII模式，以文本序列传输数据</li><li>二进制模式：Binary模式，以二进制序列传输数据</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221213210724859.png" alt="image-20221213210724859" style="zoom:80%;" /></p><h2 id="电子邮件">6.4 电子邮件</h2><h3 id="电子邮件的信息格式">6.4.1 电子邮件的信息格式</h3><ol type="1"><li>电子邮件<ol type="1"><li>信封：<ol type="1"><li>收件人的邮箱，如<code>abc@163.com</code></li><li><code>abc</code>是收件人在网易邮箱服务器中注册的用户名</li><li><code>@163.com</code>表示使用的是网易邮箱服务器</li></ol></li><li>内容：<ol type="1"><li>首部：<ol type="1"><li>发送给谁，如<code>To: abc@163.com</code></li><li>邮件的主题，如<code>Subject: Hello!</code></li><li>会自动生成一部分内容</li></ol></li><li>主体</li></ol></li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221213211407410.png" alt="image-20221213211407410" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221231183411062.png" alt="image-20221231183411062" style="zoom:80%;" /></p><h3 id="组成结构">6.4.2 组成结构</h3><ol type="1"><li><strong>用户代理</strong>：电子邮件客户端软件<ol type="1"><li>撰写邮件</li><li>显示邮件</li><li>处理邮件：发送/接收/转发…</li><li>通信：将邮件发送出去</li></ol></li><li><strong>邮件服务器</strong>：<ol type="1"><li>发送&amp;接收邮件</li><li>向发件人报告邮件传送结果</li><li>使用C/S模式，既可以作客户，也可以作服务器</li></ol></li><li><strong>协议</strong>：<ol type="1"><li>SMTP：发送邮件</li><li>POP3、IMAP：接收邮件</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221213211750601.png" alt="image-20221213211750601" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221213212943898.png" alt="image-20221213212943898" style="zoom:80%;" /></p><h3 id="简单邮件传送协议smtp">6.4.3 简单邮件传送协议SMTP</h3><p><strong>TCP连接、端口号25、C/S模式</strong></p><ol type="1"><li>SMTP规定了：在两个相互通信的<strong>SMTP进程</strong>之间应如何交换信息</li><li><strong>SMTP客户</strong>：负责发送邮件的SMTP进程</li><li><strong>SMTP服务器</strong>：负责接收邮件的进程</li><li>SMTP规定了14条命令(几个字母)和21种应答信息(三位数字代码+简单文字说明)</li></ol><p>SMTP通信的三个阶段：</p><ol type="1"><li><p>连接建立</p><p><img src="/images/AssetMarkdown/image-20221213220911757.png" alt="image-20221213220911757" style="zoom:80%;" /></p></li><li><p>邮件传送</p><p><img src="/images/AssetMarkdown/image-20221213221648198.png" alt="image-20221213221648198" style="zoom:80%;" /></p></li><li><p>连接释放</p><p><img src="/images/AssetMarkdown/image-20221213221701568.png" alt="image-20221213221701568" style="zoom:80%;" /></p></li><li><p>SMTP缺点：</p><ol type="1"><li>SMTP不能传送可执行文件或者其他二进制对象</li><li>SMTP仅限于传送7位ASCII码，不能传送其他非英语国家的文字</li><li>SMTP服务器会拒绝超过一定长度的邮件。</li></ol></li></ol><h3 id="通用因特网邮件扩充mime">6.4.4 通用因特网邮件扩充MIME</h3><p><img src="/images/AssetMarkdown/image-20221213221912921.png" alt="image-20221213221912921" style="zoom:80%;" /></p><ol type="1"><li>使电子邮件系统可以支持声音、图像、视频、多种国家语言等等</li><li>使得传输内容丰富多彩</li></ol><h3 id="邮局协议pop3">6.4.5 邮局协议POP3</h3><p><strong>TCP连接、端口号110、C/S模式</strong></p><p>接收端邮件服务器 =&gt; 用户代理</p><p>POP3工作方式：</p><ol type="1"><li>下载并保留(在服务器)</li><li>下载并删除</li></ol><h3 id="网际报文存取协议imap">6.4.6 网际报文存取协议IMAP</h3><p>接收端邮件服务器 =&gt; 用户代理</p><ol type="1"><li>IMAP协议比POP协议复杂</li><li>当用户PC上的IMAP客户程序打开IMAP服务器的邮箱时，用户可以看到邮箱的首部，若用户需要打开某个邮件，该邮件才上传到用户的计算机上</li><li>IMAP可以让用户在不同的地方使用不同的计算机随时上网阅读处理邮件，还允许只读取邮件中的某一个部分(先看正文，有WiFi的时候再下载附件)</li></ol><h3 id="基于万维网的电子邮件">6.4.7 基于万维网的电子邮件</h3><p><img src="/images/AssetMarkdown/image-20221213222250513.png" alt="image-20221213222250513" style="zoom:80%;" /></p><ol type="1"><li>用户代理 =&gt; 邮件服务器：HTTP</li><li>邮件服务器 =&gt; 邮件服务器：SMTP</li><li>邮件服务器 =&gt; 用户代理：HTTP</li></ol><h2 id="万维网-http协议">6.5 万维网 &amp; HTTP协议</h2><h3 id="万维网概述">6.5.1 万维网概述</h3><ol type="1"><li>万维网WWW(World WideWeb)：是一个大规模的、联机式的信息储藏所/<strong>资料空间</strong>，是无数个网络站点和网页的集合</li><li><strong>资源</strong>：文字、音频、视频…</li><li>访问资源的方式：<strong>统一资源定位符URL</strong></li><li>URL的一般形式：<code>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code>，URL不区分大小写<ol type="1"><li>协议：http、ftp等</li><li>主机：域名、IP地址</li><li>用户通过点击超链接获取资源，这些资源通过<strong>超文本传输协议HTTP</strong>传送给使用者</li></ol></li><li>万维网以<strong>客户/服务器</strong>方式工作，用户使用的浏览器就是万维网客户程序，万维网文档所驻留的主机运行服务器程序</li><li>万维网使用<strong>超文本标记语言HTML</strong>，使得万维网页面设计者可以很方便地从一个界面的链接转到另一个界面，并能够在自己的屏幕上显示出来</li></ol><h3 id="超文本传输协议http">6.5.2 超文本传输协议HTTP</h3><ol type="1"><li>HTTP协议：定义了浏览器(万维网客户进程)怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器</li><li>服务器：一个服务器进程监听<code>TCP 80</code>端口</li><li>用户浏览界面的方法：<ol type="1"><li>输入URL</li><li>点击超链接</li></ol></li></ol><h4 id="具体过程">6.5.2.1 具体过程</h4><ol type="1"><li>浏览器分许URL</li><li>浏览器向DNS请求解析IP地址</li><li>DNS解析出IP地址</li><li>浏览器与服务器建立TCP连接</li><li>浏览器发出取文件命令</li><li>服务器响应</li><li>释放TCP连接</li><li>浏览器显示：浏览器可以只下载文本部分，之后再下载音频等内容</li></ol><p><img src="/images/AssetMarkdown/image-20221213223009351.png" alt="image-20221213223009351" style="zoom:80%;" /></p><h4 id="http协议的特点">6.5.2.2 HTTP协议的特点</h4><ol type="1"><li>HTTP协议是<strong>无状态</strong>的，不会记录用户的登录信息</li><li>通过使用<strong>Cookie</strong>记录用户的信息<ol type="1"><li>Cookie是存储在用户主机中的文本文件，记录一段时间内某用户(使用识别码识别，如“123456”)的访问记录</li><li>从而可以提供个性化服务</li></ol></li><li>采用<strong>TCP</strong>作为运输层协议，但<strong>HTTP协议本身是无连接的</strong>，通信双方再交换HTTP报文之前不需要先建立HTTP连接</li></ol><h4 id="http的连接方式">6.5.2.3 HTTP的连接方式</h4><ol type="1"><li>持久连接Keep-alive：<ol type="1"><li>非流水线：收到响应之后，才能发送下一个请求</li><li>流水线：可以连续发送请求，服务器依次返回请求</li></ol></li><li>非持久连接Close：</li></ol><p><img src="/images/AssetMarkdown/image-20221213223706488.png" alt="image-20221213223706488" style="zoom:80%;" /></p><h4 id="http报文结构">6.5.2.4 HTTP报文结构</h4><p>HTTP报文是<strong>面向文本</strong>的，因此在报文中的每一个字段都是一些ASCII码串</p><p>HTTP报文分为：请求报文、响应报文</p><ol type="1"><li>开始行：请求报文对应请求行，响应报文对应状态行<ol type="1"><li>方法：即命令，被请求的对象应执行什么操作</li></ol></li><li>首部行：说明浏览器、服务器、报文主题的一些信息</li><li>状态码：<ol type="1"><li><code>1xx</code>：表示<strong>通知信息</strong>，如请求收到了或正在处理</li><li><code>2xx</code>：表示<strong>成功</strong>，如接受或知道了<ol type="1"><li>如：<code>202 Accepted</code></li></ol></li><li><code>3xx</code>：表示<strong>重定向</strong>，如要完成请求还必须采取进一步的行动<ol type="1"><li>如：<code>301 Move Permanently</code></li></ol></li><li><code>4xx</code>：表示<strong>客户的差错</strong>，如请求中有错误的语法或不能完成<ol type="1"><li>如：<code>404 Not Found</code></li></ol></li><li><code>5xx</code>：表示<strong>服务器的差错</strong>，如服务器失效无法完成请求</li></ol></li></ol><p><img src="/images/AssetMarkdown/image-20221213224022037.png" alt="image-20221213224022037" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221213224256280.png" alt="image-20221213224256280" style="zoom:80%;" /></p><h2 id="流媒体-streaming-audio-and-video">6.6 流媒体 Streaming Audio andVideo</h2><ol type="1"><li>都是压缩的</li><li>都是边收边发</li></ol><h1 id="chapter-7网络安全">Chapter 7：网络安全</h1><h2 id="网络安全的5个方面">7.1 网络安全的5个方面</h2><p>传统密码学：机密性问题、不可否认性问题、完整性问题、认证问题</p><ol type="1"><li><p>机密性问题：Confidentiality</p><ol type="1"><li>保证发送的数据让非特权用户无法理解</li><li>默认：发送的数据所有人都可以收到</li></ol></li><li><p>不可否认性问题：Nonrepudiation</p><ol type="1"><li>数字签名</li></ol></li><li><p>完整性问题：Integrity</p><ol type="1"><li>保证接收到的数据，与发送的数据相同</li><li>消息摘要</li></ol></li><li><p>认证问题：Authentication</p><ol type="1"><li>证书</li></ol></li><li><p>可用性问题：Availability</p><ol type="1"><li>保证系统可以使用</li></ol></li></ol><h2 id="网络攻击的方式">7.2 网络攻击的方式</h2><h3 id="四个步骤">7.2.1 四个步骤</h3><ol type="1"><li>侦察 Reconnaissance：<ol type="1"><li>传统为扫描，找到攻击的目标</li></ol></li><li>嗅探和窥探 Sniffing and snooping：<ol type="1"><li>嗅探：将网络上的包保存下来</li><li>窥探：冲到系统里面，把里面的数据保存下来</li></ol></li><li>欺骗 Spoofing：<ol type="1"><li>让不应该发到我这里的包，发送到我这里</li><li>修改DNS</li><li>让交换机的转发表溢出，从而让交换机不得不广播数据</li></ol></li><li>破坏 Disruption</li></ol><h3 id="分布式拒绝服务攻击-ddos">7.2.2 分布式拒绝服务攻击 DDoS</h3><ol type="1"><li>TCP的三次握手，会占用服务器较多的资源</li><li>网络攻击的手段：控制多个僵尸网络，同时向服务器发送TCP连接建立请求，然后僵尸网络不回复，通常TCP连接建立的超时时间有2分钟，在这段时间内，服务器会进行等待</li><li>对应手段：SCTP协议<ol type="1"><li>连接建立时，服务器进行数据的加密，做成cookie，放到连接建立请求的确认包中，返回给发送方</li><li>客户端进行二次确认时，要把cookie再送回来</li><li>服务区把送回的数据解密，然后对对应的客户建立服务</li><li>相当于服务器没有维持状态，而是将状态放到包中</li></ol></li></ol><h2 id="防火墙">7.3 防火墙</h2><p><img src="/images/AssetMarkdown/image-20221231185157942.png" alt="image-20221231185157942" style="zoom:80%;" /></p><ol type="1"><li>目的：避免公网上的火烧到内网</li><li>方式：<ol type="1"><li>对进出的包进行过滤</li><li>对网络通信的行为进行分析，判断连接让进还是不让进</li></ol></li><li>DeMilitarizedzone：非军事区，将内网的一部分内容放在防火墙外面，让公网的人能够访问</li></ol><h2 id="密码学-cryptography">7.4 密码学 Cryptography</h2><h3 id="密码学加密模型">7.4.1 密码学加密模型</h3><p><img src="/images/AssetMarkdown/image-20221231192141222.png" alt="image-20221231192141222" style="zoom:80%;" /></p><ol type="1"><li>通信双方：Alice、Bob</li><li>概念<ol type="1"><li>明文 Plaintext：想要发送的原始数据，是保密的</li><li>密文 Ciphertext：加密后的数据，是公开的</li><li>加密函数 Encryption method</li><li>解密函数 Decryption method：两个函数是逆运算</li><li>加密密钥 Encryption key</li><li>解密密钥 Decryption key</li></ol></li><li>Alice会将明文发送给加密函数，进行加密，获得密文</li><li>Bob收到密文后，会将其发送给解密函数，进行解密，获取明文</li><li>加密的目标：敌人得到密文后，得不到对应的明文<ol type="1"><li>两种敌人：<ol type="1"><li>将密文偷偷截取下来</li><li>将密文截取下来后，发送另一个密文</li></ol></li><li>通常，加密和解密的函数都是公开的，甚至是标准化的</li><li>密钥是保密的</li><li>通常，加密密钥和解密密钥是同一个，或者很容易转换</li></ol></li><li>加密系统的强度<ol type="1"><li>加密/解密函数的强度</li><li>密钥不能重复使用，不能容易猜出</li></ol></li></ol><h3 id="加密解密函数">7.4.2 加密/解密函数</h3><ol type="1"><li><p>任何加密/解密函数，都是基于两个操作的迭代</p><ol type="1"><li><p>替换：将一个字母用另一个字母替换</p><ol type="1"><li>单替换可以通过词频统计来破译</li></ol></li><li><p>转置：将明文按照n个一组写成一行一行的，然后交换某些列，得到密文</p><ol type="1"><li>可以通过计算机枚举，获得明文</li></ol><p><img src="/images/AssetMarkdown/image-20221231194615466.png" alt="image-20221231194615466" style="zoom:80%;" /></p></li></ol></li></ol><h4 id="des标准the-data-encryption-standard">7.4.2.1 DES标准：The DataEncryption Standard</h4><ol type="1"><li><p>将明文切块，分别进行加密</p><ol type="1"><li>DES的块的大小为8字节</li></ol></li><li><p>IBM的原始设计：每次加密做了16次迭代，128 bit的密钥</p></li><li><p>经过NSA的修正：每次加密做了16次迭代，64bit的密钥，并且不能公开函数的设计的思路</p></li><li><p>Triple DES：将DES做三次，但只有两个密钥</p><p><img src="/images/AssetMarkdown/image-20221231195717835.png" alt="image-20221231195717835" style="zoom:80%;" /></p></li></ol><h4 id="aes标准the-advanced-encryption-standard">7.4.2.2 AES标准：TheAdvanced Encryption Standard</h4><ol type="1"><li>密钥长度：128，192，256 bits</li><li>也是分块加密</li></ol><h3 id="密钥不能被猜出来">7.4.3 密钥不能被猜出来</h3><ol type="1"><li>要尽可能随机<ol type="1"><li>伪随机数：通过函数计算出来，在一定时间后一定会发生重复</li><li>发生重复越晚，随机数生成算法更好</li></ol></li><li>不能重复使用</li></ol><h4 id="cipher-mode">7.4.3.1 Cipher Mode</h4><blockquote><p>将P<sub>i</sub>计算出的密文，与P<sub>i+1</sub>异或</p></blockquote><p><img src="/images/AssetMarkdown/image-20221231200230170.png" alt="image-20221231200230170" style="zoom:80%;" /></p><blockquote><p>将刚刚计算出的6个字节的密文再次加密，获得最左边的字节，然后与P<sub>10</sub>进行异或，得到C<sub>10</sub></p></blockquote><p><img src="/images/AssetMarkdown/image-20221231200355111.png" alt="image-20221231200355111" style="zoom:80%;" /></p><blockquote><p>给定初始值和密钥，生成密文，生成的密文会参与下一次的加密计算</p></blockquote><p><img src="/images/AssetMarkdown/image-20221231200527884.png" alt="image-20221231200527884" style="zoom:80%;" /></p><h3 id="传统密码体制-对称密码体制">7.4.4 传统密码体制 /对称密码体制</h3><ol type="1"><li>密钥是对称的、函数也是对称的</li><li>缺点：密钥的分发存在困难</li></ol><h3 id="现代密码体制-公钥体制">7.4.5 现代密码体制 / 公钥体制</h3><p>相同点：</p><ol type="1"><li>加密函数、解密函数仍然是逆运算，也是公开的</li></ol><p>不同点：</p><ol type="1"><li>加密密钥、解密密钥是不同的</li><li>加密密钥：公开的，也叫公钥</li><li>解密密钥：私有的，也叫私钥</li><li>算法上保证公钥推出私钥的难度很大</li><li>公钥体制的计算量很大，一般用于要加密的内容较少的地方/特殊用途</li></ol><h4 id="rsa算法">7.4.5.1 RSA算法</h4><p>算法详情：</p><ol type="1"><li>选择两个质数<span class="math inline">\(p\)</span>和<spanclass="math inline">\(q\)</span></li><li>计算<span class="math inline">\(n=p*q\)</span>，<spanclass="math inline">\(z=(p-1)*(q-1)\)</span></li><li>选择一个与<spanclass="math inline">\(z\)</span>接近的素数，称为<spanclass="math inline">\(d\)</span></li><li>找到满足<span class="math inline">\(e*d=1\ (mod\ z)\)</span>的<spanclass="math inline">\(e\)</span></li></ol><h2 id="反拒认数字签名">7.5 反拒认：数字签名</h2><h3 id="big-brother">7.5.1 Big Brother</h3><p><img src="/images/AssetMarkdown/image-20221231202218898.png" alt="image-20221231202218898" style="zoom:80%;" /></p><ol type="1"><li>Alice将借条给Big Brother</li><li>Big Brother将借条给Bob</li><li>Bob要债时，Big Brother作为公证人，证明借条的有效性</li></ol><h3 id="公钥数字签名">7.5.2 公钥数字签名</h3><p><img src="/images/AssetMarkdown/image-20221231202412942.png" alt="image-20221231202412942" style="zoom:80%;" /></p><ol type="1"><li>Alice将借条的明文P，通过Alice的解密函数和私钥进行加密，得到密文D<sub>A</sub>(P)<ol type="1"><li>D<sub>A</sub>(P)即为经过数字签名的借条</li></ol></li><li>Alice还会将D<sub>A</sub>(P)，通过Bob的加密函数和公钥进行加密，得到密文E<sub>B</sub>(D<sub>A</sub>(P))</li><li>E<sub>B</sub>(D<sub>A</sub>(P))在公网上进行传输，发送给Bob</li><li>E<sub>B</sub>(D<sub>A</sub>(P))发送给Bob后，Bob用过Bob的的解密函数和私钥进行解密，得到密文D<sub>A</sub>(P)</li><li>Bob然后通过Alice的加密函数和公钥进行解密，得到借条的明文P</li><li>反拒认：Bob将D<sub>A</sub>(P)给到法官，法官通过Alice的加密函数和公钥进行解密，得到借条的明文<ol type="1"><li>由于Alice的公钥和私钥唯一，且私钥不可知，因此该借条不可能被伪造</li></ol></li></ol><h2 id="数据的完整性防篡改消息摘要">7.6数据的完整性(防篡改)：消息摘要</h2><h3 id="消息摘要">7.6.1 消息摘要</h3><ol type="1"><li>给定P，计算MD(P)</li><li>MD(P)，很难计算P</li><li>如果P有轻微变化，MD(P)会变化非常大</li><li>为了防止摘要被篡改，所有摘要都是有数字签名的</li></ol><p><img src="/images/AssetMarkdown/image-20221231213122180.png" alt="image-20221231213122180" style="zoom:80%;" /></p><h2 id="认证问题证书">7.7 认证问题：证书</h2><p><img src="/images/AssetMarkdown/image-20221231213604914.png" alt="image-20221231213604914" style="zoom:80%;" /></p><ol type="1"><li>保证证书的真实性：找发证书的机构，对证书进行一次摘要，然后附加到证书上</li><li>证书中，除了有该节点的信息，还会该节点的公钥</li></ol><h3 id="x.509">7.7.1 X.509</h3><p><img src="/images/AssetMarkdown/image-20221231213821030.png" alt="image-20221231213821030" style="zoom:80%;" /></p><ol type="1"><li>发证书的实际机构是：CA</li><li>CA的证书由RA颁发，RA的证书由Root颁发</li><li>一般浏览器会预置一部分根证书，根证书也可以通过自己添加</li></ol><h2 id="基本应用">7.8 基本应用</h2><h3 id="通信安全">7.8.1 通信安全</h3><ol type="1"><li><p>IPsec：将认证信息，添加到IP数据报中</p><p><img src="/images/AssetMarkdown/image-20221231214424189.png" alt="image-20221231214424189" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221231214403935.png" alt="image-20221231214403935" style="zoom:80%;" /></p></li><li><p>Virtual Private Network：VPN，虚拟私有网</p><ol type="1"><li>是一个叠加网，在公网上建立一个叠加网，添加一些认证方式</li></ol><p><img src="/images/AssetMarkdown/image-20221231214510234.png" alt="image-20221231214510234" style="zoom:80%;" /></p></li><li><p>Wireless Security：无线安全</p></li></ol><h3 id="邮件安全">7.8.2 邮件安全</h3><p>PGP：Pretty Good Privacy</p><ol type="1"><li>明文P计算摘要，然后使用Alice的私钥进行签名，计算结果与P结合，形成P1</li><li>将P1压缩，形成P1.Z</li><li>Alice选择一个随机数K<sub>M</sub>，对P1.Z使用AES进行加密</li><li>同时，使用Bob的公钥，对K<sub>M</sub>进行加密，与加密后的P1.Z一起发送给Bob</li><li>最后使用Base64，将内容发送</li></ol><p><img src="/images/AssetMarkdown/image-20221231214636769.png" alt="image-20221231214636769" style="zoom:80%;" /></p><h3 id="web安全">7.8.3 WEB安全</h3><ol type="1"><li><p>DNS的安全问题：</p><ol type="1"><li>内容不能被造假</li><li>访问数据属于隐私问题</li></ol></li><li><p>WEB安全</p><ol type="1"><li>HTTP协议没有安全保证</li><li>HTTPS：Secure HTTP</li><li>Security(SSL)：安全套接子层</li><li>TLS：Transport Layer Security</li></ol><p><img src="/images/AssetMarkdown/image-20221231215524381.png" alt="image-20221231215524381" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221231215605132.png" alt="image-20221231215605132" style="zoom:80%;" /></p><p><img src="/images/AssetMarkdown/image-20221231215619602.png" alt="image-20221231215619602" style="zoom:80%;" /></p></li><li><p>运行代码安全</p><ol type="1"><li>WEB的代码是在客户端本地运行的，可能对客户端产生安全威胁</li><li>使用虚拟机</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 专业课学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
